<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>
<tagfile>
  <compound kind="file">
    <name>AbstractQueue.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_abstract_queue_8cc</filename>
    <includes id="_abstract_queue_8h" name="AbstractQueue.h" local="yes" imported="no">AbstractQueue.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractQueue.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_abstract_queue_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractRadio.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_abstract_radio_8cc</filename>
    <includes id="_abstract_radio_8h" name="AbstractRadio.h" local="yes" imported="no">AbstractRadio.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <includes id="_phy_control_info__m_8h" name="PhyControlInfo_m.h" local="yes" imported="no">PhyControlInfo_m.h</includes>
    <includes id="_ieee80211_consts_8h" name="Ieee80211Consts.h" local="yes" imported="no">Ieee80211Consts.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MK_TRANSMISSION_OVER</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_RECEPTION_COMPLETE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractRadio.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_abstract_radio_8h</filename>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">ChannelAccess.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_i_radio_model_8h" name="IRadioModel.h" local="yes" imported="no">IRadioModel.h</includes>
    <includes id="_i_reception_model_8h" name="IReceptionModel.h" local="yes" imported="no">IReceptionModel.h</includes>
    <includes id="_snr_list_8h" name="SnrList.h" local="yes" imported="no">SnrList.h</includes>
  </compound>
  <compound kind="file">
    <name>AirFrame_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MFCore/</path>
    <filename>_air_frame__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ANSimMobility.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_a_n_sim_mobility_8cc</filename>
    <includes id="_a_n_sim_mobility_8h" name="ANSimMobility.h" local="yes" imported="no">ANSimMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(ANSimMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ANSimMobility.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_a_n_sim_mobility_8h</filename>
    <includes id="_line_segments_mobility_base_8h" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
  </compound>
  <compound kind="file">
    <name>ARP.cc</name>
    <path>D:/home/INET-svn/Network/ARP/</path>
    <filename>_a_r_p_8cc</filename>
    <includes id="_a_r_p_8h" name="ARP.h" local="yes" imported="no">ARP.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a2</anchor>
      <arglist>(ARP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ARP.h</name>
    <path>D:/home/INET-svn/Network/ARP/</path>
    <filename>_a_r_p_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_a_r_p_packet__m_8h" name="ARPPacket_m.h" local="yes" imported="no">ARPPacket_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>ARPPacket_m.h</name>
    <path>D:/home/INET-svn/Network/ARP/</path>
    <filename>_a_r_p_packet__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARP_HEADER_BYTES</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ARPOpcode</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARP_REQUEST</name>
      <anchor>a8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARP_REPLY</name>
      <anchor>a8a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARP_RARP_REQUEST</name>
      <anchor>a8a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARP_RARP_REPLY</name>
      <anchor>a8a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b, ARPPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a7</anchor>
      <arglist>(cCommBuffer *b, ARPPacket &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ASExternalLSA.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>_a_s_external_l_s_a_8cc</filename>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
  </compound>
  <compound kind="file">
    <name>BasicDecider.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MFCore/</path>
    <filename>_basic_decider_8cc</filename>
    <includes id="_basic_decider_8h" name="BasicDecider.h" local="yes" imported="no">BasicDecider.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(BasicDecider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicDecider.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MFCore/</path>
    <filename>_basic_decider_8h</filename>
    <includes id="_basic_module_8h" name="BasicModule.h" local="yes" imported="no">BasicModule.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_snr_control_info__m_8h" name="SnrControlInfo_m.h" local="yes" imported="no">SnrControlInfo_m.h</includes>
  </compound>
  <compound kind="file">
    <name>BasicDSCPClassifier.cc</name>
    <path>D:/home/INET-svn/Network/Queue/</path>
    <filename>_basic_d_s_c_p_classifier_8cc</filename>
    <includes id="_basic_d_s_c_p_classifier_8h" name="BasicDSCPClassifier.h" local="yes" imported="no">BasicDSCPClassifier.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>BEST_EFFORT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a1</anchor>
      <arglist>(BasicDSCPClassifier)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicDSCPClassifier.h</name>
    <path>D:/home/INET-svn/Network/Queue/</path>
    <filename>_basic_d_s_c_p_classifier_8h</filename>
    <includes id="_i_qo_s_classifier_8h" name="IQoSClassifier.h" local="yes" imported="no">IQoSClassifier.h</includes>
  </compound>
  <compound kind="file">
    <name>BasicMobility.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_basic_mobility_8cc</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicMobility.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_basic_mobility_8h</filename>
    <includes id="_basic_module_8h" name="BasicModule.h" local="yes" imported="no">BasicModule.h</includes>
    <includes id="_channel_control_8h" name="ChannelControl.h" local="yes" imported="no">ChannelControl.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
  </compound>
  <compound kind="file">
    <name>BasicModule.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_basic_module_8cc</filename>
    <includes id="_basic_module_8h" name="BasicModule.h" local="yes" imported="no">BasicModule.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicModule.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_basic_module_8h</filename>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
  </compound>
  <compound kind="file">
    <name>BasicSnrEval.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MFCore/</path>
    <filename>_basic_snr_eval_8cc</filename>
    <includes id="_basic_snr_eval_8h" name="BasicSnrEval.h" local="yes" imported="no">BasicSnrEval.h</includes>
    <includes id="_transm_complete__m_8h" name="TransmComplete_m.h" local="yes" imported="no">TransmComplete_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(BasicSnrEval)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicSnrEval.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MFCore/</path>
    <filename>_basic_snr_eval_8h</filename>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">ChannelAccess.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_snr_control_info__m_8h" name="SnrControlInfo_m.h" local="yes" imported="no">SnrControlInfo_m.h</includes>
  </compound>
  <compound kind="file">
    <name>Blackboard.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_blackboard_8cc</filename>
    <includes id="_blackboard_8h" name="Blackboard.h" local="yes" imported="no">Blackboard.h</includes>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(Blackboard)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os, const Blackboard::BBItem &amp;bbi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Blackboard.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_blackboard_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="typedef">
      <type>Blackboard::BBItemRef</type>
      <name>BBItemRef</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BonnMotionFileCache.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_bonn_motion_file_cache_8cc</filename>
    <includes id="_bonn_motion_file_cache_8h" name="BonnMotionFileCache.h" local="yes" imported="no">BonnMotionFileCache.h</includes>
  </compound>
  <compound kind="file">
    <name>BonnMotionFileCache.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_bonn_motion_file_cache_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
  </compound>
  <compound kind="file">
    <name>BonnMotionMobility.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_bonn_motion_mobility_8cc</filename>
    <includes id="_bonn_motion_mobility_8h" name="BonnMotionMobility.h" local="yes" imported="no">BonnMotionMobility.h</includes>
    <includes id="_bonn_motion_file_cache_8h" name="BonnMotionFileCache.h" local="yes" imported="no">BonnMotionFileCache.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(BonnMotionMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BonnMotionMobility.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_bonn_motion_mobility_8h</filename>
    <includes id="_line_segments_mobility_base_8h" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
    <includes id="_bonn_motion_file_cache_8h" name="BonnMotionFileCache.h" local="yes" imported="no">BonnMotionFileCache.h</includes>
  </compound>
  <compound kind="file">
    <name>bsdint.h</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/headers/</path>
    <filename>bsdint_8h</filename>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>u_int8_t</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>u_int16_t</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>u_int32_t</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>u_int64_t</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uchar</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ushort</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ulong</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>u_char</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>u_short</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>u_int</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>u_long</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ByteArrayMessage.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_byte_array_message_8cc</filename>
    <includes id="_byte_array_message_8h" name="ByteArrayMessage.h" local="yes" imported="no">ByteArrayMessage.h</includes>
  </compound>
  <compound kind="file">
    <name>ByteArrayMessage.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_byte_array_message_8h</filename>
    <includes id="_byte_array_message__m_8h" name="ByteArrayMessage_m.h" local="yes" imported="no">ByteArrayMessage_m.h</includes>
  </compound>
  <compound kind="file">
    <name>ByteArrayMessage_m.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_byte_array_message__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.cc</name>
    <path>D:/home/INET-svn/World/</path>
    <filename>_channel_access_8cc</filename>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">ChannelAccess.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.h</name>
    <path>D:/home/INET-svn/World/</path>
    <filename>_channel_access_8h</filename>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">../NetworkInterfaces/MFCore/AirFrame_m.h</includes>
    <includes id="_basic_module_8h" name="BasicModule.h" local="yes" imported="no">BasicModule.h</includes>
    <includes id="_channel_control_8h" name="ChannelControl.h" local="yes" imported="no">ChannelControl.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelControl.cc</name>
    <path>D:/home/INET-svn/World/</path>
    <filename>_channel_control_8cc</filename>
    <includes id="_channel_control_8h" name="ChannelControl.h" local="yes" imported="no">ChannelControl.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(ChannelControl)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os, const ChannelControl::HostEntry &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;os, const ChannelControl::TransmissionList &amp;tl)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelControl.h</name>
    <path>D:/home/INET-svn/World/</path>
    <filename>_channel_control_8h</filename>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">../NetworkInterfaces/MFCore/AirFrame_m.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LIGHT_SPEED</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRANSMISSION_PURGE_INTERVAL</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelInstaller.cc</name>
    <path>D:/home/INET-svn/World/</path>
    <filename>_channel_installer_8cc</filename>
    <includes id="_channel_installer_8h" name="ChannelInstaller.h" local="yes" imported="no">ChannelInstaller.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(ChannelInstaller)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelInstaller.h</name>
    <path>D:/home/INET-svn/World/</path>
    <filename>_channel_installer_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>CircleMobility.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_circle_mobility_8cc</filename>
    <includes id="_circle_mobility_8h" name="CircleMobility.h" local="yes" imported="no">CircleMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(CircleMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CircleMobility.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_circle_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
  </compound>
  <compound kind="file">
    <name>common.cc</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>common_8cc</filename>
    <includes id="common_8h" name="common.h" local="yes" imported="no">common.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>intToString</name>
      <anchor>a0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchor>a1</anchor>
      <arglist>(IPAddressVector vec)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchor>a2</anchor>
      <arglist>(IPAddressVector vec, const char *delim)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchor>a3</anchor>
      <arglist>(EroVector vec)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchor>a4</anchor>
      <arglist>(EroVector vec, const char *delim)</arglist>
    </member>
    <member kind="function">
      <type>EroVector</type>
      <name>routeToEro</name>
      <anchor>a5</anchor>
      <arglist>(IPAddressVector rro)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common.h</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>common_8h</filename>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>intToString</name>
      <anchor>a0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchor>a1</anchor>
      <arglist>(IPAddressVector vec)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchor>a2</anchor>
      <arglist>(IPAddressVector vec, const char *delim)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchor>a3</anchor>
      <arglist>(EroVector vec)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>vectorToString</name>
      <anchor>a4</anchor>
      <arglist>(EroVector vec, const char *delim)</arglist>
    </member>
    <member kind="function">
      <type>EroVector</type>
      <name>routeToEro</name>
      <anchor>a5</anchor>
      <arglist>(IPAddressVector rro)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Consts80211.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/macLayer/</path>
    <filename>_consts80211_8h</filename>
    <member kind="enumeration">
      <name>_802_11frameType</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA</name>
      <anchor>a24a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROADCAST</name>
      <anchor>a24a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTS</name>
      <anchor>a24a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CTS</name>
      <anchor>a24a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACK</name>
      <anchor>a24a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACKRTS</name>
      <anchor>a24a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEGIN_RECEPTION</name>
      <anchor>a24a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BITERROR</name>
      <anchor>a24a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLISION</name>
      <anchor>a24a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_RTS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_CTS</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_ACK</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>ST</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>SIFS</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>DIFS</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>RETRY_LIMIT</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>CW_MIN</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>CW_MAX</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HEADER_LENGTH</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>HEADER_WITHOUT_PREAMBLE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BITRATE_HEADER</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BANDWIDTH</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAC_GENERATOR</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PROCESSING_TIMEOUT</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstSpeedMobility.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_const_speed_mobility_8cc</filename>
    <includes id="_const_speed_mobility_8h" name="ConstSpeedMobility.h" local="yes" imported="no">ConstSpeedMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(ConstSpeedMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstSpeedMobility.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_const_speed_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
  </compound>
  <compound kind="file">
    <name>ConstType.h</name>
    <path>D:/home/INET-svn/Network/MPLS/</path>
    <filename>_const_type_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <namespace>ConstType</namespace>
    <member kind="enumeration">
      <name>messageKind</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPLS_KIND</name>
      <anchor>a11a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_KIND</name>
      <anchor>a11a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>libDataMarker</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>prtDataMarker</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>UnknownData</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>NoLabel</name>
      <anchor>a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>wildcast</name>
      <anchor>a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>empty</name>
      <anchor>a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ldp_port</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>LDP_KIND</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>HOW_KIND</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ControlManetRouting_m.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_control_manet_routing__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ManetControlType</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MANET_ROUTE_NO_OPTION</name>
      <anchor>a6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MANET_ROUTE_UPDATE</name>
      <anchor>a6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MANET_ROUTE_NOROUTE</name>
      <anchor>a6a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b, ControlManetRouting &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b, ControlManetRouting &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Coord.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_coord_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(std::ostream &amp;os, const Coord &amp;coord)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CSMAMacLayer.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/macLayer/</path>
    <filename>_c_s_m_a_mac_layer_8cc</filename>
    <includes id="_c_s_m_a_mac_layer_8h" name="CSMAMacLayer.h" local="yes" imported="no">CSMAMacLayer.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(CSMAMacLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CSMAMacLayer.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/macLayer/</path>
    <filename>_c_s_m_a_mac_layer_8h</filename>
    <includes id="_wireless_mac_base_8h" name="WirelessMacBase.h" local="yes" imported="no">WirelessMacBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_mac_pkt__m_8h" name="MacPkt_m.h" local="yes" imported="no">MacPkt_m.h</includes>
  </compound>
  <compound kind="file">
    <name>DatabaseDescriptionHandler.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_database_description_handler_8cc</filename>
    <includes id="_database_description_handler_8h" name="DatabaseDescriptionHandler.h" local="yes" imported="no">DatabaseDescriptionHandler.h</includes>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
  </compound>
  <compound kind="file">
    <name>DatabaseDescriptionHandler.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_database_description_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>Decider80211.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/decider/</path>
    <filename>_decider80211_8cc</filename>
    <includes id="_decider80211_8h" name="Decider80211.h" local="yes" imported="no">Decider80211.h</includes>
    <includes id="_consts80211_8h" name="Consts80211.h" local="yes" imported="no">Consts80211.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(Decider80211)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Decider80211.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/decider/</path>
    <filename>_decider80211_8h</filename>
    <includes id="_basic_decider_8h" name="BasicDecider.h" local="no" imported="no">BasicDecider.h</includes>
  </compound>
  <compound kind="file">
    <name>Transport/RTP/tmp/defs.h</name>
    <path>D:/home/INET-svn/Transport/RTP/tmp/</path>
    <filename>_transport_2_r_t_p_2tmp_2defs_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="sockets_8h" name="sockets.h" local="yes" imported="no">sockets.h</includes>
    <includes id="_socket_interface_packet_8h" name="SocketInterfacePacket.h" local="yes" imported="no">SocketInterfacePacket.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IN_Addr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IN_Port</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPSuite_PORT_UNDEF</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Util/HeaderSerializers/headers/defs.h</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/headers/</path>
    <filename>_util_2_header_serializers_2headers_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>__BSD_VISIBLE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DropTailQoSQueue.cc</name>
    <path>D:/home/INET-svn/Network/Queue/</path>
    <filename>_drop_tail_qo_s_queue_8cc</filename>
    <includes id="_drop_tail_qo_s_queue_8h" name="DropTailQoSQueue.h" local="yes" imported="no">DropTailQoSQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(DropTailQoSQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DropTailQoSQueue.h</name>
    <path>D:/home/INET-svn/Network/Queue/</path>
    <filename>_drop_tail_qo_s_queue_8h</filename>
    <includes id="_passive_queue_base_8h" name="PassiveQueueBase.h" local="yes" imported="no">PassiveQueueBase.h</includes>
    <includes id="_i_qo_s_classifier_8h" name="IQoSClassifier.h" local="yes" imported="no">IQoSClassifier.h</includes>
  </compound>
  <compound kind="file">
    <name>DropTailQueue.cc</name>
    <path>D:/home/INET-svn/Network/Queue/</path>
    <filename>_drop_tail_queue_8cc</filename>
    <includes id="_drop_tail_queue_8h" name="DropTailQueue.h" local="yes" imported="no">DropTailQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(DropTailQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DropTailQueue.h</name>
    <path>D:/home/INET-svn/Network/Queue/</path>
    <filename>_drop_tail_queue_8h</filename>
    <includes id="_passive_queue_base_8h" name="PassiveQueueBase.h" local="yes" imported="no">PassiveQueueBase.h</includes>
  </compound>
  <compound kind="file">
    <name>DumbTCP.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_dumb_t_c_p_8cc</filename>
    <includes id="_dumb_t_c_p_8h" name="DumbTCP.h" local="yes" imported="no">DumbTCP.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>REXMIT_TIMEOUT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a1</anchor>
      <arglist>(DumbTCP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DumbTCP.h</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_dumb_t_c_p_8h</filename>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
  </compound>
  <compound kind="file">
    <name>Dummy.cc</name>
    <path>D:/home/INET-svn/Network/Extras/</path>
    <filename>_dummy_8cc</filename>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(Dummy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EnqueueHook.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_enqueue_hook_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>ErrAndCollDecider.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/decider/</path>
    <filename>_err_and_coll_decider_8cc</filename>
    <includes id="_err_and_coll_decider_8h" name="ErrAndCollDecider.h" local="yes" imported="no">ErrAndCollDecider.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(ErrAndCollDecider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ErrAndCollDecider.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/decider/</path>
    <filename>_err_and_coll_decider_8h</filename>
    <includes id="_snr_decider_8h" name="SnrDecider.h" local="yes" imported="no">SnrDecider.h</includes>
  </compound>
  <compound kind="file">
    <name>ErrorHandling.cc</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_error_handling_8cc</filename>
    <includes id="_error_handling_8h" name="ErrorHandling.h" local="yes" imported="no">ErrorHandling.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_c_m_p_message_8h" name="ICMPMessage.h" local="yes" imported="no">ICMPMessage.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(ErrorHandling)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ErrorHandling.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_error_handling_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>EtherApp_m.h</name>
    <path>D:/home/INET-svn/Applications/Ethernet/</path>
    <filename>_ether_app__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERAPP_CLI_SAP</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERAPP_SRV_SAP</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b, EtherAppReq &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b, EtherAppReq &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b, EtherAppResp &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b, EtherAppResp &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherAppCli.cc</name>
    <path>D:/home/INET-svn/Applications/Ethernet/</path>
    <filename>_ether_app_cli_8cc</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_ether_app__m_8h" name="EtherApp_m.h" local="yes" imported="no">EtherApp_m.h</includes>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(EtherAppCli)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherAppSrv.cc</name>
    <path>D:/home/INET-svn/Applications/Ethernet/</path>
    <filename>_ether_app_srv_8cc</filename>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_ether_app__m_8h" name="EtherApp_m.h" local="yes" imported="no">EtherApp_m.h</includes>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MAX_REPLY_CHUNK_SIZE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(EtherAppSrv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherBus.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ether_bus_8cc</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UPSTREAM</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DOWNSTREAM</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a2</anchor>
      <arglist>(EtherBus)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherEncap.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ether_encap_8cc</filename>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_ether_m_a_c_8h" name="EtherMAC.h" local="yes" imported="no">EtherMAC.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(EtherEncap)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherFrame_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ether_frame__m_8h</filename>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_SIGNAL</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETH_FRAME</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETH_PAUSE</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b, EtherFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b, EtherFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b, EthernetIIFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a7</anchor>
      <arglist>(cCommBuffer *b, EthernetIIFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a8</anchor>
      <arglist>(cCommBuffer *b, EtherFrameWithLLC &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a9</anchor>
      <arglist>(cCommBuffer *b, EtherFrameWithLLC &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a10</anchor>
      <arglist>(cCommBuffer *b, EtherFrameWithSNAP &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a11</anchor>
      <arglist>(cCommBuffer *b, EtherFrameWithSNAP &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a12</anchor>
      <arglist>(cCommBuffer *b, EtherPauseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a13</anchor>
      <arglist>(cCommBuffer *b, EtherPauseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a14</anchor>
      <arglist>(cCommBuffer *b, EtherAutoconfig &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a15</anchor>
      <arglist>(cCommBuffer *b, EtherAutoconfig &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherHub.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ether_hub_8cc</filename>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(EtherHub)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherLLC.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ether_l_l_c_8cc</filename>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(EtherLLC)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherMAC.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ether_m_a_c_8cc</filename>
    <includes id="_ether_m_a_c_8h" name="EtherMAC.h" local="yes" imported="no">EtherMAC.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a2</anchor>
      <arglist>(EtherMAC)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherMAC.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ether_m_a_c_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_ether_m_a_c_base_8h" name="EtherMACBase.h" local="yes" imported="no">EtherMACBase.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>AUTOCONFIG_PERIOD</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherMAC2.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ether_m_a_c2_8cc</filename>
    <includes id="_ether_m_a_c2_8h" name="EtherMAC2.h" local="yes" imported="no">EtherMAC2.h</includes>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(EtherMAC2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EtherMAC2.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ether_m_a_c2_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_ether_m_a_c_base_8h" name="EtherMACBase.h" local="yes" imported="no">EtherMACBase.h</includes>
  </compound>
  <compound kind="file">
    <name>EtherMACBase.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ether_m_a_c_base_8cc</filename>
    <includes id="_ether_m_a_c_base_8h" name="EtherMACBase.h" local="yes" imported="no">EtherMACBase.h</includes>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>EtherMACBase.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ether_m_a_c_base_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <includes id="_tx_notif_details_8h" name="TxNotifDetails.h" local="yes" imported="no">TxNotifDetails.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ENDIFG</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDRECEPTION</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDBACKOFF</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDTRANSMISSION</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDJAMMING</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDPAUSE</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDAUTOCONFIG</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TX_IDLE_STATE</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WAIT_IFG_STATE</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRANSMITTING_STATE</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAMMING_STATE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BACKOFF_STATE</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PAUSE_STATE</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RX_IDLE_STATE</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RECEIVING_STATE</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RX_COLLISION_STATE</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ethernet.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>_ethernet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MAX_PACKETBURST</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIGABIT_MAX_BURST_BYTES</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_ETHERNET_DATA</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_ETHERNET_FRAME</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_ETHERNET_FRAME</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIGABIT_MIN_FRAME_WITH_EXT</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTERFRAME_GAP_BITS</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHERNET_TXRATE</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAST_ETHERNET_TXRATE</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIGABIT_ETHERNET_TXRATE</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAST_GIGABIT_ETHERNET_TXRATE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SLOT_TIME</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIGABIT_SLOT_TIME</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_ATTEMPTS</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BACKOFF_RANGE_LIMIT</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_SIGNAL_BYTES</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PREAMBLE_BYTES</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SFD_BYTES</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PAUSE_BITTIME</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_MAC_FRAME_BYTES</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_LLC_HEADER_LENGTH</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_SNAP_HEADER_LENGTH</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ETHER_PAUSE_COMMAND_BYTES</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FailureManager.cc</name>
    <path>D:/home/INET-svn/Network/Extras/</path>
    <filename>_failure_manager_8cc</filename>
    <includes id="_failure_manager_8h" name="FailureManager.h" local="yes" imported="no">FailureManager.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(FailureManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FailureManager.h</name>
    <path>D:/home/INET-svn/Network/Extras/</path>
    <filename>_failure_manager_8h</filename>
    <includes id="_i_scriptable_8h" name="IScriptable.h" local="yes" imported="no">IScriptable.h</includes>
  </compound>
  <compound kind="file">
    <name>FlatNetworkConfigurator.cc</name>
    <path>D:/home/INET-svn/Network/AutoRouting/</path>
    <filename>_flat_network_configurator_8cc</filename>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_flat_network_configurator_8h" name="FlatNetworkConfigurator.h" local="yes" imported="no">FlatNetworkConfigurator.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(FlatNetworkConfigurator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlatNetworkConfigurator.h</name>
    <path>D:/home/INET-svn/Network/AutoRouting/</path>
    <filename>_flat_network_configurator_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>FlatNetworkConfigurator6.cc</name>
    <path>D:/home/INET-svn/Network/AutoRouting/</path>
    <filename>_flat_network_configurator6_8cc</filename>
    <includes id="_flat_network_configurator6_8h" name="FlatNetworkConfigurator6.h" local="yes" imported="no">FlatNetworkConfigurator6.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(FlatNetworkConfigurator6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlatNetworkConfigurator6.h</name>
    <path>D:/home/INET-svn/Network/AutoRouting/</path>
    <filename>_flat_network_configurator6_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>FSMA.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_f_s_m_a_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_Switch</name>
      <anchor>a0</anchor>
      <arglist>(fsm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_Print</name>
      <anchor>a1</anchor>
      <arglist>(exiting)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_State</name>
      <anchor>a2</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_Event_Transition</name>
      <anchor>a3</anchor>
      <arglist>(transition, condition, target, action)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_No_Event_Transition</name>
      <anchor>a4</anchor>
      <arglist>(transition, condition, target, action)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_Transition</name>
      <anchor>a5</anchor>
      <arglist>(transition, condition, target, action)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSMA_Enter</name>
      <anchor>a6</anchor>
      <arglist>(action)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FWMath.h</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>_f_w_math_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPSILON</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericAppMsg_m.h</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_generic_app_msg__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, GenericAppMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, GenericAppMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericRadio.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_generic_radio_8cc</filename>
    <includes id="_generic_radio_8h" name="GenericRadio.h" local="yes" imported="no">GenericRadio.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(GenericRadio)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericRadio.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_generic_radio_8h</filename>
    <includes id="_abstract_radio_8h" name="AbstractRadio.h" local="yes" imported="no">AbstractRadio.h</includes>
  </compound>
  <compound kind="file">
    <name>GenericRadioModel.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_generic_radio_model_8cc</filename>
    <includes id="_generic_radio_model_8h" name="GenericRadioModel.h" local="yes" imported="no">GenericRadioModel.h</includes>
    <includes id="_modulation_8h" name="Modulation.h" local="yes" imported="no">Modulation.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(GenericRadioModel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericRadioModel.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_generic_radio_model_8h</filename>
    <includes id="_i_radio_model_8h" name="IRadioModel.h" local="yes" imported="no">IRadioModel.h</includes>
    <includes id="_i_modulation_8h" name="IModulation.h" local="yes" imported="no">IModulation.h</includes>
  </compound>
  <compound kind="file">
    <name>GilbertElliotSnr.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/snrEval/</path>
    <filename>_gilbert_elliot_snr_8cc</filename>
    <includes id="_gilbert_elliot_snr_8h" name="GilbertElliotSnr.h" local="yes" imported="no">GilbertElliotSnr.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(GilbertElliotSnr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GilbertElliotSnr.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/snrEval/</path>
    <filename>_gilbert_elliot_snr_8h</filename>
    <includes id="_snr_eval_8h" name="SnrEval.h" local="yes" imported="no">SnrEval.h</includes>
  </compound>
  <compound kind="file">
    <name>HelloHandler.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_hello_handler_8cc</filename>
    <includes id="_hello_handler_8h" name="HelloHandler.h" local="yes" imported="no">HelloHandler.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
  </compound>
  <compound kind="file">
    <name>HelloHandler.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_hello_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>IClassifier.h</name>
    <path>D:/home/INET-svn/Network/MPLS/</path>
    <filename>_i_classifier_8h</filename>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
  </compound>
  <compound kind="file">
    <name>ICMP.cc</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_c_m_p_8cc</filename>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_c_m_p_8h" name="ICMP.h" local="yes" imported="no">ICMP.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(ICMP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ICMP.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_c_m_p_8h</filename>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_i_c_m_p_message_8h" name="ICMPMessage.h" local="yes" imported="no">ICMPMessage.h</includes>
  </compound>
  <compound kind="file">
    <name>ICMPAccess.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_c_m_p_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_i_c_m_p_8h" name="ICMP.h" local="yes" imported="no">ICMP.h</includes>
  </compound>
  <compound kind="file">
    <name>ICMPMessage.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_c_m_p_message_8h</filename>
    <includes id="_i_c_m_p_message__m_8h" name="ICMPMessage_m.h" local="yes" imported="no">ICMPMessage_m.h</includes>
  </compound>
  <compound kind="file">
    <name>ICMPMessage_m.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_c_m_p_message__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ICMPCode</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPDestinationUnreachableCodes</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_NETWORK_UNREACHABLE</name>
      <anchor>a29a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_HOST_UNREACHABLE</name>
      <anchor>a29a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_PROTOCOL_UNREACHABLE</name>
      <anchor>a29a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_PORT_UNREACHABLE</name>
      <anchor>a29a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_FRAGMENTATION_NEEDED</name>
      <anchor>a29a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_SOURCE_ROUTE_FAILED</name>
      <anchor>a29a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_DESTINATION_NETWORK_UNKNOWN</name>
      <anchor>a29a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_DESTINATION_HOST_UNKNOWN</name>
      <anchor>a29a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_SOURCE_HOST_ISOLATED</name>
      <anchor>a29a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_NETWORK_PROHIBITED</name>
      <anchor>a29a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_HOST_PROHIBITED</name>
      <anchor>a29a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_NETWORK_UNREACHABLE_FOR_TYPE_OF_SERVICE</name>
      <anchor>a29a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_HOST_UNREACHABLE_FOR_TYPE_OF_SERVICE</name>
      <anchor>a29a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_COMMUNICATION_PROHIBITED</name>
      <anchor>a29a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_HOST_PRECEDENCE_VIOLATION</name>
      <anchor>a29a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DU_PRECEDENCE_CUTOFF_IN_EFFECT</name>
      <anchor>a29a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_AODV_QUEUE_FULL</name>
      <anchor>a29a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPType</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_DESTINATION_UNREACHABLE</name>
      <anchor>a30a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_REDIRECT</name>
      <anchor>a30a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_TIME_EXCEEDED</name>
      <anchor>a30a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_PARAMETER_PROBLEM</name>
      <anchor>a30a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_ECHO_REQUEST</name>
      <anchor>a30a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_ECHO_REPLY</name>
      <anchor>a30a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_TIMESTAMP_REQUEST</name>
      <anchor>a30a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP_TIMESTAMP_REPLY</name>
      <anchor>a30a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a27</anchor>
      <arglist>(cCommBuffer *b, ICMPMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a28</anchor>
      <arglist>(cCommBuffer *b, ICMPMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ICMPSerializer.cc</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/</path>
    <filename>_i_c_m_p_serializer_8cc</filename>
    <includes id="_util_2_header_serializers_2headers_2defs_8h" name="Util/HeaderSerializers/headers/defs.h" local="yes" imported="no">headers/defs.h</includes>
    <includes id="bsdint_8h" name="bsdint.h" local="yes" imported="no">headers/bsdint.h</includes>
    <includes id="in_8h" name="in.h" local="yes" imported="no">headers/in.h</includes>
    <includes id="in__systm_8h" name="in_systm.h" local="yes" imported="no">headers/in_systm.h</includes>
    <includes id="_util_2_header_serializers_2headers_2_i_p_8h" name="Util/HeaderSerializers/headers/IP.h" local="yes" imported="no">headers/ip.h</includes>
    <includes id="ip__icmp_8h" name="ip_icmp.h" local="yes" imported="no">headers/ip_icmp.h</includes>
    <includes id="_i_p_serializer_8h" name="IPSerializer.h" local="yes" imported="no">IPSerializer.h</includes>
    <includes id="_i_c_m_p_serializer_8h" name="ICMPSerializer.h" local="yes" imported="no">ICMPSerializer.h</includes>
    <includes id="_ping_payload__m_8h" name="PingPayload_m.h" local="yes" imported="no">../../Applications/PingApp/PingPayload_m.h</includes>
    <namespace>INETFw</namespace>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>u_int8_t</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>u_int16_t</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>u_int32_t</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>u_int64_t</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uchar</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ushort</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ulong</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>u_char</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>u_short</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>u_int</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>u_long</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>in_addr_t</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int16_t</type>
      <name>n_short</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_long</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_time</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ICMPSerializer.h</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/</path>
    <filename>_i_c_m_p_serializer_8h</filename>
    <includes id="_i_c_m_p_message__m_8h" name="ICMPMessage_m.h" local="yes" imported="no">ICMPMessage_m.h</includes>
  </compound>
  <compound kind="file">
    <name>ICMPv6.cc</name>
    <path>D:/home/INET-svn/Network/ICMPv6/</path>
    <filename>_i_c_m_pv6_8cc</filename>
    <includes id="_i_c_m_pv6_8h" name="ICMPv6.h" local="yes" imported="no">ICMPv6.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(ICMPv6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ICMPv6.h</name>
    <path>D:/home/INET-svn/Network/ICMPv6/</path>
    <filename>_i_c_m_pv6_8h</filename>
    <includes id="_routing_table6_access_8h" name="RoutingTable6Access.h" local="yes" imported="no">RoutingTable6Access.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>ICMPv6Access.h</name>
    <path>D:/home/INET-svn/Network/ICMPv6/</path>
    <filename>_i_c_m_pv6_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_i_c_m_pv6_8h" name="ICMPv6.h" local="yes" imported="no">ICMPv6.h</includes>
  </compound>
  <compound kind="file">
    <name>ICMPv6Message_m.h</name>
    <path>D:/home/INET-svn/Network/ICMPv6/</path>
    <filename>_i_c_m_pv6_message__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMPv6_HEADER_BYTES</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPv6Type</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_UNSPECIFIED</name>
      <anchor>a41a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_DESTINATION_UNREACHABLE</name>
      <anchor>a41a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_PACKET_TOO_BIG</name>
      <anchor>a41a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_TIME_EXCEEDED</name>
      <anchor>a41a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_PARAMETER_PROBLEM</name>
      <anchor>a41a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_ECHO_REQUEST</name>
      <anchor>a41a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_ECHO_REPLY</name>
      <anchor>a41a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_MLD_QUERY</name>
      <anchor>a41a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_MLD_REPORT</name>
      <anchor>a41a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_MLD_DONE</name>
      <anchor>a41a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_ROUTER_SOL</name>
      <anchor>a41a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_ROUTER_AD</name>
      <anchor>a41a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_NEIGHBOUR_SOL</name>
      <anchor>a41a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_NEIGHBOUR_AD</name>
      <anchor>a41a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_REDIRECT</name>
      <anchor>a41a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMPv6_MLDv2_REPORT</name>
      <anchor>a41a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPv6DEST_UN</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_ROUTE_TO_DEST</name>
      <anchor>a42a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMM_WITH_DEST_PROHIBITED</name>
      <anchor>a42a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS_UNREACHABLE</name>
      <anchor>a42a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PORT_UNREACHABLE</name>
      <anchor>a42a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPv6_TIME_EX</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ND_HOP_LIMIT_EXCEEDED</name>
      <anchor>a43a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ND_FRAGMENT_REASSEMBLY_TIME</name>
      <anchor>a43a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ICMPv6_PARAMETER_PROB</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROREOUS_HDR_FIELD</name>
      <anchor>a44a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_NEXT_HDR_TYPE</name>
      <anchor>a44a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_IPV6_OPTION</name>
      <anchor>a44a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a27</anchor>
      <arglist>(cCommBuffer *b, ICMPv6Message &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a28</anchor>
      <arglist>(cCommBuffer *b, ICMPv6Message &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a29</anchor>
      <arglist>(cCommBuffer *b, ICMPv6DestUnreachableMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a30</anchor>
      <arglist>(cCommBuffer *b, ICMPv6DestUnreachableMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a31</anchor>
      <arglist>(cCommBuffer *b, ICMPv6PacketTooBigMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a32</anchor>
      <arglist>(cCommBuffer *b, ICMPv6PacketTooBigMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a33</anchor>
      <arglist>(cCommBuffer *b, ICMPv6TimeExceededMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a34</anchor>
      <arglist>(cCommBuffer *b, ICMPv6TimeExceededMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a35</anchor>
      <arglist>(cCommBuffer *b, ICMPv6ParamProblemMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a36</anchor>
      <arglist>(cCommBuffer *b, ICMPv6ParamProblemMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a37</anchor>
      <arglist>(cCommBuffer *b, ICMPv6EchoRequestMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a38</anchor>
      <arglist>(cCommBuffer *b, ICMPv6EchoRequestMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a39</anchor>
      <arglist>(cCommBuffer *b, ICMPv6EchoReplyMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a40</anchor>
      <arglist>(cCommBuffer *b, ICMPv6EchoReplyMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211AgentSTA.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_agent_s_t_a_8cc</filename>
    <includes id="_ieee80211_agent_s_t_a_8h" name="Ieee80211AgentSTA.h" local="yes" imported="no">Ieee80211AgentSTA.h</includes>
    <includes id="_ieee80211_primitives__m_8h" name="Ieee80211Primitives_m.h" local="yes" imported="no">Ieee80211Primitives_m.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MK_STARTUP</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(Ieee80211AgentSTA)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211AgentSTA.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_agent_s_t_a_8h</filename>
    <includes id="_ieee80211_primitives__m_8h" name="Ieee80211Primitives_m.h" local="yes" imported="no">Ieee80211Primitives_m.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211Consts.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mac/</path>
    <filename>_ieee80211_consts_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>BITERROR</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COLLISION</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_RTS</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_CTS</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LENGTH_ACK</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const simtime_t</type>
      <name>ST</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const simtime_t</type>
      <name>SIFS</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const simtime_t</type>
      <name>DIFS</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const simtime_t</type>
      <name>MAX_PROPAGATION_DELAY</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>RETRY_LIMIT</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>CW_MIN</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>CW_MAX</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HEADER_LENGTH</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>HEADER_WITHOUT_PREAMBLE</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BITRATE_HEADER</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BANDWIDTH</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211Frame_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mac/</path>
    <filename>_ieee80211_frame__m_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211FrameType</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_ASSOCIATIONREQUEST</name>
      <anchor>a35a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_ASSOCIATIONRESPONSE</name>
      <anchor>a35a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_REASSOCIATIONREQUEST</name>
      <anchor>a35a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_REASSOCIATIONRESPONSE</name>
      <anchor>a35a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_PROBEREQUEST</name>
      <anchor>a35a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_PROBERESPONSE</name>
      <anchor>a35a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_BEACON</name>
      <anchor>a35a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_ATIM</name>
      <anchor>a35a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_DISASSOCIATION</name>
      <anchor>a35a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_AUTHENTICATION</name>
      <anchor>a35a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_DEAUTHENTICATION</name>
      <anchor>a35a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_PSPOLL</name>
      <anchor>a35a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_RTS</name>
      <anchor>a35a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_CTS</name>
      <anchor>a35a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_ACK</name>
      <anchor>a35a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_DATA</name>
      <anchor>a35a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a17</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Frame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a18</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Frame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a19</anchor>
      <arglist>(cCommBuffer *b, Ieee80211OneAddressFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a20</anchor>
      <arglist>(cCommBuffer *b, Ieee80211OneAddressFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a21</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ACKFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a22</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ACKFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a23</anchor>
      <arglist>(cCommBuffer *b, Ieee80211TwoAddressFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a24</anchor>
      <arglist>(cCommBuffer *b, Ieee80211TwoAddressFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a25</anchor>
      <arglist>(cCommBuffer *b, Ieee80211RTSFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a26</anchor>
      <arglist>(cCommBuffer *b, Ieee80211RTSFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a27</anchor>
      <arglist>(cCommBuffer *b, Ieee80211CTSFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a28</anchor>
      <arglist>(cCommBuffer *b, Ieee80211CTSFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a29</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DataOrMgmtFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a30</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DataOrMgmtFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a31</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DataFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a32</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DataFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a33</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ManagementFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a34</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ManagementFrame &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211Mac.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mac/</path>
    <filename>_ieee80211_mac_8cc</filename>
    <includes id="_ieee80211_mac_8h" name="Ieee80211Mac.h" local="yes" imported="no">Ieee80211Mac.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_phy_control_info__m_8h" name="PhyControlInfo_m.h" local="yes" imported="no">PhyControlInfo_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(Ieee80211Mac)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211Mac.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mac/</path>
    <filename>_ieee80211_mac_8h</filename>
    <includes id="_wireless_mac_base_8h" name="WirelessMacBase.h" local="yes" imported="no">WirelessMacBase.h</includes>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
    <includes id="_ieee80211_frame__m_8h" name="Ieee80211Frame_m.h" local="yes" imported="no">Ieee80211Frame_m.h</includes>
    <includes id="_ieee80211_consts_8h" name="Ieee80211Consts.h" local="yes" imported="no">Ieee80211Consts.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_f_s_m_a_8h" name="FSMA.h" local="yes" imported="no">FSMA.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>FSM_DEBUG</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAdhoc.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_adhoc_8cc</filename>
    <includes id="_ieee80211_mgmt_adhoc_8h" name="Ieee80211MgmtAdhoc.h" local="yes" imported="no">Ieee80211MgmtAdhoc.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(Ieee80211MgmtAdhoc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAdhoc.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_adhoc_8h</filename>
    <includes id="_ieee80211_mgmt_base_8h" name="Ieee80211MgmtBase.h" local="yes" imported="no">Ieee80211MgmtBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAP.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_8cc</filename>
    <includes id="_ieee80211_mgmt_a_p_8h" name="Ieee80211MgmtAP.h" local="yes" imported="no">Ieee80211MgmtAP.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(Ieee80211MgmtAP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAP.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_8h</filename>
    <includes id="_ieee80211_mgmt_a_p_base_8h" name="Ieee80211MgmtAPBase.h" local="yes" imported="no">Ieee80211MgmtAPBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAPBase.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_base_8cc</filename>
    <includes id="_ieee80211_mgmt_a_p_base_8h" name="Ieee80211MgmtAPBase.h" local="yes" imported="no">Ieee80211MgmtAPBase.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAPBase.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_base_8h</filename>
    <includes id="_ieee80211_mgmt_base_8h" name="Ieee80211MgmtBase.h" local="yes" imported="no">Ieee80211MgmtBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAPSimplified.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_simplified_8cc</filename>
    <includes id="_ieee80211_mgmt_a_p_simplified_8h" name="Ieee80211MgmtAPSimplified.h" local="yes" imported="no">Ieee80211MgmtAPSimplified.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(Ieee80211MgmtAPSimplified)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtAPSimplified.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_a_p_simplified_8h</filename>
    <includes id="_ieee80211_mgmt_a_p_base_8h" name="Ieee80211MgmtAPBase.h" local="yes" imported="no">Ieee80211MgmtAPBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtBase.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_base_8cc</filename>
    <includes id="_ieee80211_mgmt_base_8h" name="Ieee80211MgmtBase.h" local="yes" imported="no">Ieee80211MgmtBase.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtBase.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_base_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_passive_queue_base_8h" name="PassiveQueueBase.h" local="yes" imported="no">PassiveQueueBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_ieee80211_frame__m_8h" name="Ieee80211Frame_m.h" local="yes" imported="no">Ieee80211Frame_m.h</includes>
    <includes id="_ieee80211_mgmt_frames__m_8h" name="Ieee80211MgmtFrames_m.h" local="yes" imported="no">Ieee80211MgmtFrames_m.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtFrames_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_frames__m_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_ieee80211_frame__m_8h" name="Ieee80211Frame_m.h" local="yes" imported="no">Ieee80211Frame_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211ReasonCode</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_UNSPECIFIED</name>
      <anchor>a69a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_PREV_AUTH_EXPIRED</name>
      <anchor>a69a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_DEAUTH_MS_LEAVING</name>
      <anchor>a69a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_DISASS_INACTIVITY</name>
      <anchor>a69a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_DISASS_TOO_MANY_MS</name>
      <anchor>a69a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_NONAUTH_CLASS2</name>
      <anchor>a69a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_NONASS_CLASS3</name>
      <anchor>a69a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_DIASS_MS_LEAVING</name>
      <anchor>a69a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RC_NONAUTH_ASS_REQUEST</name>
      <anchor>a69a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211StatusCode</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SUCCESSFUL</name>
      <anchor>a70a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNSPECIFIED</name>
      <anchor>a70a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNSUP_CAP</name>
      <anchor>a70a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_REASS_DENIED</name>
      <anchor>a70a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ASS_DENIED_UNKNOWN</name>
      <anchor>a70a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_AUTH_ALG0_UNSUP</name>
      <anchor>a70a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_AUTH_OUT_OF_SEQ</name>
      <anchor>a70a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_AUTH_CHALLENGE_FAIL</name>
      <anchor>a70a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_AUTH_TIMEOUT</name>
      <anchor>a70a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ASS_TOO_MANY_MS</name>
      <anchor>a70a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DATARATE_UNSUP</name>
      <anchor>a70a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a21</anchor>
      <arglist>(cCommBuffer *b, Ieee80211CapabilityInformation &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a22</anchor>
      <arglist>(cCommBuffer *b, Ieee80211CapabilityInformation &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a23</anchor>
      <arglist>(cCommBuffer *b, Ieee80211HandoverParameters &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a24</anchor>
      <arglist>(cCommBuffer *b, Ieee80211HandoverParameters &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a25</anchor>
      <arglist>(cCommBuffer *b, Ieee80211SupportedRatesElement &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a26</anchor>
      <arglist>(cCommBuffer *b, Ieee80211SupportedRatesElement &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a27</anchor>
      <arglist>(cCommBuffer *b, Ieee80211FrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a28</anchor>
      <arglist>(cCommBuffer *b, Ieee80211FrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a29</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AuthenticationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a30</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AuthenticationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a31</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DeauthenticationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a32</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DeauthenticationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a33</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DisassociationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a34</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DisassociationFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a35</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a36</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a37</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a38</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a39</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a40</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationRequestFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a41</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a42</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a43</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a44</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a45</anchor>
      <arglist>(cCommBuffer *b, Ieee80211BeaconFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a46</anchor>
      <arglist>(cCommBuffer *b, Ieee80211BeaconFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a47</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a48</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeResponseFrameBody &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a49</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AuthenticationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a50</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AuthenticationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a51</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DeauthenticationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a52</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DeauthenticationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a53</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DisassociationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a54</anchor>
      <arglist>(cCommBuffer *b, Ieee80211DisassociationFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a55</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a56</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a57</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a58</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a59</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a60</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationRequestFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a61</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationResponseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a62</anchor>
      <arglist>(cCommBuffer *b, Ieee80211AssociationResponseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a63</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationResponseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a64</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ReassociationResponseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a65</anchor>
      <arglist>(cCommBuffer *b, Ieee80211BeaconFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a66</anchor>
      <arglist>(cCommBuffer *b, Ieee80211BeaconFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a67</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeResponseFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a68</anchor>
      <arglist>(cCommBuffer *b, Ieee80211ProbeResponseFrame &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtSTA.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_s_t_a_8cc</filename>
    <includes id="_ieee80211_mgmt_s_t_a_8h" name="Ieee80211MgmtSTA.h" local="yes" imported="no">Ieee80211MgmtSTA.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <includes id="_phy_control_info__m_8h" name="PhyControlInfo_m.h" local="yes" imported="no">PhyControlInfo_m.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MK_AUTH_TIMEOUT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_ASSOC_TIMEOUT</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_SCAN_SENDPROBE</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_SCAN_MINCHANNELTIME</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_SCAN_MAXCHANNELTIME</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_BEACON_TIMEOUT</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_BEACONS_MISSED</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a7</anchor>
      <arglist>(Ieee80211MgmtSTA)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(std::ostream &amp;os, const Ieee80211MgmtSTA::ScanningInfo &amp;scanning)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(std::ostream &amp;os, const Ieee80211MgmtSTA::APInfo &amp;ap)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(std::ostream &amp;os, const Ieee80211MgmtSTA::AssociatedAPInfo &amp;assocAP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtSTA.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_s_t_a_8h</filename>
    <includes id="_ieee80211_mgmt_base_8h" name="Ieee80211MgmtBase.h" local="yes" imported="no">Ieee80211MgmtBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_ieee80211_primitives__m_8h" name="Ieee80211Primitives_m.h" local="yes" imported="no">Ieee80211Primitives_m.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtSTASimplified.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_s_t_a_simplified_8cc</filename>
    <includes id="_ieee80211_mgmt_s_t_a_simplified_8h" name="Ieee80211MgmtSTASimplified.h" local="yes" imported="no">Ieee80211MgmtSTASimplified.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(Ieee80211MgmtSTASimplified)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211MgmtSTASimplified.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_mgmt_s_t_a_simplified_8h</filename>
    <includes id="_ieee80211_mgmt_base_8h" name="Ieee80211MgmtBase.h" local="yes" imported="no">Ieee80211MgmtBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211Primitives_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>_ieee80211_primitives__m_8h</filename>
    <includes id="_ieee80211_mgmt_frames__m_8h" name="Ieee80211MgmtFrames_m.h" local="yes" imported="no">Ieee80211MgmtFrames_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211PrimRequestCode</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_SCAN_REQUEST</name>
      <anchor>a47a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_AUTHENTICATE_REQUEST</name>
      <anchor>a47a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_DEAUTHENTICATE_REQUEST</name>
      <anchor>a47a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_ASSOCIATE_REQUEST</name>
      <anchor>a47a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_REASSOCIATE_REQUEST</name>
      <anchor>a47a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_DISASSOCIATE_REQUEST</name>
      <anchor>a47a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211PrimConfirmCode</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_SCAN_CONFIRM</name>
      <anchor>a48a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_AUTHENTICATE_CONFIRM</name>
      <anchor>a48a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_DEAUTHENTICATE_CONFIRM</name>
      <anchor>a48a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_ASSOCIATE_CONFIRM</name>
      <anchor>a48a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_REASSOCIATE_CONFIRM</name>
      <anchor>a48a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PR_DISASSOCIATE_CONFIRM</name>
      <anchor>a48a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211BSSType</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BSSTYPE_ANY</name>
      <anchor>a49a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BSSTYPE_INFRASTRUCTURE</name>
      <anchor>a49a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BSSTYPE_INDEPENDENT</name>
      <anchor>a49a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee80211PrimResultCode</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRC_SUCCESS</name>
      <anchor>a50a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRC_INVALID_PARAMETERS</name>
      <anchor>a50a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRC_TIMEOUT</name>
      <anchor>a50a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRC_TOO_MANY_SIMULTANEOUS_REQUESTS</name>
      <anchor>a50a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRC_REFUSED</name>
      <anchor>a50a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a21</anchor>
      <arglist>(cCommBuffer *b, Ieee80211PrimRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a22</anchor>
      <arglist>(cCommBuffer *b, Ieee80211PrimRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a23</anchor>
      <arglist>(cCommBuffer *b, Ieee80211PrimConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a24</anchor>
      <arglist>(cCommBuffer *b, Ieee80211PrimConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a25</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ScanRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a26</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ScanRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a27</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_BSSDescription &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a28</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_BSSDescription &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a29</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ScanConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a30</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ScanConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a31</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AuthenticateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a32</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AuthenticateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a33</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AuthenticateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a34</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AuthenticateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a35</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_DeauthenticateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a36</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_DeauthenticateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a37</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AssociateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a38</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AssociateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a39</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AssociateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a40</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_AssociateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a41</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ReassociateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a42</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ReassociateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a43</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ReassociateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a44</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_ReassociateConfirm &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a45</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_DisassociateRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a46</anchor>
      <arglist>(cCommBuffer *b, Ieee80211Prim_DisassociateRequest &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211Radio.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_ieee80211_radio_8cc</filename>
    <includes id="_ieee80211_radio_8h" name="Ieee80211Radio.h" local="yes" imported="no">Ieee80211Radio.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(Ieee80211Radio)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211Radio.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_ieee80211_radio_8h</filename>
    <includes id="_abstract_radio_8h" name="AbstractRadio.h" local="yes" imported="no">AbstractRadio.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee80211RadioModel.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_ieee80211_radio_model_8cc</filename>
    <includes id="_ieee80211_radio_model_8h" name="Ieee80211RadioModel.h" local="yes" imported="no">Ieee80211RadioModel.h</includes>
    <includes id="_ieee80211_consts_8h" name="Ieee80211Consts.h" local="yes" imported="no">Ieee80211Consts.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(Ieee80211RadioModel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ieee80211RadioModel.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_ieee80211_radio_model_8h</filename>
    <includes id="_i_radio_model_8h" name="IRadioModel.h" local="yes" imported="no">IRadioModel.h</includes>
  </compound>
  <compound kind="file">
    <name>Ieee802Ctrl_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Contract/</path>
    <filename>_ieee802_ctrl__m_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Ieee802MessageKind</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IEEE802CTRL_DATA</name>
      <anchor>a18a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IEEE802CTRL_REGISTER_DSAP</name>
      <anchor>a18a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IEEE802CTRL_DEREGISTER_DSAP</name>
      <anchor>a18a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IEEE802CTRL_SENDPAUSE</name>
      <anchor>a18a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SAPCode</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_IBM_SNA</name>
      <anchor>a19a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_IP</name>
      <anchor>a19a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_3COM</name>
      <anchor>a19a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_SNAP</name>
      <anchor>a19a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_BANYAN</name>
      <anchor>a19a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_NOVELL_IPX</name>
      <anchor>a19a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_LAN_MANAGER</name>
      <anchor>a19a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAP_CLNS</name>
      <anchor>a19a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EtherType</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ETHERTYPE_IP</name>
      <anchor>a20a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ETHERTYPE_ARP</name>
      <anchor>a20a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ETHERTYPE_RARP</name>
      <anchor>a20a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a16</anchor>
      <arglist>(cCommBuffer *b, Ieee802Ctrl &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a17</anchor>
      <arglist>(cCommBuffer *b, Ieee802Ctrl &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IMessageHandler.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_i_message_handler_8h</filename>
    <includes id="_o_s_p_f_packet__m_8h" name="OSPFPacket_m.h" local="yes" imported="no">OSPFPacket_m.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>IModulation.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_i_modulation_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>in.h</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/headers/</path>
    <filename>in_8h</filename>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>in_addr_t</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>in_systm.h</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/headers/</path>
    <filename>in__systm_8h</filename>
    <member kind="typedef">
      <type>u_int16_t</type>
      <name>n_short</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_long</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_time</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>INETDefs.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_i_n_e_t_defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>INET_API</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHK</name>
      <anchor>a2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ushort</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ulong</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint32</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>__checknull</name>
      <anchor>a7</anchor>
      <arglist>(T *p, const char *expr, const char *file, int line)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>INotifiable.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_i_notifiable_8h</filename>
  </compound>
  <compound kind="file">
    <name>InterfaceEntry.cc</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_interface_entry_8cc</filename>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
  </compound>
  <compound kind="file">
    <name>InterfaceEntry.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_interface_entry_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_interface_identifier_8h" name="InterfaceIdentifier.h" local="yes" imported="no">InterfaceIdentifier.h</includes>
  </compound>
  <compound kind="file">
    <name>InterfaceIdentifier.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_interface_identifier_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>InterfaceTable.cc</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_interface_table_8cc</filename>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(InterfaceTable)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os, const InterfaceEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InterfaceTable.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_interface_table_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
  </compound>
  <compound kind="file">
    <name>InterfaceTableAccess.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_interface_table_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
  </compound>
  <compound kind="file">
    <name>IntServ.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_int_serv_8h</filename>
    <includes id="_int_serv__m_8h" name="IntServ_m.h" local="yes" imported="no">IntServ_m.h</includes>
  </compound>
  <compound kind="file">
    <name>IntServ_m.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_int_serv__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; IPAddress &gt;</type>
      <name>IPAddressVector</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; struct EroObj_t &gt;</type>
      <name>EroVector</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; struct FlowDescriptor_t &gt;</type>
      <name>FlowDescriptorVector</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b, SessionObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b, SessionObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b, RsvpHopObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a7</anchor>
      <arglist>(cCommBuffer *b, RsvpHopObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a8</anchor>
      <arglist>(cCommBuffer *b, SenderTemplateObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a9</anchor>
      <arglist>(cCommBuffer *b, SenderTemplateObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a10</anchor>
      <arglist>(cCommBuffer *b, SenderTspecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a11</anchor>
      <arglist>(cCommBuffer *b, SenderTspecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a12</anchor>
      <arglist>(cCommBuffer *b, FlowSpecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a13</anchor>
      <arglist>(cCommBuffer *b, FlowSpecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a14</anchor>
      <arglist>(cCommBuffer *b, FilterSpecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a15</anchor>
      <arglist>(cCommBuffer *b, FilterSpecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a16</anchor>
      <arglist>(cCommBuffer *b, LabelRequestObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a17</anchor>
      <arglist>(cCommBuffer *b, LabelRequestObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a18</anchor>
      <arglist>(cCommBuffer *b, SenderDescriptor_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a19</anchor>
      <arglist>(cCommBuffer *b, SenderDescriptor_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a20</anchor>
      <arglist>(cCommBuffer *b, EroObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a21</anchor>
      <arglist>(cCommBuffer *b, EroObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a22</anchor>
      <arglist>(cCommBuffer *b, FlowDescriptor_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a23</anchor>
      <arglist>(cCommBuffer *b, FlowDescriptor_t &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IP.cc</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_p_8cc</filename>
    <includes id="_network_2_i_pv4_2_i_p_8h" name="Network/IPv4/IP.h" local="yes" imported="no">IP.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_c_m_p_message__m_8h" name="ICMPMessage_m.h" local="yes" imported="no">ICMPMessage_m.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_a_r_p_packet__m_8h" name="ARPPacket_m.h" local="yes" imported="no">ARPPacket_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(IP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Network/IPv4/IP.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_network_2_i_pv4_2_i_p_8h</filename>
    <includes id="_queue_base_8h" name="QueueBase.h" local="yes" imported="no">QueueBase.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <includes id="_i_c_m_p_access_8h" name="ICMPAccess.h" local="yes" imported="no">ICMPAccess.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_p_frag_buf_8h" name="IPFragBuf.h" local="yes" imported="no">IPFragBuf.h</includes>
    <includes id="_protocol_map_8h" name="ProtocolMap.h" local="yes" imported="no">ProtocolMap.h</includes>
    <member kind="variable">
      <type>const int</type>
      <name>ICMP_FRAGMENTATION_ERROR_CODE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Util/HeaderSerializers/headers/IP.h</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/headers/</path>
    <filename>_util_2_header_serializers_2headers_2_i_p_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IPVERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_RF</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_DF</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MF</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_OFFMASK</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MAXPACKET</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_LOWDELAY</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_THROUGHPUT</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_RELIABILITY</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_MINCOST</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_CE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_ECT</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_NETCONTROL</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_INTERNETCONTROL</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_CRITIC_ECP</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASHOVERRIDE</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASH</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_IMMEDIATE</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_PRIORITY</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_ROUTINE</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_COPIED</name>
      <anchor>a20</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CLASS</name>
      <anchor>a21</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NUMBER</name>
      <anchor>a22</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CONTROL</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED1</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_DEBMEAS</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED2</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_EOL</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NOP</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RR</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECURITY</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_LSRR</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SATID</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SSRR</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RA</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OPTVAL</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OLEN</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OFFSET</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_MINOFF</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSONLY</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSANDADDR</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_PRESPEC</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_UNCLASS</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_CONFID</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_EFTO</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_MMMM</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_RESTR</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_SECRET</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_TOPSECRET</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXTTL</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPDEFTTL</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPFRAGTTL</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTTLDEC</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MSS</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPVERSION</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_RF</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_DF</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MF</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_OFFMASK</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MAXPACKET</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_LOWDELAY</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_THROUGHPUT</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_RELIABILITY</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_MINCOST</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_CE</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_ECT</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_NETCONTROL</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_INTERNETCONTROL</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_CRITIC_ECP</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASHOVERRIDE</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASH</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_IMMEDIATE</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_PRIORITY</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_ROUTINE</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_COPIED</name>
      <anchor>a75</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CLASS</name>
      <anchor>a76</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NUMBER</name>
      <anchor>a77</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CONTROL</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED1</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_DEBMEAS</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED2</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_EOL</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NOP</name>
      <anchor>a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RR</name>
      <anchor>a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS</name>
      <anchor>a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECURITY</name>
      <anchor>a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_LSRR</name>
      <anchor>a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SATID</name>
      <anchor>a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SSRR</name>
      <anchor>a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RA</name>
      <anchor>a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OPTVAL</name>
      <anchor>a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OLEN</name>
      <anchor>a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OFFSET</name>
      <anchor>a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_MINOFF</name>
      <anchor>a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSONLY</name>
      <anchor>a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSANDADDR</name>
      <anchor>a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_PRESPEC</name>
      <anchor>a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_UNCLASS</name>
      <anchor>a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_CONFID</name>
      <anchor>a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_EFTO</name>
      <anchor>a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_MMMM</name>
      <anchor>a101</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_RESTR</name>
      <anchor>a102</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_SECRET</name>
      <anchor>a103</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_TOPSECRET</name>
      <anchor>a104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXTTL</name>
      <anchor>a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPDEFTTL</name>
      <anchor>a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPFRAGTTL</name>
      <anchor>a107</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTTLDEC</name>
      <anchor>a108</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MSS</name>
      <anchor>a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPVERSION</name>
      <anchor>a110</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_RF</name>
      <anchor>a111</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_DF</name>
      <anchor>a112</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MF</name>
      <anchor>a113</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_OFFMASK</name>
      <anchor>a114</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MAXPACKET</name>
      <anchor>a115</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_LOWDELAY</name>
      <anchor>a116</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_THROUGHPUT</name>
      <anchor>a117</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_RELIABILITY</name>
      <anchor>a118</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_MINCOST</name>
      <anchor>a119</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_CE</name>
      <anchor>a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_ECT</name>
      <anchor>a121</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_NETCONTROL</name>
      <anchor>a122</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_INTERNETCONTROL</name>
      <anchor>a123</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_CRITIC_ECP</name>
      <anchor>a124</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASHOVERRIDE</name>
      <anchor>a125</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_FLASH</name>
      <anchor>a126</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_IMMEDIATE</name>
      <anchor>a127</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_PRIORITY</name>
      <anchor>a128</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTOS_PREC_ROUTINE</name>
      <anchor>a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_COPIED</name>
      <anchor>a130</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CLASS</name>
      <anchor>a131</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NUMBER</name>
      <anchor>a132</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_CONTROL</name>
      <anchor>a133</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED1</name>
      <anchor>a134</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_DEBMEAS</name>
      <anchor>a135</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RESERVED2</name>
      <anchor>a136</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_EOL</name>
      <anchor>a137</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_NOP</name>
      <anchor>a138</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RR</name>
      <anchor>a139</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS</name>
      <anchor>a140</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECURITY</name>
      <anchor>a141</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_LSRR</name>
      <anchor>a142</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SATID</name>
      <anchor>a143</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SSRR</name>
      <anchor>a144</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_RA</name>
      <anchor>a145</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OPTVAL</name>
      <anchor>a146</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OLEN</name>
      <anchor>a147</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_OFFSET</name>
      <anchor>a148</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_MINOFF</name>
      <anchor>a149</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSONLY</name>
      <anchor>a150</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_TSANDADDR</name>
      <anchor>a151</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_TS_PRESPEC</name>
      <anchor>a152</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_UNCLASS</name>
      <anchor>a153</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_CONFID</name>
      <anchor>a154</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_EFTO</name>
      <anchor>a155</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_MMMM</name>
      <anchor>a156</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_RESTR</name>
      <anchor>a157</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_SECRET</name>
      <anchor>a158</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPOPT_SECUR_TOPSECRET</name>
      <anchor>a159</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXTTL</name>
      <anchor>a160</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPDEFTTL</name>
      <anchor>a161</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPFRAGTTL</name>
      <anchor>a162</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPTTLDEC</name>
      <anchor>a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IP_MSS</name>
      <anchor>a164</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ip_icmp.h</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/headers/</path>
    <filename>ip__icmp_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>icmp_pptr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_gwaddr</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_id</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_seq</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_void</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_pmvoid</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_nextmtu</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_num_addrs</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_wpa</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_lifetime</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_otime</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_rtime</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_ttime</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_ip</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_radv</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_mask</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_data</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MINLEN</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSLEN</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKLEN</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ADVLENMIN</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ADVLEN</name>
      <anchor>a21</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ECHOREPLY</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PROTOCOL</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PORT</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NEEDFRAG</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_SRCFAIL</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET_UNKNOWN</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_UNKNOWN</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_ISOLATED</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET_PROHIB</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_PROHIB</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_TOSNET</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_TOSHOST</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_FILTER_PROHIB</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_PRECEDENCE</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PRECEDENCE_CUTOFF</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_SOURCEQUENCH</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_NET</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_HOST</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_TOSNET</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_TOSHOST</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ECHO</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ROUTERADVERT</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ROUTERSOLICIT</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED_INTRANS</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED_REASS</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_ERRATPTR</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_OPTABSENT</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_LENGTH</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSTAMP</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSTAMPREPLY</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_IREQ</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_IREQREPLY</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKREQ</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKREPLY</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MAXTYPE</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_INFOTYPE</name>
      <anchor>a62</anchor>
      <arglist>(type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_pptr</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_gwaddr</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_id</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_seq</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_void</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_pmvoid</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_nextmtu</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_num_addrs</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_wpa</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_lifetime</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_otime</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_rtime</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_ttime</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_ip</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_radv</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_mask</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>icmp_data</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MINLEN</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSLEN</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKLEN</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ADVLENMIN</name>
      <anchor>a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ADVLEN</name>
      <anchor>a84</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ECHOREPLY</name>
      <anchor>a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH</name>
      <anchor>a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET</name>
      <anchor>a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST</name>
      <anchor>a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PROTOCOL</name>
      <anchor>a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PORT</name>
      <anchor>a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NEEDFRAG</name>
      <anchor>a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_SRCFAIL</name>
      <anchor>a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET_UNKNOWN</name>
      <anchor>a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_UNKNOWN</name>
      <anchor>a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_ISOLATED</name>
      <anchor>a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_NET_PROHIB</name>
      <anchor>a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_PROHIB</name>
      <anchor>a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_TOSNET</name>
      <anchor>a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_TOSHOST</name>
      <anchor>a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_FILTER_PROHIB</name>
      <anchor>a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_HOST_PRECEDENCE</name>
      <anchor>a101</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_UNREACH_PRECEDENCE_CUTOFF</name>
      <anchor>a102</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_SOURCEQUENCH</name>
      <anchor>a103</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_NET</name>
      <anchor>a104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_HOST</name>
      <anchor>a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_TOSNET</name>
      <anchor>a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_REDIRECT_TOSHOST</name>
      <anchor>a107</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ECHO</name>
      <anchor>a108</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ROUTERADVERT</name>
      <anchor>a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_ROUTERSOLICIT</name>
      <anchor>a110</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED</name>
      <anchor>a111</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED_INTRANS</name>
      <anchor>a112</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TIMXCEED_REASS</name>
      <anchor>a113</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB</name>
      <anchor>a114</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_ERRATPTR</name>
      <anchor>a115</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_OPTABSENT</name>
      <anchor>a116</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_PARAMPROB_LENGTH</name>
      <anchor>a117</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSTAMP</name>
      <anchor>a118</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TSTAMPREPLY</name>
      <anchor>a119</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_IREQ</name>
      <anchor>a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_IREQREPLY</name>
      <anchor>a121</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKREQ</name>
      <anchor>a122</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MASKREPLY</name>
      <anchor>a123</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_MAXTYPE</name>
      <anchor>a124</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_INFOTYPE</name>
      <anchor>a125</anchor>
      <arglist>(type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPAddress.cc</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_p_address_8cc</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>IPAddress.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_p_address_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IPADDRESS_UNDEF</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>PortNumber</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;os, const IPAddress &amp;ip)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ADDRESS_STRING_SIZE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>PORT_UNDEF</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>PORT_MAX</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPAddressResolver.cc</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_p_address_resolver_8cc</filename>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
  </compound>
  <compound kind="file">
    <name>IPAddressResolver.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_p_address_resolver_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>IPassiveQueue.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_i_passive_queue_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>IPControlInfo.cc</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_p_control_info_8cc</filename>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
  </compound>
  <compound kind="file">
    <name>IPControlInfo.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_p_control_info_8h</filename>
    <includes id="_i_p_control_info__m_8h" name="IPControlInfo_m.h" local="yes" imported="no">IPControlInfo_m.h</includes>
  </compound>
  <compound kind="file">
    <name>IPControlInfo_m.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_p_control_info__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_protocol_id__m_8h" name="IPProtocolId_m.h" local="yes" imported="no">IPProtocolId_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, IPRoutingDecision &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, IPRoutingDecision &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPDatagram.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_p_datagram_8h</filename>
    <includes id="_i_p_datagram__m_8h" name="IPDatagram_m.h" local="yes" imported="no">IPDatagram_m.h</includes>
  </compound>
  <compound kind="file">
    <name>IPDatagram_m.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_p_datagram__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_protocol_id__m_8h" name="IPProtocolId_m.h" local="yes" imported="no">IPProtocolId_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IPOption</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_NO_OPTION</name>
      <anchor>a21a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_RECORD_ROUTE</name>
      <anchor>a21a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_TIMESTAMP</name>
      <anchor>a21a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_LOOSE_SOURCE_ROUTING</name>
      <anchor>a21a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOPTION_STRICT_SOURCE_ROUTING</name>
      <anchor>a21a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TimestampFlag</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_TIMESTAMP_TIMESTAMP_ONLY</name>
      <anchor>a22a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_TIMESTAMP_WITH_ADDRESS</name>
      <anchor>a22a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_TIMESTAMP_SENDER_INIT_ADDRESS</name>
      <anchor>a22a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a13</anchor>
      <arglist>(cCommBuffer *b, IPRecordRouteOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a14</anchor>
      <arglist>(cCommBuffer *b, IPRecordRouteOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a15</anchor>
      <arglist>(cCommBuffer *b, IPTimestampOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a16</anchor>
      <arglist>(cCommBuffer *b, IPTimestampOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a17</anchor>
      <arglist>(cCommBuffer *b, IPSourceRoutingOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a18</anchor>
      <arglist>(cCommBuffer *b, IPSourceRoutingOption &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a19</anchor>
      <arglist>(cCommBuffer *b, IPDatagram &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a20</anchor>
      <arglist>(cCommBuffer *b, IPDatagram &amp;obj)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>IP_HEADER_BYTES</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>IP_MAX_HEADER_BYTES</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>MAX_IPADDR_OPTION_ENTRIES</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>MAX_TIMESTAMP_OPTION_ENTRIES</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPFragBuf.cc</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_p_frag_buf_8cc</filename>
    <includes id="_i_p_frag_buf_8h" name="IPFragBuf.h" local="yes" imported="no">IPFragBuf.h</includes>
    <includes id="_i_c_m_p_8h" name="ICMP.h" local="yes" imported="no">ICMP.h</includes>
  </compound>
  <compound kind="file">
    <name>IPFragBuf.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_p_frag_buf_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_reassembly_buffer_8h" name="ReassemblyBuffer.h" local="yes" imported="no">ReassemblyBuffer.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
  </compound>
  <compound kind="file">
    <name>IPProtocolId_m.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_p_protocol_id__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IPProtocolId</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_ICMP</name>
      <anchor>a23a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IGMP</name>
      <anchor>a23a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IP</name>
      <anchor>a23a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_TCP</name>
      <anchor>a23a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_EGP</name>
      <anchor>a23a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IGP</name>
      <anchor>a23a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_UDP</name>
      <anchor>a23a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_XTP</name>
      <anchor>a23a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6</name>
      <anchor>a23a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_RSVP</name>
      <anchor>a23a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6_ICMP</name>
      <anchor>a23a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_NONE</name>
      <anchor>a23a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6_MOBILITY</name>
      <anchor>a23a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_OSPF</name>
      <anchor>a23a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_SCTP</name>
      <anchor>a23a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_MANET</name>
      <anchor>a23a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_HOP</name>
      <anchor>a23a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_DEST</name>
      <anchor>a23a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_ROUTING</name>
      <anchor>a23a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_FRAGMENT</name>
      <anchor>a23a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_AUTH</name>
      <anchor>a23a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IP_PROT_IPv6EXT_ESP</name>
      <anchor>a23a22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPSerializer.cc</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/</path>
    <filename>_i_p_serializer_8cc</filename>
    <includes id="_util_2_header_serializers_2headers_2defs_8h" name="Util/HeaderSerializers/headers/defs.h" local="yes" imported="no">headers/defs.h</includes>
    <includes id="bsdint_8h" name="bsdint.h" local="yes" imported="no">headers/bsdint.h</includes>
    <includes id="in_8h" name="in.h" local="yes" imported="no">headers/in.h</includes>
    <includes id="in__systm_8h" name="in_systm.h" local="yes" imported="no">headers/in_systm.h</includes>
    <includes id="_util_2_header_serializers_2headers_2_i_p_8h" name="Util/HeaderSerializers/headers/IP.h" local="yes" imported="no">headers/ip.h</includes>
    <includes id="_i_p_serializer_8h" name="IPSerializer.h" local="yes" imported="no">IPSerializer.h</includes>
    <includes id="_i_c_m_p_serializer_8h" name="ICMPSerializer.h" local="yes" imported="no">ICMPSerializer.h</includes>
    <includes id="_u_d_p_serializer_8h" name="UDPSerializer.h" local="yes" imported="no">UDPSerializer.h</includes>
    <namespace>INETFw</namespace>
    <class kind="struct">INETFw::in_addr</class>
    <class kind="struct">INETFw::ip</class>
    <class kind="struct">INETFw::ip_timestamp</class>
    <class kind="union">INETFw::ip_timestamp::ipt_timestamp</class>
    <class kind="struct">INETFw::ip_timestamp::ipt_timestamp::ipt_ta</class>
  </compound>
  <compound kind="file">
    <name>IPSerializer.h</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/</path>
    <filename>_i_p_serializer_8h</filename>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
  </compound>
  <compound kind="file">
    <name>IPTrafGen.cc</name>
    <path>D:/home/INET-svn/Applications/Generic/</path>
    <filename>_i_p_traf_gen_8cc</filename>
    <includes id="_i_p_traf_gen_8h" name="IPTrafGen.h" local="yes" imported="no">IPTrafGen.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(IPTrafSink)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(IPTrafGen)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPTrafGen.h</name>
    <path>D:/home/INET-svn/Applications/Generic/</path>
    <filename>_i_p_traf_gen_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv4InterfaceData.cc</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_pv4_interface_data_8cc</filename>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv4InterfaceData.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_i_pv4_interface_data_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6.cc</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_8cc</filename>
    <includes id="_i_pv6_8h" name="IPv6.h" local="yes" imported="no">IPv6.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_routing_table6_access_8h" name="RoutingTable6Access.h" local="yes" imported="no">RoutingTable6Access.h</includes>
    <includes id="_i_c_m_pv6_access_8h" name="ICMPv6Access.h" local="yes" imported="no">ICMPv6Access.h</includes>
    <includes id="_i_pv6_neighbour_discovery_access_8h" name="IPv6NeighbourDiscoveryAccess.h" local="yes" imported="no">IPv6NeighbourDiscoveryAccess.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_pv6_n_d_message__m_8h" name="IPv6NDMessage_m.h" local="yes" imported="no">IPv6NDMessage_m.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>FRAGMENT_TIMEOUT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(IPv6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6.h</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_8h</filename>
    <includes id="_queue_base_8h" name="QueueBase.h" local="yes" imported="no">QueueBase.h</includes>
    <includes id="_routing_table6_8h" name="RoutingTable6.h" local="yes" imported="no">RoutingTable6.h</includes>
    <includes id="_i_c_m_pv6_8h" name="ICMPv6.h" local="yes" imported="no">ICMPv6.h</includes>
    <includes id="_i_pv6_neighbour_discovery_8h" name="IPv6NeighbourDiscovery.h" local="yes" imported="no">IPv6NeighbourDiscovery.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <includes id="_i_pv6_frag_buf_8h" name="IPv6FragBuf.h" local="yes" imported="no">IPv6FragBuf.h</includes>
    <includes id="_protocol_map_8h" name="ProtocolMap.h" local="yes" imported="no">ProtocolMap.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6Address.cc</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_pv6_address_8cc</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_interface_identifier_8h" name="InterfaceIdentifier.h" local="yes" imported="no">InterfaceIdentifier.h</includes>
    <member kind="variable">
      <type>const uint32</type>
      <name>LINK_LOCAL_PREFIX</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>SITE_LOCAL_PREFIX</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>MULTICAST_PREFIX</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>LINK_LOCAL_MASK</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>SITE_LOCAL_MASK</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32</type>
      <name>MULTICAST_MASK</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6Address.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_pv6_address_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(std::ostream &amp;os, const IPv6Address &amp;ip)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6ControlInfo.cc</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_pv6_control_info_8cc</filename>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6ControlInfo.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_pv6_control_info_8h</filename>
    <includes id="_i_pv6_control_info__m_8h" name="IPv6ControlInfo_m.h" local="yes" imported="no">IPv6ControlInfo_m.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6ControlInfo_m.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_pv6_control_info__m_8h</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_i_p_protocol_id__m_8h" name="IPProtocolId_m.h" local="yes" imported="no">IPProtocolId_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6Datagram.cc</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_datagram_8cc</filename>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <includes id="_i_pv6_extension_headers__m_8h" name="IPv6ExtensionHeaders_m.h" local="yes" imported="no">IPv6ExtensionHeaders_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(IPv6Datagram)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os, IPv6ExtensionHeaderPtr eh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a2</anchor>
      <arglist>(IPv6ExtensionHeader)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6Datagram.h</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_datagram_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv6_datagram__m_8h" name="IPv6Datagram_m.h" local="yes" imported="no">IPv6Datagram_m.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6Datagram_m.h</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_datagram__m_8h</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_i_p_protocol_id__m_8h" name="IPProtocolId_m.h" local="yes" imported="no">IPProtocolId_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IPv6ExtensionHeader *</type>
      <name>IPv6ExtensionHeaderPtr</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os, IPv6ExtensionHeaderPtr eh)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6ErrorHandling.cc</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_error_handling_8cc</filename>
    <includes id="_i_pv6_error_handling_8h" name="IPv6ErrorHandling.h" local="yes" imported="no">IPv6ErrorHandling.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(IPv6ErrorHandling)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6ErrorHandling.h</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_error_handling_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6ExtensionHeaders_m.h</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_extension_headers__m_8h</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, IPv6HopByHopOptionsHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, IPv6HopByHopOptionsHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b, IPv6RoutingHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b, IPv6RoutingHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b, IPv6FragmentHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b, IPv6FragmentHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a7</anchor>
      <arglist>(cCommBuffer *b, IPv6DestinationOptionsHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a8</anchor>
      <arglist>(cCommBuffer *b, IPv6DestinationOptionsHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a9</anchor>
      <arglist>(cCommBuffer *b, IPv6AuthenticationHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a10</anchor>
      <arglist>(cCommBuffer *b, IPv6AuthenticationHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a11</anchor>
      <arglist>(cCommBuffer *b, IPv6EncapsulatingSecurityPayloadHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a12</anchor>
      <arglist>(cCommBuffer *b, IPv6EncapsulatingSecurityPayloadHeader &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6FragBuf.cc</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_frag_buf_8cc</filename>
    <includes id="_i_pv6_frag_buf_8h" name="IPv6FragBuf.h" local="yes" imported="no">IPv6FragBuf.h</includes>
    <includes id="_i_c_m_pv6_8h" name="ICMPv6.h" local="yes" imported="no">ICMPv6.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <includes id="_i_pv6_extension_headers__m_8h" name="IPv6ExtensionHeaders_m.h" local="yes" imported="no">IPv6ExtensionHeaders_m.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6FragBuf.h</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_frag_buf_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_reassembly_buffer_8h" name="ReassemblyBuffer.h" local="yes" imported="no">ReassemblyBuffer.h</includes>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6InterfaceData.cc</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_interface_data_8cc</filename>
    <includes id="_i_pv6_interface_data_8h" name="IPv6InterfaceData.h" local="yes" imported="no">IPv6InterfaceData.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6InterfaceData.h</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_i_pv6_interface_data_8h</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DEFAULT_DUPADDRDETECTTRANSMITS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MIN_MTU</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DEFAULT_ADVCURHOPLIMIT</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DEFAULT_MAX_RTR_ADV_INT</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DEFAULT_ADV_REACHABLE_TIME</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DEFAULT_ADV_RETRANS_TIMER</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DEFAULT_ROUTER_HOPLIMIT</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_INITIAL_RTR_ADVERT_INTERVAL</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_INITIAL_RTR_ADVERTISEMENTS</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_FINAL_RTR_ADVERTISEMENTS</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MIN_DELAY_BETWEEN_RAS</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_RA_DELAY_TIME</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_RTR_SOLICITATION_DELAY</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_RTR_SOLICITATION_INTERVAL</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_RTR_SOLICITATIONS</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_MULTICAST_SOLICIT</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_UNICAST_SOLICIT</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_ANYCAST_DELAY_TIME</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_NEIGHBOUR_ADVERTISEMENT</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_REACHABLE_TIME</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_RETRANS_TIMER</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_DELAY_FIRST_PROBE_TIME</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MIN_RANDOM_FACTOR</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPv6_MAX_RANDOM_FACTOR</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6NDMessage_m.h</name>
    <path>D:/home/INET-svn/Network/ICMPv6/</path>
    <filename>_i_pv6_n_d_message__m_8h</filename>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, IPv6NDPrefixInformation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, IPv6NDPrefixInformation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b, IPv6NDMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b, IPv6NDMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b, IPv6RouterSolicitation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b, IPv6RouterSolicitation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a7</anchor>
      <arglist>(cCommBuffer *b, IPv6RouterAdvertisement &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a8</anchor>
      <arglist>(cCommBuffer *b, IPv6RouterAdvertisement &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a9</anchor>
      <arglist>(cCommBuffer *b, IPv6NeighbourSolicitation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a10</anchor>
      <arglist>(cCommBuffer *b, IPv6NeighbourSolicitation &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a11</anchor>
      <arglist>(cCommBuffer *b, IPv6NeighbourAdvertisement &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a12</anchor>
      <arglist>(cCommBuffer *b, IPv6NeighbourAdvertisement &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a13</anchor>
      <arglist>(cCommBuffer *b, IPv6Redirect &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a14</anchor>
      <arglist>(cCommBuffer *b, IPv6Redirect &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6NeighbourCache.cc</name>
    <path>D:/home/INET-svn/Network/ICMPv6/</path>
    <filename>_i_pv6_neighbour_cache_8cc</filename>
    <includes id="_i_pv6_neighbour_cache_8h" name="IPv6NeighbourCache.h" local="yes" imported="no">IPv6NeighbourCache.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(std::ostream &amp;os, const IPv6NeighbourCache::Key &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os, const IPv6NeighbourCache::Neighbour &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6NeighbourCache.h</name>
    <path>D:/home/INET-svn/Network/ICMPv6/</path>
    <filename>_i_pv6_neighbour_cache_8h</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6NeighbourDiscovery.cc</name>
    <path>D:/home/INET-svn/Network/ICMPv6/</path>
    <filename>_i_pv6_neighbour_discovery_8cc</filename>
    <includes id="_i_pv6_neighbour_discovery_8h" name="IPv6NeighbourDiscovery.h" local="yes" imported="no">IPv6NeighbourDiscovery.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MK_ASSIGN_LINKLOCAL_ADDRESS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_SEND_PERIODIC_RTRADV</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_SEND_SOL_RTRADV</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_INITIATE_RTRDIS</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_DAD_TIMEOUT</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_RD_TIMEOUT</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_NUD_TIMEOUT</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_AR_TIMEOUT</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a8</anchor>
      <arglist>(IPv6NeighbourDiscovery)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IPv6NeighbourDiscovery.h</name>
    <path>D:/home/INET-svn/Network/ICMPv6/</path>
    <filename>_i_pv6_neighbour_discovery_8h</filename>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_i_pv6_datagram_8h" name="IPv6Datagram.h" local="yes" imported="no">IPv6Datagram.h</includes>
    <includes id="_i_pv6_n_d_message__m_8h" name="IPv6NDMessage_m.h" local="yes" imported="no">IPv6NDMessage_m.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_pv6_interface_data_8h" name="IPv6InterfaceData.h" local="yes" imported="no">IPv6InterfaceData.h</includes>
    <includes id="_interface_entry_8h" name="InterfaceEntry.h" local="yes" imported="no">InterfaceEntry.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_routing_table6_8h" name="RoutingTable6.h" local="yes" imported="no">RoutingTable6.h</includes>
    <includes id="_routing_table6_access_8h" name="RoutingTable6Access.h" local="yes" imported="no">RoutingTable6Access.h</includes>
    <includes id="_i_pv6_neighbour_cache_8h" name="IPv6NeighbourCache.h" local="yes" imported="no">IPv6NeighbourCache.h</includes>
    <includes id="_i_c_m_pv6_8h" name="ICMPv6.h" local="yes" imported="no">ICMPv6.h</includes>
    <includes id="_i_c_m_pv6_access_8h" name="ICMPv6Access.h" local="yes" imported="no">ICMPv6Access.h</includes>
  </compound>
  <compound kind="file">
    <name>IPv6NeighbourDiscoveryAccess.h</name>
    <path>D:/home/INET-svn/Network/ICMPv6/</path>
    <filename>_i_pv6_neighbour_discovery_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_i_pv6_neighbour_discovery_8h" name="IPv6NeighbourDiscovery.h" local="yes" imported="no">IPv6NeighbourDiscovery.h</includes>
  </compound>
  <compound kind="file">
    <name>IPvXAddress.cc</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_pv_x_address_8cc</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>IPvXAddress.h</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>_i_pv_x_address_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(std::ostream &amp;os, const IPvXAddress &amp;ip)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IQoSClassifier.h</name>
    <path>D:/home/INET-svn/Network/Queue/</path>
    <filename>_i_qo_s_classifier_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>IRadioModel.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_i_radio_model_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_snr_list_8h" name="SnrList.h" local="yes" imported="no">SnrList.h</includes>
  </compound>
  <compound kind="file">
    <name>IReceptionModel.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_i_reception_model_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>IRSVPClassifier.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_i_r_s_v_p_classifier_8h</filename>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <includes id="_i_classifier_8h" name="IClassifier.h" local="yes" imported="no">IClassifier.h</includes>
  </compound>
  <compound kind="file">
    <name>IScriptable.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_i_scriptable_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Join.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_join_8cc</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(Join)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LDP.cc</name>
    <path>D:/home/INET-svn/Network/LDP/</path>
    <filename>_l_d_p_8cc</filename>
    <includes id="_const_type_8h" name="ConstType.h" local="yes" imported="no">ConstType.h</includes>
    <includes id="_l_d_p_8h" name="LDP.h" local="yes" imported="no">LDP.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_l_i_b_table_access_8h" name="LIBTableAccess.h" local="yes" imported="no">LIBTableAccess.h</includes>
    <includes id="_t_e_d_access_8h" name="TEDAccess.h" local="yes" imported="no">TEDAccess.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <includes id="_u_d_p_packet_8h" name="UDPPacket.h" local="yes" imported="no">UDPPacket.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(LDP)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os, const LDP::fec_bind_t &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fecPrefixCompare</name>
      <anchor>a2</anchor>
      <arglist>(const LDP::fec_t &amp;a, const LDP::fec_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;os, const LDP::fec_t &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;os, const LDP::pending_req_t &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;os, const LDP::peer_info &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a6</anchor>
      <arglist>(const FEC_TLV &amp;a, const FEC_TLV &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a7</anchor>
      <arglist>(const FEC_TLV &amp;a, const FEC_TLV &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(std::ostream &amp;os, const FEC_TLV &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LDP.h</name>
    <path>D:/home/INET-svn/Network/LDP/</path>
    <filename>_l_d_p_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_l_d_p_packet__m_8h" name="LDPPacket_m.h" local="yes" imported="no">LDPPacket_m.h</includes>
    <includes id="_u_d_p_socket_8h" name="UDPSocket.h" local="yes" imported="no">UDPSocket.h</includes>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <includes id="_t_c_p_socket_map_8h" name="TCPSocketMap.h" local="yes" imported="no">TCPSocketMap.h</includes>
    <includes id="_i_classifier_8h" name="IClassifier.h" local="yes" imported="no">IClassifier.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LDP_PORT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDP_TRAFFIC</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDP_HELLO_TRAFFIC</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDP_USER_TRAFFIC</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LDPPacket_m.h</name>
    <path>D:/home/INET-svn/Network/LDP/</path>
    <filename>_l_d_p_packet__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDP_BASEHEADER_BYTES</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDP_HEADER_BYTES</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LDP_MESSAGE_TYPES</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTIFICATION</name>
      <anchor>a31a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HELLO</name>
      <anchor>a31a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INITIALIZATION</name>
      <anchor>a31a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEEP_ALIVE</name>
      <anchor>a31a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS</name>
      <anchor>a31a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS_WITHDRAW</name>
      <anchor>a31a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LABEL_MAPPING</name>
      <anchor>a31a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LABEL_REQUEST</name>
      <anchor>a31a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LABEL_WITHDRAW</name>
      <anchor>a31a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LABEL_RELEASE</name>
      <anchor>a31a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchor>a31a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LDP_STATUS_TYPES</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_ROUTE</name>
      <anchor>a32a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a15</anchor>
      <arglist>(cCommBuffer *b, FEC_TLV &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a16</anchor>
      <arglist>(cCommBuffer *b, FEC_TLV &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a17</anchor>
      <arglist>(cCommBuffer *b, LDPPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a18</anchor>
      <arglist>(cCommBuffer *b, LDPPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a19</anchor>
      <arglist>(cCommBuffer *b, LDPLabelMapping &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a20</anchor>
      <arglist>(cCommBuffer *b, LDPLabelMapping &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a21</anchor>
      <arglist>(cCommBuffer *b, LDPLabelRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a22</anchor>
      <arglist>(cCommBuffer *b, LDPLabelRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a23</anchor>
      <arglist>(cCommBuffer *b, LDPHello &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a24</anchor>
      <arglist>(cCommBuffer *b, LDPHello &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a25</anchor>
      <arglist>(cCommBuffer *b, LDPNotify &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a26</anchor>
      <arglist>(cCommBuffer *b, LDPNotify &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a27</anchor>
      <arglist>(cCommBuffer *b, LDPIni &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a28</anchor>
      <arglist>(cCommBuffer *b, LDPIni &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a29</anchor>
      <arglist>(cCommBuffer *b, LDPAddress &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a30</anchor>
      <arglist>(cCommBuffer *b, LDPAddress &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LIBTable.cc</name>
    <path>D:/home/INET-svn/Network/MPLS/</path>
    <filename>_l_i_b_table_8cc</filename>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <includes id="_x_m_l_utils_8h" name="XMLUtils.h" local="yes" imported="no">XMLUtils.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(LIBTable)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os, const LabelOpVector &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os, const LIBTable::LIBEntry &amp;lib)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LIBTable.h</name>
    <path>D:/home/INET-svn/Network/MPLS/</path>
    <filename>_l_i_b_table_8h</filename>
    <includes id="_const_type_8h" name="ConstType.h" local="yes" imported="no">ConstType.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>PUSH_OPER</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWAP_OPER</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POP_OPER</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; LabelOp &gt;</type>
      <name>LabelOpVector</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;os, const LIBTable::LIBEntry &amp;lib)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;os, const LabelOpVector &amp;label)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LIBTableAccess.h</name>
    <path>D:/home/INET-svn/Network/MPLS/</path>
    <filename>_l_i_b_table_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
  </compound>
  <compound kind="file">
    <name>LinearMobility.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_linear_mobility_8cc</filename>
    <includes id="_linear_mobility_8h" name="LinearMobility.h" local="yes" imported="no">LinearMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(LinearMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearMobility.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_linear_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
  </compound>
  <compound kind="file">
    <name>LineSegmentsMobilityBase.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_line_segments_mobility_base_8cc</filename>
    <includes id="_line_segments_mobility_base_8h" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
  </compound>
  <compound kind="file">
    <name>LineSegmentsMobilityBase.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_line_segments_mobility_base_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
  </compound>
  <compound kind="file">
    <name>LinkStateAcknowledgementHandler.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_link_state_acknowledgement_handler_8cc</filename>
    <includes id="_link_state_acknowledgement_handler_8h" name="LinkStateAcknowledgementHandler.h" local="yes" imported="no">LinkStateAcknowledgementHandler.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>LinkStateAcknowledgementHandler.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_link_state_acknowledgement_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>LinkStatePacket_m.h</name>
    <path>D:/home/INET-svn/Network/TED/</path>
    <filename>_link_state_packet__m_8h</filename>
    <includes id="_t_e_d__m_8h" name="TED_m.h" local="yes" imported="no">TED_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, LinkStateMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, LinkStateMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinkStateRequestHandler.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_link_state_request_handler_8cc</filename>
    <includes id="_link_state_request_handler_8h" name="LinkStateRequestHandler.h" local="yes" imported="no">LinkStateRequestHandler.h</includes>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>LinkStateRequestHandler.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_link_state_request_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>LinkStateRouting.cc</name>
    <path>D:/home/INET-svn/Network/TED/</path>
    <filename>_link_state_routing_8cc</filename>
    <includes id="_link_state_routing_8h" name="LinkStateRouting.h" local="yes" imported="no">LinkStateRouting.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_t_e_d_8h" name="TED.h" local="yes" imported="no">TED.h</includes>
    <includes id="_t_e_d_access_8h" name="TEDAccess.h" local="yes" imported="no">TEDAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(LinkStateRouting)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinkStateRouting.h</name>
    <path>D:/home/INET-svn/Network/TED/</path>
    <filename>_link_state_routing_8h</filename>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_link_state_packet__m_8h" name="LinkStatePacket_m.h" local="yes" imported="no">LinkStatePacket_m.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TED_TRAFFIC</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinkStateUpdateHandler.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_link_state_update_handler_8cc</filename>
    <includes id="_link_state_update_handler_8h" name="LinkStateUpdateHandler.h" local="yes" imported="no">LinkStateUpdateHandler.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
  </compound>
  <compound kind="file">
    <name>LinkStateUpdateHandler.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_link_state_update_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>LSA.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>_l_s_a_8h</filename>
    <includes id="_o_s_p_f_packet__m_8h" name="OSPFPacket_m.h" local="yes" imported="no">OSPFPacket_m.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <namespace>OSPF</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a0</anchor>
      <arglist>(const OSPFLSAHeader &amp;leftLSA, const OSPFLSAHeader &amp;rightLSA)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFLSAHeader &amp;leftLSA, const OSPFLSAHeader &amp;rightLSA)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a2</anchor>
      <arglist>(const OSPFOptions &amp;leftOptions, const OSPFOptions &amp;rightOptions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFOptions &amp;leftOptions, const OSPFOptions &amp;rightOptions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a4</anchor>
      <arglist>(const OSPF::NextHop &amp;leftHop, const OSPF::NextHop &amp;rightHop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a5</anchor>
      <arglist>(const OSPF::NextHop &amp;leftHop, const OSPF::NextHop &amp;rightHop)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>CalculateLSASize</name>
      <anchor>a6</anchor>
      <arglist>(const OSPFRouterLSA *routerLSA)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>CalculateLSASize</name>
      <anchor>a7</anchor>
      <arglist>(const OSPFNetworkLSA *networkLSA)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>CalculateLSASize</name>
      <anchor>a8</anchor>
      <arglist>(const OSPFSummaryLSA *summaryLSA)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>CalculateLSASize</name>
      <anchor>a9</anchor>
      <arglist>(const OSPFASExternalLSA *asExternalLSA)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintLSAHeader</name>
      <anchor>a10</anchor>
      <arglist>(const OSPFLSAHeader &amp;lsaHeader, std::ostream *output=&amp;ev)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a11</anchor>
      <arglist>(std::ostream &amp;ostr, OSPFLSA &amp;lsa)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mac80211.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/macLayer/</path>
    <filename>_mac80211_8cc</filename>
    <includes id="_mac80211_8h" name="Mac80211.h" local="yes" imported="no">Mac80211.h</includes>
    <includes id="_ieee802_ctrl__m_8h" name="Ieee802Ctrl_m.h" local="yes" imported="no">Ieee802Ctrl_m.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchor>a1</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchor>a2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a3</anchor>
      <arglist>(Mac80211)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mac80211.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/macLayer/</path>
    <filename>_mac80211_8h</filename>
    <includes id="_wireless_mac_base_8h" name="WirelessMacBase.h" local="yes" imported="no">WirelessMacBase.h</includes>
    <includes id="_mac80211_pkt__m_8h" name="Mac80211Pkt_m.h" local="yes" imported="no">Mac80211Pkt_m.h</includes>
    <includes id="_consts80211_8h" name="Consts80211.h" local="yes" imported="no">Consts80211.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
  </compound>
  <compound kind="file">
    <name>Mac80211Pkt_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/macLayer/</path>
    <filename>_mac80211_pkt__m_8h</filename>
    <includes id="_mac_pkt__m_8h" name="MacPkt_m.h" local="yes" imported="no">MacPkt_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, Mac80211Pkt &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, Mac80211Pkt &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MACAddress.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Contract/</path>
    <filename>_m_a_c_address_8cc</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_interface_identifier_8h" name="InterfaceIdentifier.h" local="yes" imported="no">InterfaceIdentifier.h</includes>
  </compound>
  <compound kind="file">
    <name>MACAddress.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Contract/</path>
    <filename>_m_a_c_address_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MAC_ADDRESS_BYTES</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os, const MACAddress &amp;mac)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MacPkt_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/macLayer/</path>
    <filename>_mac_pkt__m_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, MacPkt &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, MacPkt &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitBase.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/EtherSwitch/</path>
    <filename>_m_a_c_relay_unit_base_8cc</filename>
    <includes id="_m_a_c_relay_unit_base_8h" name="MACRelayUnitBase.h" local="yes" imported="no">MACRelayUnitBase.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitBase.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/EtherSwitch/</path>
    <filename>_m_a_c_relay_unit_base_8h</filename>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitNP.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/EtherSwitch/</path>
    <filename>_m_a_c_relay_unit_n_p_8cc</filename>
    <includes id="_m_a_c_relay_unit_n_p_8h" name="MACRelayUnitNP.h" local="yes" imported="no">MACRelayUnitNP.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(MACRelayUnitNP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitNP.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/EtherSwitch/</path>
    <filename>_m_a_c_relay_unit_n_p_8h</filename>
    <includes id="_m_a_c_relay_unit_base_8h" name="MACRelayUnitBase.h" local="yes" imported="no">MACRelayUnitBase.h</includes>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitPP.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/EtherSwitch/</path>
    <filename>_m_a_c_relay_unit_p_p_8cc</filename>
    <includes id="_m_a_c_relay_unit_p_p_8h" name="MACRelayUnitPP.h" local="yes" imported="no">MACRelayUnitPP.h</includes>
    <includes id="_ether_frame__m_8h" name="EtherFrame_m.h" local="yes" imported="no">EtherFrame_m.h</includes>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <includes id="_ethernet_8h" name="Ethernet.h" local="yes" imported="no">Ethernet.h</includes>
    <includes id="_m_a_c_address_8h" name="MACAddress.h" local="yes" imported="no">MACAddress.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(MACRelayUnitPP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MACRelayUnitPP.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/EtherSwitch/</path>
    <filename>_m_a_c_relay_unit_p_p_8h</filename>
    <includes id="_m_a_c_relay_unit_base_8h" name="MACRelayUnitBase.h" local="yes" imported="no">MACRelayUnitBase.h</includes>
  </compound>
  <compound kind="file">
    <name>MassMobility.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_mass_mobility_8cc</filename>
    <includes id="_mass_mobility_8h" name="MassMobility.h" local="yes" imported="no">MassMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MK_UPDATE_POS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MK_CHANGE_DIR</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a2</anchor>
      <arglist>(MassMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MassMobility.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_mass_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
  </compound>
  <compound kind="file">
    <name>MessageHandler.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_message_handler_8cc</filename>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>MessageHandler.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>_message_handler_8h</filename>
    <includes id="_i_message_handler_8h" name="IMessageHandler.h" local="yes" imported="no">IMessageHandler.h</includes>
    <includes id="_hello_handler_8h" name="HelloHandler.h" local="yes" imported="no">HelloHandler.h</includes>
    <includes id="_database_description_handler_8h" name="DatabaseDescriptionHandler.h" local="yes" imported="no">DatabaseDescriptionHandler.h</includes>
    <includes id="_link_state_request_handler_8h" name="LinkStateRequestHandler.h" local="yes" imported="no">LinkStateRequestHandler.h</includes>
    <includes id="_link_state_update_handler_8h" name="LinkStateUpdateHandler.h" local="yes" imported="no">LinkStateUpdateHandler.h</includes>
    <includes id="_link_state_acknowledgement_handler_8h" name="LinkStateAcknowledgementHandler.h" local="yes" imported="no">LinkStateAcknowledgementHandler.h</includes>
    <includes id="_o_s_p_f_timer__m_8h" name="OSPFTimer_m.h" local="yes" imported="no">OSPFTimer_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>Modulation.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_modulation_8cc</filename>
    <includes id="_modulation_8h" name="Modulation.h" local="yes" imported="no">Modulation.h</includes>
  </compound>
  <compound kind="file">
    <name>Modulation.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_modulation_8h</filename>
    <includes id="_i_modulation_8h" name="IModulation.h" local="yes" imported="no">IModulation.h</includes>
  </compound>
  <compound kind="file">
    <name>ModuleAccess.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_module_access_8cc</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleWherever</name>
      <anchor>a1</anchor>
      <arglist>(const char *name, const char *classname, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleSomewhereUp</name>
      <anchor>a2</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ModuleAccess.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_module_access_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleWherever</name>
      <anchor>a0</anchor>
      <arglist>(const char *name, const char *classname, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleSomewhereUp</name>
      <anchor>a1</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MPLS.cc</name>
    <path>D:/home/INET-svn/Network/MPLS/</path>
    <filename>_m_p_l_s_8cc</filename>
    <includes id="_m_p_l_s_8h" name="MPLS.h" local="yes" imported="no">MPLS.h</includes>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">Utils.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_l_i_b_table_access_8h" name="LIBTableAccess.h" local="yes" imported="no">LIBTableAccess.h</includes>
    <includes id="_i_classifier_8h" name="IClassifier.h" local="yes" imported="no">IClassifier.h</includes>
    <includes id="_l_d_p_8h" name="LDP.h" local="yes" imported="no">LDP.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ICMP_TRAFFIC</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(MPLS)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MPLS.h</name>
    <path>D:/home/INET-svn/Network/MPLS/</path>
    <filename>_m_p_l_s_8h</filename>
    <includes id="_m_p_l_s_packet_8h" name="MPLSPacket.h" local="yes" imported="no">MPLSPacket.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_const_type_8h" name="ConstType.h" local="yes" imported="no">ConstType.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_i_classifier_8h" name="IClassifier.h" local="yes" imported="no">IClassifier.h</includes>
  </compound>
  <compound kind="file">
    <name>MPLSPacket.cc</name>
    <path>D:/home/INET-svn/Network/MPLS/</path>
    <filename>_m_p_l_s_packet_8cc</filename>
    <includes id="_m_p_l_s_packet_8h" name="MPLSPacket.h" local="yes" imported="no">MPLSPacket.h</includes>
  </compound>
  <compound kind="file">
    <name>MPLSPacket.h</name>
    <path>D:/home/INET-svn/Network/MPLS/</path>
    <filename>_m_p_l_s_packet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>NAMTrace.cc</name>
    <path>D:/home/INET-svn/World/</path>
    <filename>_n_a_m_trace_8cc</filename>
    <includes id="_n_a_m_trace_8h" name="NAMTrace.h" local="yes" imported="no">NAMTrace.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(NAMTrace)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NAMTrace.h</name>
    <path>D:/home/INET-svn/World/</path>
    <filename>_n_a_m_trace_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>NAMTraceWriter.cc</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>_n_a_m_trace_writer_8cc</filename>
    <includes id="_n_a_m_trace_8h" name="NAMTrace.h" local="yes" imported="no">NAMTrace.h</includes>
    <includes id="_n_a_m_trace_writer_8h" name="NAMTraceWriter.h" local="yes" imported="no">NAMTraceWriter.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_tx_notif_details_8h" name="TxNotifDetails.h" local="yes" imported="no">TxNotifDetails.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(NAMTraceWriter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NAMTraceWriter.h</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>_n_a_m_trace_writer_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_notifiable_8h" name="INotifiable.h" local="yes" imported="no">INotifiable.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
  </compound>
  <compound kind="file">
    <name>NetworkConfigurator.cc</name>
    <path>D:/home/INET-svn/Network/AutoRouting/</path>
    <filename>_network_configurator_8cc</filename>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_network_configurator_8h" name="NetworkConfigurator.h" local="yes" imported="no">NetworkConfigurator.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(NetworkConfigurator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NetworkConfigurator.h</name>
    <path>D:/home/INET-svn/Network/AutoRouting/</path>
    <filename>_network_configurator_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>NetworkLSA.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>_network_l_s_a_8cc</filename>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
  </compound>
  <compound kind="file">
    <name>NotificationBoard.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_notification_board_8cc</filename>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(NotificationBoard)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os, const NotificationBoard::NotifiableVector &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NotificationBoard.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_notification_board_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_i_notifiable_8h" name="INotifiable.h" local="yes" imported="no">INotifiable.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
  </compound>
  <compound kind="file">
    <name>NotifierConsts.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_notifier_consts_8cc</filename>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="function">
      <type>const char *</type>
      <name>notificationCategoryName</name>
      <anchor>a0</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printNotificationBanner</name>
      <anchor>a1</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NotifierConsts.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_notifier_consts_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="enumvalue">
      <name>NF_HOSTPOSITION_UPDATED</name>
      <anchor>a23a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_NODE_FAILURE</name>
      <anchor>a23a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_NODE_RECOVERY</name>
      <anchor>a23a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_RADIOSTATE_CHANGED</name>
      <anchor>a23a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_RADIO_CHANNEL_CHANGED</name>
      <anchor>a23a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_PP_TX_BEGIN</name>
      <anchor>a23a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_PP_TX_END</name>
      <anchor>a23a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_PP_RX_END</name>
      <anchor>a23a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_TX_ACKED</name>
      <anchor>a23a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_L2_Q_DROP</name>
      <anchor>a23a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_MAC_BECAME_IDLE</name>
      <anchor>a23a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_L2_BEACON_LOST</name>
      <anchor>a23a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_L2_ASSOCIATED</name>
      <anchor>a23a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_INTERFACE_STATE_CHANGED</name>
      <anchor>a23a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_INTERFACE_CONFIG_CHANGED</name>
      <anchor>a23a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_TED_CHANGED</name>
      <anchor>a23a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_IPv4_INTERFACECONFIG_CHANGED</name>
      <anchor>a23a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_IPv4_ROUTINGTABLE_CHANGED</name>
      <anchor>a23a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_IPv6_INTERFACECONFIG_CHANGED</name>
      <anchor>a23a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_IPv6_ROUTINGTABLE_CHANGED</name>
      <anchor>a23a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NF_IPv6_HANDOVER_OCCURRED</name>
      <anchor>a23a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>notificationCategoryName</name>
      <anchor>a21</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printNotificationBanner</name>
      <anchor>a22</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NullMobility.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_null_mobility_8cc</filename>
    <includes id="_null_mobility_8h" name="NullMobility.h" local="yes" imported="no">NullMobility.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(NullMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NullMobility.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_null_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
  </compound>
  <compound kind="file">
    <name>opp_utils.cc</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>opp__utils_8cc</filename>
    <includes id="opp__utils_8h" name="opp_utils.h" local="yes" imported="no">opp_utils.h</includes>
    <namespace>OPP_Global</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>ltostr</name>
      <anchor>a0</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dtostr</name>
      <anchor>a1</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>atod</name>
      <anchor>a2</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>atoul</name>
      <anchor>a3</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>opp_utils.h</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>opp__utils_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <namespace>OPP_Global</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFArea.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>_o_s_p_f_area_8cc</filename>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFArea.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>_o_s_p_f_area_8h</filename>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
    <includes id="_o_s_p_f_routing_table_entry_8h" name="OSPFRoutingTableEntry.h" local="yes" imported="no">OSPFRoutingTableEntry.h</includes>
    <namespace>OSPF</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(std::ostream &amp;ostr, OSPF::Area &amp;area)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFcommon.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>_o_s_p_fcommon_8h</filename>
    <namespace>OSPF</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LS_REFRESH_TIME</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_LS_INTERVAL</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_LS_ARRIVAL</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_AGE</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHECK_AGE</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_AGE_DIFF</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LS_INFINITY</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_DESTINATION_ADDRESS</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_DESTINATION_MASK</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INITIAL_SEQUENCE_NUMBER</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_SEQUENCE_NUMBER</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VIRTUAL_LINK_TTL</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPV4_HEADER_LENGTH</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IPV4_DATAGRAM_LENGTH</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_HEADER_LENGTH</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_LSA_HEADER_LENGTH</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_DD_HEADER_LENGTH</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_REQUEST_LENGTH</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_ROUTERLSA_HEADER_LENGTH</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_LINK_HEADER_LENGTH</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_TOS_LENGTH</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_NETWORKLSA_MASK_LENGTH</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_NETWORKLSA_ADDRESS_LENGTH</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_SUMMARYLSA_HEADER_LENGTH</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_ASEXTERNALLSA_HEADER_LENGTH</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OSPF_ASEXTERNALLSA_TOS_INFO_LENGTH</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>Metric</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>RouterID</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>AreaID</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>LinkStateID</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AuthenticationType</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NullType</name>
      <anchor>a15a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SimplePasswordType</name>
      <anchor>a15a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CrytographicType</name>
      <anchor>a15a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a41</anchor>
      <arglist>(OSPF::DesignatedRouterID leftID, OSPF::DesignatedRouterID rightID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a42</anchor>
      <arglist>(OSPF::DesignatedRouterID leftID, OSPF::DesignatedRouterID rightID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a43</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a44</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a45</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchor>a46</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchor>a47</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchor>a48</anchor>
      <arglist>(OSPF::IPv4Address leftAddress, OSPF::IPv4Address rightAddress)</arglist>
    </member>
    <member kind="function">
      <type>OSPF::IPv4Address</type>
      <name>operator &amp;</name>
      <anchor>a49</anchor>
      <arglist>(OSPF::IPv4Address address, OSPF::IPv4Address mask)</arglist>
    </member>
    <member kind="function">
      <type>OSPF::IPv4Address</type>
      <name>operator|</name>
      <anchor>a50</anchor>
      <arglist>(OSPF::IPv4Address address, OSPF::IPv4Address match)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a51</anchor>
      <arglist>(OSPF::IPv4AddressRange leftAddressRange, OSPF::IPv4AddressRange rightAddressRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a52</anchor>
      <arglist>(OSPF::IPv4AddressRange leftAddressRange, OSPF::IPv4AddressRange rightAddressRange)</arglist>
    </member>
    <member kind="function">
      <type>OSPF::IPv4Address</type>
      <name>IPv4AddressFromAddressString</name>
      <anchor>a53</anchor>
      <arglist>(const char *charForm)</arglist>
    </member>
    <member kind="function">
      <type>OSPF::IPv4Address</type>
      <name>IPv4AddressFromULong</name>
      <anchor>a54</anchor>
      <arglist>(unsigned long longForm)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>ULongFromIPv4Address</name>
      <anchor>a55</anchor>
      <arglist>(OSPF::IPv4Address byteForm)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>ULongFromAddressString</name>
      <anchor>a56</anchor>
      <arglist>(const char *charForm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>AddressStringFromIPv4Address</name>
      <anchor>a57</anchor>
      <arglist>(char *buffer, int bufferLength, OSPF::IPv4Address byteForm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>AddressStringFromULong</name>
      <anchor>a58</anchor>
      <arglist>(char *buffer, int bufferLength, unsigned long longForm)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>HexCharToByte</name>
      <anchor>a59</anchor>
      <arglist>(char hex)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>HexPairToByte</name>
      <anchor>a60</anchor>
      <arglist>(char upperHex, char lowerHex)</arglist>
    </member>
    <member kind="variable">
      <type>const RouterID</type>
      <name>NullRouterID</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AreaID</type>
      <name>BackboneAreaID</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LinkStateID</type>
      <name>NullLinkStateID</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>NullIPv4Address</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>AllSPFRouters</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>AllDRouters</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4AddressRange</type>
      <name>NullIPv4AddressRange</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DesignatedRouterID</type>
      <name>NullDesignatedRouterID</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFInterface.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_8cc</filename>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterface.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_8h</filename>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_o_s_p_f_timer__m_8h" name="OSPFTimer_m.h" local="yes" imported="no">OSPFTimer_m.h</includes>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceState.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_8cc</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_designated_router_8h" name="OSPFInterfaceStateDesignatedRouter.h" local="yes" imported="no">OSPFInterfaceStateDesignatedRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_not_designated_router_8h" name="OSPFInterfaceStateNotDesignatedRouter.h" local="yes" imported="no">OSPFInterfaceStateNotDesignatedRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_backup_8h" name="OSPFInterfaceStateBackup.h" local="yes" imported="no">OSPFInterfaceStateBackup.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceState.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_8h</filename>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateBackup.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_backup_8cc</filename>
    <includes id="_o_s_p_f_interface_state_backup_8h" name="OSPFInterfaceStateBackup.h" local="yes" imported="no">OSPFInterfaceStateBackup.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateBackup.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_backup_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateDesignatedRouter.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_designated_router_8cc</filename>
    <includes id="_o_s_p_f_interface_state_designated_router_8h" name="OSPFInterfaceStateDesignatedRouter.h" local="yes" imported="no">OSPFInterfaceStateDesignatedRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateDesignatedRouter.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_designated_router_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateDown.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_down_8cc</filename>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_point_to_point_8h" name="OSPFInterfaceStatePointToPoint.h" local="yes" imported="no">OSPFInterfaceStatePointToPoint.h</includes>
    <includes id="_o_s_p_f_interface_state_not_designated_router_8h" name="OSPFInterfaceStateNotDesignatedRouter.h" local="yes" imported="no">OSPFInterfaceStateNotDesignatedRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_waiting_8h" name="OSPFInterfaceStateWaiting.h" local="yes" imported="no">OSPFInterfaceStateWaiting.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateDown.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_down_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateLoopback.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_loopback_8cc</filename>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateLoopback.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_loopback_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateNotDesignatedRouter.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_not_designated_router_8cc</filename>
    <includes id="_o_s_p_f_interface_state_not_designated_router_8h" name="OSPFInterfaceStateNotDesignatedRouter.h" local="yes" imported="no">OSPFInterfaceStateNotDesignatedRouter.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateNotDesignatedRouter.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_not_designated_router_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStatePointToPoint.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_point_to_point_8cc</filename>
    <includes id="_o_s_p_f_interface_state_point_to_point_8h" name="OSPFInterfaceStatePointToPoint.h" local="yes" imported="no">OSPFInterfaceStatePointToPoint.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStatePointToPoint.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_point_to_point_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateWaiting.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_waiting_8cc</filename>
    <includes id="_o_s_p_f_interface_state_waiting_8h" name="OSPFInterfaceStateWaiting.h" local="yes" imported="no">OSPFInterfaceStateWaiting.h</includes>
    <includes id="_o_s_p_f_interface_state_down_8h" name="OSPFInterfaceStateDown.h" local="yes" imported="no">OSPFInterfaceStateDown.h</includes>
    <includes id="_o_s_p_f_interface_state_loopback_8h" name="OSPFInterfaceStateLoopback.h" local="yes" imported="no">OSPFInterfaceStateLoopback.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFInterfaceStateWaiting.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>_o_s_p_f_interface_state_waiting_8h</filename>
    <includes id="_o_s_p_f_interface_state_8h" name="OSPFInterfaceState.h" local="yes" imported="no">OSPFInterfaceState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighbor.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_8cc</filename>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighbor.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_8h</filename>
    <includes id="_o_s_p_f_packet__m_8h" name="OSPFPacket_m.h" local="yes" imported="no">OSPFPacket_m.h</includes>
    <includes id="_o_s_p_f_timer__m_8h" name="OSPFTimer_m.h" local="yes" imported="no">OSPFTimer_m.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
    <namespace>OSPF</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a0</anchor>
      <arglist>(OSPF::Neighbor::DDPacketID leftID, OSPF::Neighbor::DDPacketID rightID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a1</anchor>
      <arglist>(OSPF::Neighbor::DDPacketID leftID, OSPF::Neighbor::DDPacketID rightID)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborState.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborState.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_8h</filename>
    <includes id="_o_s_p_f_neighbor_8h" name="OSPFNeighbor.h" local="yes" imported="no">OSPFNeighbor.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateAttempt.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_attempt_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_attempt_8h" name="OSPFNeighborStateAttempt.h" local="yes" imported="no">OSPFNeighborStateAttempt.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateAttempt.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_attempt_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateDown.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_down_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_attempt_8h" name="OSPFNeighborStateAttempt.h" local="yes" imported="no">OSPFNeighborStateAttempt.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateDown.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_down_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateExchange.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_exchange_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_exchange_8h" name="OSPFNeighborStateExchange.h" local="yes" imported="no">OSPFNeighborStateExchange.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_o_s_p_f_neighbor_state_full_8h" name="OSPFNeighborStateFull.h" local="yes" imported="no">OSPFNeighborStateFull.h</includes>
    <includes id="_o_s_p_f_neighbor_state_loading_8h" name="OSPFNeighborStateLoading.h" local="yes" imported="no">OSPFNeighborStateLoading.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateExchange.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_exchange_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateExchangeStart.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_exchange_start_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_8h" name="OSPFNeighborStateExchange.h" local="yes" imported="no">OSPFNeighborStateExchange.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateExchangeStart.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_exchange_start_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateFull.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_full_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_full_8h" name="OSPFNeighborStateFull.h" local="yes" imported="no">OSPFNeighborStateFull.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateFull.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_full_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateInit.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_init_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateInit.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_init_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateLoading.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_loading_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_loading_8h" name="OSPFNeighborStateLoading.h" local="yes" imported="no">OSPFNeighborStateLoading.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_full_8h" name="OSPFNeighborStateFull.h" local="yes" imported="no">OSPFNeighborStateFull.h</includes>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateLoading.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_loading_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateTwoWay.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_two_way_8cc</filename>
    <includes id="_o_s_p_f_neighbor_state_two_way_8h" name="OSPFNeighborStateTwoWay.h" local="yes" imported="no">OSPFNeighborStateTwoWay.h</includes>
    <includes id="_o_s_p_f_neighbor_state_down_8h" name="OSPFNeighborStateDown.h" local="yes" imported="no">OSPFNeighborStateDown.h</includes>
    <includes id="_o_s_p_f_neighbor_state_init_8h" name="OSPFNeighborStateInit.h" local="yes" imported="no">OSPFNeighborStateInit.h</includes>
    <includes id="_o_s_p_f_neighbor_state_exchange_start_8h" name="OSPFNeighborStateExchangeStart.h" local="yes" imported="no">OSPFNeighborStateExchangeStart.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFNeighborStateTwoWay.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>_o_s_p_f_neighbor_state_two_way_8h</filename>
    <includes id="_o_s_p_f_neighbor_state_8h" name="OSPFNeighborState.h" local="yes" imported="no">OSPFNeighborState.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFPacket_m.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/</path>
    <filename>_o_s_p_f_packet__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OSPFPacketType</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HelloPacket</name>
      <anchor>a53a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DatabaseDescriptionPacket</name>
      <anchor>a53a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinkStateRequestPacket</name>
      <anchor>a53a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinkStateUpdatePacket</name>
      <anchor>a53a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinkStateAcknowledgementPacket</name>
      <anchor>a53a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LSAType</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RouterLSAType</name>
      <anchor>a54a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NetworkLSAType</name>
      <anchor>a54a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SummaryLSA_NetworksType</name>
      <anchor>a54a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SummaryLSA_ASBoundaryRoutersType</name>
      <anchor>a54a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASExternalLSAType</name>
      <anchor>a54a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LinkType</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PointToPointLink</name>
      <anchor>a55a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TransitLink</name>
      <anchor>a55a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StubLink</name>
      <anchor>a55a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VirtualLink</name>
      <anchor>a55a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a15</anchor>
      <arglist>(cCommBuffer *b, OSPFOptions &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a16</anchor>
      <arglist>(cCommBuffer *b, OSPFOptions &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a17</anchor>
      <arglist>(cCommBuffer *b, OSPFPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a18</anchor>
      <arglist>(cCommBuffer *b, OSPFPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a19</anchor>
      <arglist>(cCommBuffer *b, OSPFHelloPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a20</anchor>
      <arglist>(cCommBuffer *b, OSPFHelloPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a21</anchor>
      <arglist>(cCommBuffer *b, OSPFLSAHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a22</anchor>
      <arglist>(cCommBuffer *b, OSPFLSAHeader &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a23</anchor>
      <arglist>(cCommBuffer *b, OSPFLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a24</anchor>
      <arglist>(cCommBuffer *b, OSPFLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a25</anchor>
      <arglist>(cCommBuffer *b, TOSData &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a26</anchor>
      <arglist>(cCommBuffer *b, TOSData &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a27</anchor>
      <arglist>(cCommBuffer *b, Link &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a28</anchor>
      <arglist>(cCommBuffer *b, Link &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a29</anchor>
      <arglist>(cCommBuffer *b, OSPFRouterLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a30</anchor>
      <arglist>(cCommBuffer *b, OSPFRouterLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a31</anchor>
      <arglist>(cCommBuffer *b, OSPFNetworkLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a32</anchor>
      <arglist>(cCommBuffer *b, OSPFNetworkLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a33</anchor>
      <arglist>(cCommBuffer *b, OSPFSummaryLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a34</anchor>
      <arglist>(cCommBuffer *b, OSPFSummaryLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a35</anchor>
      <arglist>(cCommBuffer *b, ExternalTOSInfo &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a36</anchor>
      <arglist>(cCommBuffer *b, ExternalTOSInfo &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a37</anchor>
      <arglist>(cCommBuffer *b, OSPFASExternalLSAContents &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a38</anchor>
      <arglist>(cCommBuffer *b, OSPFASExternalLSAContents &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a39</anchor>
      <arglist>(cCommBuffer *b, OSPFASExternalLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a40</anchor>
      <arglist>(cCommBuffer *b, OSPFASExternalLSA &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a41</anchor>
      <arglist>(cCommBuffer *b, OSPFDDOptions &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a42</anchor>
      <arglist>(cCommBuffer *b, OSPFDDOptions &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a43</anchor>
      <arglist>(cCommBuffer *b, OSPFDatabaseDescriptionPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a44</anchor>
      <arglist>(cCommBuffer *b, OSPFDatabaseDescriptionPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a45</anchor>
      <arglist>(cCommBuffer *b, LSARequest &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a46</anchor>
      <arglist>(cCommBuffer *b, LSARequest &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a47</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateRequestPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a48</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateRequestPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a49</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateUpdatePacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a50</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateUpdatePacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a51</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateAcknowledgementPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a52</anchor>
      <arglist>(cCommBuffer *b, OSPFLinkStateAcknowledgementPacket &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFRouter.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>_o_s_p_f_router_8cc</filename>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFRouter.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>_o_s_p_f_router_8h</filename>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
    <includes id="_o_s_p_f_routing_table_entry_8h" name="OSPFRoutingTableEntry.h" local="yes" imported="no">OSPFRoutingTableEntry.h</includes>
    <namespace>OSPF</namespace>
  </compound>
  <compound kind="file">
    <name>OSPFRouting.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/</path>
    <filename>_o_s_p_f_routing_8cc</filename>
    <includes id="_o_s_p_f_routing_8h" name="OSPFRouting.h" local="yes" imported="no">OSPFRouting.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <includes id="_o_s_p_f_area_8h" name="OSPFArea.h" local="yes" imported="no">OSPFArea.h</includes>
    <includes id="_o_s_p_f_interface_8h" name="OSPFInterface.h" local="yes" imported="no">OSPFInterface.h</includes>
    <includes id="_message_handler_8h" name="MessageHandler.h" local="yes" imported="no">MessageHandler.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(OSPFRouting)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFRouting.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/</path>
    <filename>_o_s_p_f_routing_8h</filename>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_o_s_p_f_packet__m_8h" name="OSPFPacket_m.h" local="yes" imported="no">OSPFPacket_m.h</includes>
    <includes id="_o_s_p_f_router_8h" name="OSPFRouter.h" local="yes" imported="no">OSPFRouter.h</includes>
  </compound>
  <compound kind="file">
    <name>OSPFRoutingTableEntry.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>_o_s_p_f_routing_table_entry_8h</filename>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_o_s_p_fcommon_8h" name="OSPFcommon.h" local="yes" imported="no">OSPFcommon.h</includes>
    <namespace>OSPF</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(std::ostream &amp;out, const OSPF::RoutingTableEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OSPFTimer_m.h</name>
    <path>D:/home/INET-svn/Network/OSPFv2/</path>
    <filename>_o_s_p_f_timer__m_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OSPFTimerType</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterfaceHelloTimer</name>
      <anchor>a12a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterfaceWaitTimer</name>
      <anchor>a12a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterfaceAcknowledgementTimer</name>
      <anchor>a12a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborInactivityTimer</name>
      <anchor>a12a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborPollTimer</name>
      <anchor>a12a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborDDRetransmissionTimer</name>
      <anchor>a12a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborUpdateRetransmissionTimer</name>
      <anchor>a12a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborRequestRetransmissionTimer</name>
      <anchor>a12a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DatabaseAgeTimer</name>
      <anchor>a12a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a10</anchor>
      <arglist>(cCommBuffer *b, OSPFTimer &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a11</anchor>
      <arglist>(cCommBuffer *b, OSPFTimer &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PassiveQueueBase.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_passive_queue_base_8cc</filename>
    <includes id="_passive_queue_base_8h" name="PassiveQueueBase.h" local="yes" imported="no">PassiveQueueBase.h</includes>
  </compound>
  <compound kind="file">
    <name>PassiveQueueBase.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_passive_queue_base_8h</filename>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
  </compound>
  <compound kind="file">
    <name>PathLossReceptionModel.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_path_loss_reception_model_8cc</filename>
    <includes id="_path_loss_reception_model_8h" name="PathLossReceptionModel.h" local="yes" imported="no">PathLossReceptionModel.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(PathLossReceptionModel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PathLossReceptionModel.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>_path_loss_reception_model_8h</filename>
    <includes id="_i_reception_model_8h" name="IReceptionModel.h" local="yes" imported="no">IReceptionModel.h</includes>
  </compound>
  <compound kind="file">
    <name>pcb.h</name>
    <path>D:/home/INET-svn/Transport/RTP/tmp/</path>
    <filename>pcb_8h</filename>
  </compound>
  <compound kind="file">
    <name>PhyControlInfo_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Contract/</path>
    <filename>_phy_control_info__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>PhyCommandCode</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PHY_C_CONFIGURERADIO</name>
      <anchor>a4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, PhyControlInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b, PhyControlInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PingApp.cc</name>
    <path>D:/home/INET-svn/Applications/PingApp/</path>
    <filename>_ping_app_8cc</filename>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_ping_app_8h" name="PingApp.h" local="yes" imported="no">PingApp.h</includes>
    <includes id="_ping_payload__m_8h" name="PingPayload_m.h" local="yes" imported="no">PingPayload_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(PingApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PingApp.h</name>
    <path>D:/home/INET-svn/Applications/PingApp/</path>
    <filename>_ping_app_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>PingPayload_m.h</name>
    <path>D:/home/INET-svn/Applications/PingApp/</path>
    <filename>_ping_payload__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, PingPayload &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, PingPayload &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PPP.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/PPP/</path>
    <filename>_p_p_p_8cc</filename>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_p_p_p_8h" name="PPP.h" local="yes" imported="no">PPP.h</includes>
    <includes id="_i_passive_queue_8h" name="IPassiveQueue.h" local="yes" imported="no">IPassiveQueue.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(PPP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PPP.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/PPP/</path>
    <filename>_p_p_p_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_p_p_p_frame__m_8h" name="PPPFrame_m.h" local="yes" imported="no">PPPFrame_m.h</includes>
    <includes id="_tx_notif_details_8h" name="TxNotifDetails.h" local="yes" imported="no">TxNotifDetails.h</includes>
  </compound>
  <compound kind="file">
    <name>PPPFrame_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/PPP/</path>
    <filename>_p_p_p_frame__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, PPPFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b, PPPFrame &amp;obj)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PPP_OVERHEAD_BYTES</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProtocolMap.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_protocol_map_8cc</filename>
    <includes id="_protocol_map_8h" name="ProtocolMap.h" local="yes" imported="no">ProtocolMap.h</includes>
  </compound>
  <compound kind="file">
    <name>ProtocolMap.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_protocol_map_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>QueueBase.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_queue_base_8cc</filename>
    <includes id="_queue_base_8h" name="QueueBase.h" local="yes" imported="no">QueueBase.h</includes>
  </compound>
  <compound kind="file">
    <name>QueueBase.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_queue_base_8h</filename>
    <includes id="_abstract_queue_8h" name="AbstractQueue.h" local="yes" imported="no">AbstractQueue.h</includes>
  </compound>
  <compound kind="file">
    <name>QueueWithQoS.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_queue_with_qo_s_8cc</filename>
    <includes id="_queue_with_qo_s_8h" name="QueueWithQoS.h" local="yes" imported="no">QueueWithQoS.h</includes>
  </compound>
  <compound kind="file">
    <name>QueueWithQoS.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_queue_with_qo_s_8h</filename>
    <includes id="_abstract_queue_8h" name="AbstractQueue.h" local="yes" imported="no">AbstractQueue.h</includes>
    <includes id="_enqueue_hook_8h" name="EnqueueHook.h" local="yes" imported="no">EnqueueHook.h</includes>
  </compound>
  <compound kind="file">
    <name>RadioState.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Contract/</path>
    <filename>_radio_state_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(std::ostream &amp;os, const RadioState &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomWPMobility.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_random_w_p_mobility_8cc</filename>
    <includes id="_random_w_p_mobility_8h" name="RandomWPMobility.h" local="yes" imported="no">RandomWPMobility.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(RandomWPMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomWPMobility.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_random_w_p_mobility_8h</filename>
    <includes id="_line_segments_mobility_base_8h" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
  </compound>
  <compound kind="file">
    <name>ReassemblyBuffer.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_reassembly_buffer_8cc</filename>
    <includes id="_reassembly_buffer_8h" name="ReassemblyBuffer.h" local="yes" imported="no">ReassemblyBuffer.h</includes>
  </compound>
  <compound kind="file">
    <name>ReassemblyBuffer.h</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_reassembly_buffer_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>RectangleMobility.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_rectangle_mobility_8cc</filename>
    <includes id="_rectangle_mobility_8h" name="RectangleMobility.h" local="yes" imported="no">RectangleMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(RectangleMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RectangleMobility.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_rectangle_mobility_8h</filename>
    <includes id="_basic_mobility_8h" name="BasicMobility.h" local="yes" imported="no">BasicMobility.h</includes>
  </compound>
  <compound kind="file">
    <name>REDQueue.cc</name>
    <path>D:/home/INET-svn/Network/Queue/</path>
    <filename>_r_e_d_queue_8cc</filename>
    <includes id="_r_e_d_queue_8h" name="REDQueue.h" local="yes" imported="no">REDQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(REDQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>REDQueue.h</name>
    <path>D:/home/INET-svn/Network/Queue/</path>
    <filename>_r_e_d_queue_8h</filename>
    <includes id="_passive_queue_base_8h" name="PassiveQueueBase.h" local="yes" imported="no">PassiveQueueBase.h</includes>
  </compound>
  <compound kind="file">
    <name>reports.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>reports_8cc</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(SenderReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a1</anchor>
      <arglist>(ReceptionReport)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>reports.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>reports_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
  </compound>
  <compound kind="file">
    <name>RouterLSA.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>_router_l_s_a_8cc</filename>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
  </compound>
  <compound kind="file">
    <name>RoutingTable.cc</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_routing_table_8cc</filename>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
    <includes id="_routing_table_parser_8h" name="RoutingTableParser.h" local="yes" imported="no">RoutingTableParser.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(RoutingTable)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os, const RoutingEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RoutingTable.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_routing_table_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <member kind="typedef">
      <type>std::vector&lt; MulticastRoute &gt;</type>
      <name>MulticastRoutes</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RoutingTable6.cc</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_routing_table6_8cc</filename>
    <includes id="opp__utils_8h" name="opp_utils.h" local="yes" imported="no">opp_utils.h</includes>
    <includes id="_routing_table6_8h" name="RoutingTable6.h" local="yes" imported="no">RoutingTable6.h</includes>
    <includes id="_i_pv6_interface_data_8h" name="IPv6InterfaceData.h" local="yes" imported="no">IPv6InterfaceData.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(RoutingTable6)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os, const IPv6Route &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os, const RoutingTable6::DestCacheEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RoutingTable6.h</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_routing_table6_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv6_address_8h" name="IPv6Address.h" local="yes" imported="no">IPv6Address.h</includes>
    <includes id="_interface_table_8h" name="InterfaceTable.h" local="yes" imported="no">InterfaceTable.h</includes>
  </compound>
  <compound kind="file">
    <name>RoutingTable6Access.h</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>_routing_table6_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_routing_table6_8h" name="RoutingTable6.h" local="yes" imported="no">RoutingTable6.h</includes>
  </compound>
  <compound kind="file">
    <name>RoutingTableAccess.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_routing_table_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
  </compound>
  <compound kind="file">
    <name>RoutingTableParser.cc</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_routing_table_parser_8cc</filename>
    <includes id="_routing_table_parser_8h" name="RoutingTableParser.h" local="yes" imported="no">RoutingTableParser.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <member kind="variable">
      <type>const int</type>
      <name>MAX_FILESIZE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAX_ENTRY_STRING_SIZE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>IFCONFIG_START_TOKEN</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>IFCONFIG_END_TOKEN</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ROUTE_START_TOKEN</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ROUTE_END_TOKEN</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RoutingTableParser.h</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>_routing_table_parser_8h</filename>
    <includes id="_routing_table_8h" name="RoutingTable.h" local="yes" imported="no">RoutingTable.h</includes>
  </compound>
  <compound kind="file">
    <name>RSVP.cc</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p_8cc</filename>
    <includes id="_r_s_v_p_8h" name="RSVP.h" local="yes" imported="no">RSVP.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="common_8h" name="common.h" local="yes" imported="no">common.h</includes>
    <includes id="_r_s_v_p___t_e_2_utils_8h" name="RSVP_TE/Utils.h" local="yes" imported="no">Utils.h</includes>
    <includes id="_x_m_l_utils_8h" name="XMLUtils.h" local="yes" imported="no">XMLUtils.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_t_e_d_access_8h" name="TEDAccess.h" local="yes" imported="no">TEDAccess.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_l_i_b_table_access_8h" name="LIBTableAccess.h" local="yes" imported="no">LIBTableAccess.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>PSB_REFRESH_INTERVAL</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RSB_REFRESH_INTERVAL</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PSB_TIMEOUT_INTERVAL</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RSB_TIMEOUT_INTERVAL</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_ERR_UNFEASIBLE</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_ERR_PREEMPTED</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_ERR_NEXTHOP_FAILED</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a7</anchor>
      <arglist>(RSVP)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a8</anchor>
      <arglist>(const SessionObj_t &amp;a, const SessionObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a9</anchor>
      <arglist>(const SessionObj_t &amp;a, const SessionObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a10</anchor>
      <arglist>(const FilterSpecObj_t &amp;a, const FilterSpecObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a11</anchor>
      <arglist>(const FilterSpecObj_t &amp;a, const FilterSpecObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a12</anchor>
      <arglist>(const SenderTemplateObj_t &amp;a, const SenderTemplateObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a13</anchor>
      <arglist>(const SenderTemplateObj_t &amp;a, const SenderTemplateObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a14</anchor>
      <arglist>(std::ostream &amp;os, const FlowSpecObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a15</anchor>
      <arglist>(std::ostream &amp;os, const SessionObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a16</anchor>
      <arglist>(std::ostream &amp;os, const SenderTemplateObj_t &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVP.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p_8h</filename>
    <includes id="_i_scriptable_8h" name="IScriptable.h" local="yes" imported="no">IScriptable.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <includes id="_r_s_v_p_path_msg_8h" name="RSVPPathMsg.h" local="yes" imported="no">RSVPPathMsg.h</includes>
    <includes id="_r_s_v_p_resv_msg_8h" name="RSVPResvMsg.h" local="yes" imported="no">RSVPResvMsg.h</includes>
    <includes id="_r_s_v_p_hello_msg_8h" name="RSVPHelloMsg.h" local="yes" imported="no">RSVPHelloMsg.h</includes>
    <includes id="_signalling_msg__m_8h" name="SignallingMsg_m.h" local="yes" imported="no">SignallingMsg_m.h</includes>
    <includes id="_i_r_s_v_p_classifier_8h" name="IRSVPClassifier.h" local="yes" imported="no">IRSVPClassifier.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a0</anchor>
      <arglist>(const SessionObj_t &amp;a, const SessionObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a1</anchor>
      <arglist>(const SessionObj_t &amp;a, const SessionObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a2</anchor>
      <arglist>(const FilterSpecObj_t &amp;a, const FilterSpecObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a3</anchor>
      <arglist>(const FilterSpecObj_t &amp;a, const FilterSpecObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a4</anchor>
      <arglist>(const SenderTemplateObj_t &amp;a, const SenderTemplateObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a5</anchor>
      <arglist>(const SenderTemplateObj_t &amp;a, const SenderTemplateObj_t &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(std::ostream &amp;os, const SessionObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os, const SenderTemplateObj_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(std::ostream &amp;os, const FlowSpecObj_t &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVPAccess.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_r_s_v_p_8h" name="RSVP.h" local="yes" imported="no">RSVP.h</includes>
  </compound>
  <compound kind="file">
    <name>RSVPHello_m.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p_hello__m_8h</filename>
    <includes id="_r_s_v_p_packet_8h" name="RSVPPacket.h" local="yes" imported="no">RSVPPacket.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVPHelloMsg.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p_hello_msg_8h</filename>
    <includes id="_r_s_v_p_hello__m_8h" name="RSVPHello_m.h" local="yes" imported="no">RSVPHello_m.h</includes>
  </compound>
  <compound kind="file">
    <name>RSVPPacket.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p_packet_8h</filename>
    <includes id="_r_s_v_p_packet__m_8h" name="RSVPPacket_m.h" local="yes" imported="no">RSVPPacket_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RSVP_TRAFFIC</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVPPacket_m.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p_packet__m_8h</filename>
    <includes id="_int_serv__m_8h" name="IntServ_m.h" local="yes" imported="no">IntServ_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_MESSAGE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESV_MESSAGE</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PTEAR_MESSAGE</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTEAR_MESSAGE</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PERROR_MESSAGE</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RERROR_MESSAGE</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HELLO_MESSAGE</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a8</anchor>
      <arglist>(cCommBuffer *b, RSVPMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a9</anchor>
      <arglist>(cCommBuffer *b, RSVPMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVPPathMsg.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p_path_msg_8h</filename>
    <includes id="_r_s_v_p_path_msg__m_8h" name="RSVPPathMsg_m.h" local="yes" imported="no">RSVPPathMsg_m.h</includes>
  </compound>
  <compound kind="file">
    <name>RSVPPathMsg_m.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p_path_msg__m_8h</filename>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <includes id="_r_s_v_p_packet_8h" name="RSVPPacket.h" local="yes" imported="no">RSVPPacket.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVPResvMsg.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p_resv_msg_8h</filename>
    <includes id="_r_s_v_p_resv_msg__m_8h" name="RSVPResvMsg_m.h" local="yes" imported="no">RSVPResvMsg_m.h</includes>
  </compound>
  <compound kind="file">
    <name>RSVPResvMsg_m.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p_resv_msg__m_8h</filename>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <includes id="_r_s_v_p_packet_8h" name="RSVPPacket.h" local="yes" imported="no">RSVPPacket.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTCPEndsystemModule.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_c_p_endsystem_module_8cc</filename>
    <includes id="_transport_2_r_t_p_2tmp_2defs_8h" name="Transport/RTP/tmp/defs.h" local="yes" imported="no">tmp/defs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_c_p_endsystem_module_8h" name="RTCPEndsystemModule.h" local="yes" imported="no">RTCPEndsystemModule.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <includes id="_r_t_p_sender_info_8h" name="RTPSenderInfo.h" local="yes" imported="no">RTPSenderInfo.h</includes>
    <includes id="_r_t_p_receiver_info_8h" name="RTPReceiverInfo.h" local="yes" imported="no">RTPReceiverInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module_Like</name>
      <anchor>a0</anchor>
      <arglist>(RTCPEndsystemModule, RTCPModule)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTCPEndsystemModule.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_c_p_endsystem_module_8h</filename>
    <includes id="_transport_2_r_t_p_2tmp_2defs_8h" name="Transport/RTP/tmp/defs.h" local="yes" imported="no">tmp/defs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <includes id="_r_t_p_sender_info_8h" name="RTPSenderInfo.h" local="yes" imported="no">RTPSenderInfo.h</includes>
    <includes id="_r_t_p_receiver_info_8h" name="RTPReceiverInfo.h" local="yes" imported="no">RTPReceiverInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>RTCPPacket.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_c_p_packet_8cc</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_c_p_packet_8h" name="RTCPPacket.h" local="yes" imported="no">RTCPPacket.h</includes>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
    <includes id="sdes_8h" name="sdes.h" local="yes" imported="no">sdes.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(RTCPPacket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a1</anchor>
      <arglist>(RTCPReceiverReportPacket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a2</anchor>
      <arglist>(RTCPSenderReportPacket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a3</anchor>
      <arglist>(RTCPSDESPacket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a4</anchor>
      <arglist>(RTCPByePacket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a5</anchor>
      <arglist>(RTCPCompoundPacket)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTCPPacket.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_c_p_packet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
    <includes id="sdes_8h" name="sdes.h" local="yes" imported="no">sdes.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPApplication.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_application_8cc</filename>
    <includes id="_transport_2_r_t_p_2tmp_2defs_8h" name="Transport/RTP/tmp/defs.h" local="yes" imported="no">tmp/defs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_application_8h" name="RTPApplication.h" local="yes" imported="no">RTPApplication.h</includes>
    <includes id="_r_t_p_interface_packet_8h" name="RTPInterfacePacket.h" local="yes" imported="no">RTPInterfacePacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(RTPApplication) void RTPApplication</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPApplication.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_application_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPAVProfile.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_8cc</filename>
    <includes id="_r_t_p_a_v_profile_8h" name="RTPAVProfile.h" local="yes" imported="no">RTPAVProfile.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module_Like</name>
      <anchor>a0</anchor>
      <arglist>(RTPAVProfile, RTPProfile)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPAVProfile.h</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_r_t_p_profile_8h" name="RTPProfile.h" local="yes" imported="no">RTPProfile.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload10Receiver.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_payload10_receiver_8cc</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_a_v_profile_payload10_receiver_8h" name="RTPAVProfilePayload10Receiver.h" local="yes" imported="no">RTPAVProfilePayload10Receiver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module_Like</name>
      <anchor>a0</anchor>
      <arglist>(RTPAVProfilePayload10Receiver, RTPPayloadReceiver)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload10Receiver.h</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_payload10_receiver_8h</filename>
    <includes id="_r_t_p_payload_receiver_8h" name="RTPPayloadReceiver.h" local="yes" imported="no">RTPPayloadReceiver.h</includes>
    <includes id="_r_t_p_a_v_profile_sample_based_audio_receiver_8h" name="RTPAVProfileSampleBasedAudioReceiver.h" local="yes" imported="no">RTPAVProfileSampleBasedAudioReceiver.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload10Sender.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_payload10_sender_8cc</filename>
    <includes id="_r_t_p_sender_control_message_8h" name="RTPSenderControlMessage.h" local="yes" imported="no">RTPSenderControlMessage.h</includes>
    <includes id="_r_t_p_a_v_profile_payload10_sender_8h" name="RTPAVProfilePayload10Sender.h" local="yes" imported="no">RTPAVProfilePayload10Sender.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module_Like</name>
      <anchor>a0</anchor>
      <arglist>(RTPAVProfilePayload10Sender, RTPPayloadSender)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload10Sender.h</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_payload10_sender_8h</filename>
    <includes id="_r_t_p_payload_sender_8h" name="RTPPayloadSender.h" local="yes" imported="no">RTPPayloadSender.h</includes>
    <includes id="_r_t_p_a_v_profile_sample_based_audio_sender_8h" name="RTPAVProfileSampleBasedAudioSender.h" local="yes" imported="no">RTPAVProfileSampleBasedAudioSender.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload32Receiver.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_payload32_receiver_8cc</filename>
    <includes id="_r_t_p_payload_receiver_8h" name="RTPPayloadReceiver.h" local="yes" imported="no">RTPPayloadReceiver.h</includes>
    <includes id="_r_t_p_a_v_profile_payload32_receiver_8h" name="RTPAVProfilePayload32Receiver.h" local="yes" imported="no">RTPAVProfilePayload32Receiver.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <includes id="_r_t_p_mpeg_packet_8h" name="RTPMpegPacket.h" local="yes" imported="no">RTPMpegPacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module_Like</name>
      <anchor>a0</anchor>
      <arglist>(RTPAVProfilePayload32Receiver, RTPPayloadReceiver)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload32Receiver.h</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_payload32_receiver_8h</filename>
    <includes id="_r_t_p_payload_receiver_8h" name="RTPPayloadReceiver.h" local="yes" imported="no">RTPPayloadReceiver.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload32Sender.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_payload32_sender_8cc</filename>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_a_v_profile_payload32_sender_8h" name="RTPAVProfilePayload32Sender.h" local="yes" imported="no">RTPAVProfilePayload32Sender.h</includes>
    <includes id="_r_t_p_mpeg_packet_8h" name="RTPMpegPacket.h" local="yes" imported="no">RTPMpegPacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module_Like</name>
      <anchor>a0</anchor>
      <arglist>(RTPAVProfilePayload32Sender, RTPPayloadSender)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPAVProfilePayload32Sender.h</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_payload32_sender_8h</filename>
    <includes id="_r_t_p_payload_sender_8h" name="RTPPayloadSender.h" local="yes" imported="no">RTPPayloadSender.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPAVProfileSampleBasedAudioReceiver.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_sample_based_audio_receiver_8cc</filename>
    <includes id="_r_t_p_a_v_profile_sample_based_audio_receiver_8h" name="RTPAVProfileSampleBasedAudioReceiver.h" local="yes" imported="no">RTPAVProfileSampleBasedAudioReceiver.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module_Like</name>
      <anchor>a0</anchor>
      <arglist>(RTPAVProfileSampleBasedAudioReceiver, RTPPayloadReceiver)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPAVProfileSampleBasedAudioReceiver.h</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_sample_based_audio_receiver_8h</filename>
    <includes id="_r_t_p_payload_receiver_8h" name="RTPPayloadReceiver.h" local="yes" imported="no">RTPPayloadReceiver.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPAVProfileSampleBasedAudioSender.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_sample_based_audio_sender_8cc</filename>
    <includes id="_r_t_p_a_v_profile_sample_based_audio_sender_8h" name="RTPAVProfileSampleBasedAudioSender.h" local="yes" imported="no">RTPAVProfileSampleBasedAudioSender.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module_Like</name>
      <anchor>a0</anchor>
      <arglist>(RTPAVProfileSampleBasedAudioSender, RTPPayloadSender)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPAVProfileSampleBasedAudioSender.h</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_a_v_profile_sample_based_audio_sender_8h</filename>
    <includes id="_r_t_p_payload_sender_8h" name="RTPPayloadSender.h" local="yes" imported="no">RTPPayloadSender.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPEndsystemModule.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_endsystem_module_8cc</filename>
    <includes id="_transport_2_r_t_p_2tmp_2defs_8h" name="Transport/RTP/tmp/defs.h" local="yes" imported="no">tmp/defs.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_r_t_p_endsystem_module_8h" name="RTPEndsystemModule.h" local="yes" imported="no">RTPEndsystemModule.h</includes>
    <includes id="_r_t_p_interface_packet_8h" name="RTPInterfacePacket.h" local="yes" imported="no">RTPInterfacePacket.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_profile_8h" name="RTPProfile.h" local="yes" imported="no">RTPProfile.h</includes>
    <includes id="_r_t_p_sender_control_message_8h" name="RTPSenderControlMessage.h" local="yes" imported="no">RTPSenderControlMessage.h</includes>
    <includes id="_r_t_p_sender_status_message_8h" name="RTPSenderStatusMessage.h" local="yes" imported="no">RTPSenderStatusMessage.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module_Like</name>
      <anchor>a0</anchor>
      <arglist>(RTPEndsystemModule, RTPModule)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPEndsystemModule.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_endsystem_module_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_transport_2_r_t_p_2tmp_2defs_8h" name="Transport/RTP/tmp/defs.h" local="yes" imported="no">tmp/defs.h</includes>
    <includes id="_r_t_p_interface_packet_8h" name="RTPInterfacePacket.h" local="yes" imported="no">RTPInterfacePacket.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPInnerPacket.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_inner_packet_8cc</filename>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(RTPInnerPacket)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPInnerPacket.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_inner_packet_8h</filename>
    <includes id="_transport_2_r_t_p_2tmp_2defs_8h" name="Transport/RTP/tmp/defs.h" local="yes" imported="no">tmp/defs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <includes id="_r_t_p_sender_control_message_8h" name="RTPSenderControlMessage.h" local="yes" imported="no">RTPSenderControlMessage.h</includes>
    <includes id="_r_t_p_sender_status_message_8h" name="RTPSenderStatusMessage.h" local="yes" imported="no">RTPSenderStatusMessage.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPInterfacePacket.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_interface_packet_8cc</filename>
    <includes id="_r_t_p_interface_packet_8h" name="RTPInterfacePacket.h" local="yes" imported="no">RTPInterfacePacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(RTPInterfacePacket)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPInterfacePacket.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_interface_packet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_transport_2_r_t_p_2tmp_2defs_8h" name="Transport/RTP/tmp/defs.h" local="yes" imported="no">tmp/defs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_sender_control_message_8h" name="RTPSenderControlMessage.h" local="yes" imported="no">RTPSenderControlMessage.h</includes>
    <includes id="_r_t_p_sender_status_message_8h" name="RTPSenderStatusMessage.h" local="yes" imported="no">RTPSenderStatusMessage.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPMpegPacket.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_mpeg_packet_8cc</filename>
    <includes id="_r_t_p_mpeg_packet_8h" name="RTPMpegPacket.h" local="yes" imported="no">RTPMpegPacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(RTPMpegPacket)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPMpegPacket.h</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>_r_t_p_mpeg_packet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPPacket.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_packet_8cc</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(RTPPacket)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPPacket.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_packet_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPParticipantInfo.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_participant_info_8cc</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(RTPParticipantInfo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPParticipantInfo.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_participant_info_8h</filename>
    <includes id="_transport_2_r_t_p_2tmp_2defs_8h" name="Transport/RTP/tmp/defs.h" local="yes" imported="no">tmp/defs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <includes id="_r_t_c_p_packet_8h" name="RTCPPacket.h" local="yes" imported="no">RTCPPacket.h</includes>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
    <includes id="sdes_8h" name="sdes.h" local="yes" imported="no">sdes.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPPayloadReceiver.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_payload_receiver_8cc</filename>
    <includes id="_r_t_p_payload_receiver_8h" name="RTPPayloadReceiver.h" local="yes" imported="no">RTPPayloadReceiver.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(RTPPayloadReceiver)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPPayloadReceiver.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_payload_receiver_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_r_t_p_packet_8h" name="RTPPacket.h" local="yes" imported="no">RTPPacket.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPPayloadSender.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_payload_sender_8cc</filename>
    <includes id="_r_t_p_payload_sender_8h" name="RTPPayloadSender.h" local="yes" imported="no">RTPPayloadSender.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(RTPPayloadSender)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPPayloadSender.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_payload_sender_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPProfile.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_profile_8cc</filename>
    <includes id="_r_t_p_profile_8h" name="RTPProfile.h" local="yes" imported="no">RTPProfile.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_payload_sender_8h" name="RTPPayloadSender.h" local="yes" imported="no">RTPPayloadSender.h</includes>
    <includes id="_r_t_p_payload_receiver_8h" name="RTPPayloadReceiver.h" local="yes" imported="no">RTPPayloadReceiver.h</includes>
    <includes id="_r_t_p_s_s_r_c_gate_8h" name="RTPSSRCGate.h" local="yes" imported="no">RTPSSRCGate.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(RTPProfile)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPProfile.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_profile_8h</filename>
    <includes id="_transport_2_r_t_p_2tmp_2defs_8h" name="Transport/RTP/tmp/defs.h" local="yes" imported="no">tmp/defs.h</includes>
    <includes id="_r_t_p_inner_packet_8h" name="RTPInnerPacket.h" local="yes" imported="no">RTPInnerPacket.h</includes>
    <includes id="_r_t_p_s_s_r_c_gate_8h" name="RTPSSRCGate.h" local="yes" imported="no">RTPSSRCGate.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPReceiverInfo.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_receiver_info_8cc</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_receiver_info_8h" name="RTPReceiverInfo.h" local="yes" imported="no">RTPReceiverInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(RTPReceiverInfo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPReceiverInfo.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_receiver_info_8h</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPSenderControlMessage.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_sender_control_message_8cc</filename>
    <includes id="_r_t_p_sender_control_message_8h" name="RTPSenderControlMessage.h" local="yes" imported="no">RTPSenderControlMessage.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPSenderControlMessage.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_sender_control_message_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPSenderInfo.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_sender_info_8cc</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_sender_info_8h" name="RTPSenderInfo.h" local="yes" imported="no">RTPSenderInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(RTPSenderInfo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPSenderInfo.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_sender_info_8h</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <includes id="reports_8h" name="reports.h" local="yes" imported="no">reports.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPSenderStatusMessage.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_sender_status_message_8cc</filename>
    <includes id="_r_t_p_sender_status_message_8h" name="RTPSenderStatusMessage.h" local="yes" imported="no">RTPSenderStatusMessage.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPSenderStatusMessage.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_sender_status_message_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
  </compound>
  <compound kind="file">
    <name>RTPSSRCGate.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_s_s_r_c_gate_8cc</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="_r_t_p_s_s_r_c_gate_8h" name="RTPSSRCGate.h" local="yes" imported="no">RTPSSRCGate.h</includes>
    <includes id="_r_t_p_participant_info_8h" name="RTPParticipantInfo.h" local="yes" imported="no">RTPParticipantInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(RTPSSRCGate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RTPSSRCGate.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>_r_t_p_s_s_r_c_gate_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
  </compound>
  <compound kind="file">
    <name>ScenarioManager.cc</name>
    <path>D:/home/INET-svn/World/</path>
    <filename>_scenario_manager_8cc</filename>
    <includes id="_scenario_manager_8h" name="ScenarioManager.h" local="yes" imported="no">ScenarioManager.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(ScenarioManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScenarioManager.h</name>
    <path>D:/home/INET-svn/World/</path>
    <filename>_scenario_manager_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_scriptable_8h" name="IScriptable.h" local="yes" imported="no">IScriptable.h</includes>
  </compound>
  <compound kind="file">
    <name>sdes.cc</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>sdes_8cc</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <includes id="sdes_8h" name="sdes.h" local="yes" imported="no">sdes.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(SDESItem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a1</anchor>
      <arglist>(SDESChunk)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sdes.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>sdes_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
  </compound>
  <compound kind="file">
    <name>SignallingMsg_m.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_signalling_msg__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_PSB_TIMER</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_PSB_TIMEOUT</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_RSB_REFRESH_TIMER</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_RSB_COMMIT_TIMER</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_RSB_TIMEOUT</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_HELLO_TIMER</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_HELLO_TIMEOUT</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_PATH_NOTIFY</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_CREATED</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_UNFEASIBLE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_FAILED</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_PREEMPTED</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATH_RETRY</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a14</anchor>
      <arglist>(cCommBuffer *b, SignallingMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a15</anchor>
      <arglist>(cCommBuffer *b, SignallingMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a16</anchor>
      <arglist>(cCommBuffer *b, PsbTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a17</anchor>
      <arglist>(cCommBuffer *b, PsbTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a18</anchor>
      <arglist>(cCommBuffer *b, PsbTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a19</anchor>
      <arglist>(cCommBuffer *b, PsbTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a20</anchor>
      <arglist>(cCommBuffer *b, RsbRefreshTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a21</anchor>
      <arglist>(cCommBuffer *b, RsbRefreshTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a22</anchor>
      <arglist>(cCommBuffer *b, RsbCommitTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a23</anchor>
      <arglist>(cCommBuffer *b, RsbCommitTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a24</anchor>
      <arglist>(cCommBuffer *b, RsbTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a25</anchor>
      <arglist>(cCommBuffer *b, RsbTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a26</anchor>
      <arglist>(cCommBuffer *b, HelloTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a27</anchor>
      <arglist>(cCommBuffer *b, HelloTimerMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a28</anchor>
      <arglist>(cCommBuffer *b, HelloTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a29</anchor>
      <arglist>(cCommBuffer *b, HelloTimeoutMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a30</anchor>
      <arglist>(cCommBuffer *b, PathNotifyMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a31</anchor>
      <arglist>(cCommBuffer *b, PathNotifyMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleClassifier.cc</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_simple_classifier_8cc</filename>
    <includes id="_simple_classifier_8h" name="SimpleClassifier.h" local="yes" imported="no">SimpleClassifier.h</includes>
    <includes id="_x_m_l_utils_8h" name="XMLUtils.h" local="yes" imported="no">XMLUtils.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_l_i_b_table_access_8h" name="LIBTableAccess.h" local="yes" imported="no">LIBTableAccess.h</includes>
    <includes id="_r_s_v_p_access_8h" name="RSVPAccess.h" local="yes" imported="no">RSVPAccess.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(SimpleClassifier)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os, const SimpleClassifier::FECEntry &amp;fec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleClassifier.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_simple_classifier_8h</filename>
    <includes id="_const_type_8h" name="ConstType.h" local="yes" imported="no">ConstType.h</includes>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <includes id="_i_p_datagram_8h" name="IPDatagram.h" local="yes" imported="no">IPDatagram.h</includes>
    <includes id="_i_scriptable_8h" name="IScriptable.h" local="yes" imported="no">IScriptable.h</includes>
    <includes id="_i_r_s_v_p_classifier_8h" name="IRSVPClassifier.h" local="yes" imported="no">IRSVPClassifier.h</includes>
    <includes id="_l_i_b_table_8h" name="LIBTable.h" local="yes" imported="no">LIBTable.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
  </compound>
  <compound kind="file">
    <name>Sink.cc</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>_sink_8cc</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(Sink)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SnrControlInfo_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MFCore/</path>
    <filename>_snr_control_info__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_snr_list_8h" name="SnrList.h" local="yes" imported="no">SnrList.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, SnrControlInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, SnrControlInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SnrDecider.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/decider/</path>
    <filename>_snr_decider_8cc</filename>
    <includes id="_snr_decider_8h" name="SnrDecider.h" local="yes" imported="no">SnrDecider.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(SnrDecider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SnrDecider.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/decider/</path>
    <filename>_snr_decider_8h</filename>
    <includes id="_basic_decider_8h" name="BasicDecider.h" local="no" imported="no">BasicDecider.h</includes>
  </compound>
  <compound kind="file">
    <name>SnrEval.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/snrEval/</path>
    <filename>_snr_eval_8cc</filename>
    <includes id="_snr_eval_8h" name="SnrEval.h" local="yes" imported="no">SnrEval.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(SnrEval)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SnrEval.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/snrEval/</path>
    <filename>_snr_eval_8h</filename>
    <includes id="_basic_snr_eval_8h" name="BasicSnrEval.h" local="yes" imported="no">BasicSnrEval.h</includes>
    <includes id="_radio_state_8h" name="RadioState.h" local="yes" imported="no">RadioState.h</includes>
    <includes id="_phy_control_info__m_8h" name="PhyControlInfo_m.h" local="yes" imported="no">PhyControlInfo_m.h</includes>
  </compound>
  <compound kind="file">
    <name>SnrEval80211.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/snrEval/</path>
    <filename>_snr_eval80211_8cc</filename>
    <includes id="_snr_eval80211_8h" name="SnrEval80211.h" local="yes" imported="no">SnrEval80211.h</includes>
    <includes id="_consts80211_8h" name="Consts80211.h" local="yes" imported="no">Consts80211.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">AirFrame_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(SnrEval80211)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SnrEval80211.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/snrEval/</path>
    <filename>_snr_eval80211_8h</filename>
    <includes id="_snr_eval_8h" name="SnrEval.h" local="yes" imported="no">SnrEval.h</includes>
  </compound>
  <compound kind="file">
    <name>SnrList.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MFCore/</path>
    <filename>_snr_list_8h</filename>
    <member kind="typedef">
      <type>std::list&lt; SnrListEntry &gt;</type>
      <name>SnrList</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SocketInterfacePacket.h</name>
    <path>D:/home/INET-svn/Transport/RTP/tmp/</path>
    <filename>_socket_interface_packet_8h</filename>
    <includes id="sockets_8h" name="sockets.h" local="yes" imported="no">sockets.h</includes>
  </compound>
  <compound kind="file">
    <name>sockets.h</name>
    <path>D:/home/INET-svn/Transport/RTP/tmp/</path>
    <filename>sockets_8h</filename>
    <includes id="pcb_8h" name="pcb.h" local="yes" imported="no">pcb.h</includes>
    <member kind="function">
      <type>PCB *</type>
      <name>_createPCB</name>
      <anchor>a0</anchor>
      <arglist>(Socket::Protocol proto)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SummaryLSA.cc</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>_summary_l_s_a_8cc</filename>
    <includes id="_l_s_a_8h" name="LSA.h" local="yes" imported="no">LSA.h</includes>
  </compound>
  <compound kind="file">
    <name>TCP.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_8cc</filename>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_c_m_p_message__m_8h" name="ICMPMessage_m.h" local="yes" imported="no">ICMPMessage_m.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_START</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_END</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a2</anchor>
      <arglist>(TCP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCP.h</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>tcpEV</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>tcpEV2</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>testingEV</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPAlgorithm.h</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_algorithm_8h</filename>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPBaseAlg.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_t_c_p_base_alg_8cc</filename>
    <includes id="_t_c_p_base_alg_8h" name="TCPBaseAlg.h" local="yes" imported="no">TCPBaseAlg.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>DELAYED_ACK_TIMEOUT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_REXMIT_COUNT</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_REXMIT_TIMEOUT</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_REXMIT_TIMEOUT</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPBaseAlg.h</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_t_c_p_base_alg_8h</filename>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPBasicClientApp.cc</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_basic_client_app_8cc</filename>
    <includes id="_t_c_p_basic_client_app_8h" name="TCPBasicClientApp.h" local="yes" imported="no">TCPBasicClientApp.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_CONNECT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_SEND</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a2</anchor>
      <arglist>(TCPBasicClientApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPBasicClientApp.h</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_basic_client_app_8h</filename>
    <includes id="_t_c_p_generic_cli_app_base_8h" name="TCPGenericCliAppBase.h" local="yes" imported="no">TCPGenericCliAppBase.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPCommand_m.h</name>
    <path>D:/home/INET-svn/Transport/Contract/</path>
    <filename>_t_c_p_command__m_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TcpCommandCode</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_OPEN_ACTIVE</name>
      <anchor>a28a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_OPEN_PASSIVE</name>
      <anchor>a28a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_SEND</name>
      <anchor>a28a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_CLOSE</name>
      <anchor>a28a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_ABORT</name>
      <anchor>a28a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_C_STATUS</name>
      <anchor>a28a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TcpStatusInd</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_DATA</name>
      <anchor>a29a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_URGENT_DATA</name>
      <anchor>a29a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_ESTABLISHED</name>
      <anchor>a29a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_PEER_CLOSED</name>
      <anchor>a29a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_CLOSED</name>
      <anchor>a29a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_CONNECTION_REFUSED</name>
      <anchor>a29a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_CONNECTION_RESET</name>
      <anchor>a29a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_TIMED_OUT</name>
      <anchor>a29a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_I_STATUS</name>
      <anchor>a29a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TCPErrorCode</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a16</anchor>
      <arglist>(cCommBuffer *b, TCPCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a17</anchor>
      <arglist>(cCommBuffer *b, TCPCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a18</anchor>
      <arglist>(cCommBuffer *b, TCPErrorInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a19</anchor>
      <arglist>(cCommBuffer *b, TCPErrorInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a20</anchor>
      <arglist>(cCommBuffer *b, TCPOpenCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a21</anchor>
      <arglist>(cCommBuffer *b, TCPOpenCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a22</anchor>
      <arglist>(cCommBuffer *b, TCPSendCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a23</anchor>
      <arglist>(cCommBuffer *b, TCPSendCommand &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a24</anchor>
      <arglist>(cCommBuffer *b, TCPConnectInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a25</anchor>
      <arglist>(cCommBuffer *b, TCPConnectInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a26</anchor>
      <arglist>(cCommBuffer *b, TCPStatusInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a27</anchor>
      <arglist>(cCommBuffer *b, TCPStatusInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPConnection.h</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_connection_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_CONN_ESTAB</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_FIN_WAIT_2</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_2MSL</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_SYN_REXMIT</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_TIMEOUT_SYN_REXMIT_MAX</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqLess</name>
      <anchor>a36</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqLE</name>
      <anchor>a37</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqGreater</name>
      <anchor>a38</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seqGE</name>
      <anchor>a39</anchor>
      <arglist>(uint32 a, uint32 b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_SYN_REXMIT_COUNT</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TcpState</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_INIT</name>
      <anchor>a40a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSED</name>
      <anchor>a40a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_LISTEN</name>
      <anchor>a40a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_SYN_SENT</name>
      <anchor>a40a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_SYN_RCVD</name>
      <anchor>a40a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_ESTABLISHED</name>
      <anchor>a40a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSE_WAIT</name>
      <anchor>a40a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_LAST_ACK</name>
      <anchor>a40a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_FIN_WAIT_1</name>
      <anchor>a40a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_FIN_WAIT_2</name>
      <anchor>a40a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_CLOSING</name>
      <anchor>a40a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_S_TIME_WAIT</name>
      <anchor>a40a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TCPEventCode</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_IGNORE</name>
      <anchor>a41a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_OPEN_ACTIVE</name>
      <anchor>a41a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_OPEN_PASSIVE</name>
      <anchor>a41a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_SEND</name>
      <anchor>a41a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_CLOSE</name>
      <anchor>a41a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_ABORT</name>
      <anchor>a41a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_STATUS</name>
      <anchor>a41a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_DATA</name>
      <anchor>a41a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_ACK</name>
      <anchor>a41a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_SYN</name>
      <anchor>a41a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_SYN_ACK</name>
      <anchor>a41a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_FIN</name>
      <anchor>a41a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_FIN_ACK</name>
      <anchor>a41a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_RST</name>
      <anchor>a41a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_RCV_UNEXP_SYN</name>
      <anchor>a41a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_2MSL</name>
      <anchor>a41a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_CONN_ESTAB</name>
      <anchor>a41a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP_E_TIMEOUT_FIN_WAIT_2</name>
      <anchor>a41a35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPConnectionBase.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_connection_base_8cc</filename>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
    <includes id="_t_c_p_receive_queue_8h" name="TCPReceiveQueue.h" local="yes" imported="no">TCPReceiveQueue.h</includes>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPConnectionEventProc.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_connection_event_proc_8cc</filename>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
    <includes id="_t_c_p_receive_queue_8h" name="TCPReceiveQueue.h" local="yes" imported="no">TCPReceiveQueue.h</includes>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPConnectionRcvSegment.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_connection_rcv_segment_8cc</filename>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
    <includes id="_t_c_p_receive_queue_8h" name="TCPReceiveQueue.h" local="yes" imported="no">TCPReceiveQueue.h</includes>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPConnectionUtil.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_connection_util_8cc</filename>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
    <includes id="_t_c_p_receive_queue_8h" name="TCPReceiveQueue.h" local="yes" imported="no">TCPReceiveQueue.h</includes>
    <includes id="_t_c_p_algorithm_8h" name="TCPAlgorithm.h" local="yes" imported="no">TCPAlgorithm.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchor>a1</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchor>a2</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPDoc.h</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_doc_8h</filename>
  </compound>
  <compound kind="file">
    <name>TCPDump.cc</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>_t_c_p_dump_8cc</filename>
    <includes id="_t_c_p_dump_8h" name="TCPDump.h" local="yes" imported="no">TCPDump.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(TCPDump)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPDump.h</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>_t_c_p_dump_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <includes id="_i_p_datagram__m_8h" name="IPDatagram_m.h" local="yes" imported="no">IPDatagram_m.h</includes>
    <includes id="_i_pv6_datagram__m_8h" name="IPv6Datagram_m.h" local="yes" imported="no">IPv6Datagram_m.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPEchoApp.cc</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_echo_app_8cc</filename>
    <includes id="_t_c_p_echo_app_8h" name="TCPEchoApp.h" local="yes" imported="no">TCPEchoApp.h</includes>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(TCPEchoApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPEchoApp.h</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_echo_app_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPGenericCliAppBase.cc</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_generic_cli_app_base_8cc</filename>
    <includes id="_t_c_p_generic_cli_app_base_8h" name="TCPGenericCliAppBase.h" local="yes" imported="no">TCPGenericCliAppBase.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <includes id="_generic_app_msg__m_8h" name="GenericAppMsg_m.h" local="yes" imported="no">GenericAppMsg_m.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPGenericCliAppBase.h</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_generic_cli_app_base_8h</filename>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPGenericSrvApp.cc</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_generic_srv_app_8cc</filename>
    <includes id="_t_c_p_generic_srv_app_8h" name="TCPGenericSrvApp.h" local="yes" imported="no">TCPGenericSrvApp.h</includes>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_generic_app_msg__m_8h" name="GenericAppMsg_m.h" local="yes" imported="no">GenericAppMsg_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(TCPGenericSrvApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPGenericSrvApp.h</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_generic_srv_app_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPGenericSrvThread.cc</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_generic_srv_thread_8cc</filename>
    <includes id="_t_c_p_generic_srv_thread_8h" name="TCPGenericSrvThread.h" local="yes" imported="no">TCPGenericSrvThread.h</includes>
    <includes id="_generic_app_msg__m_8h" name="GenericAppMsg_m.h" local="yes" imported="no">GenericAppMsg_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(TCPGenericSrvThread)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPGenericSrvThread.h</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_generic_srv_thread_8h</filename>
    <includes id="_t_c_p_srv_host_app_8h" name="TCPSrvHostApp.h" local="yes" imported="no">TCPSrvHostApp.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPMsgBasedRcvQueue.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/queues/</path>
    <filename>_t_c_p_msg_based_rcv_queue_8cc</filename>
    <includes id="_t_c_p_msg_based_rcv_queue_8h" name="TCPMsgBasedRcvQueue.h" local="yes" imported="no">TCPMsgBasedRcvQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(TCPMsgBasedRcvQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPMsgBasedRcvQueue.h</name>
    <path>D:/home/INET-svn/Transport/TCP/queues/</path>
    <filename>_t_c_p_msg_based_rcv_queue_8h</filename>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_virtual_data_rcv_queue_8h" name="TCPVirtualDataRcvQueue.h" local="yes" imported="no">TCPVirtualDataRcvQueue.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPMsgBasedSendQueue.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/queues/</path>
    <filename>_t_c_p_msg_based_send_queue_8cc</filename>
    <includes id="_t_c_p_msg_based_send_queue_8h" name="TCPMsgBasedSendQueue.h" local="yes" imported="no">TCPMsgBasedSendQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(TCPMsgBasedSendQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPMsgBasedSendQueue.h</name>
    <path>D:/home/INET-svn/Transport/TCP/queues/</path>
    <filename>_t_c_p_msg_based_send_queue_8h</filename>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPNoCongestionControl.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_t_c_p_no_congestion_control_8cc</filename>
    <includes id="_t_c_p_no_congestion_control_8h" name="TCPNoCongestionControl.h" local="yes" imported="no">TCPNoCongestionControl.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(TCPNoCongestionControl)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPNoCongestionControl.h</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_t_c_p_no_congestion_control_8h</filename>
    <includes id="_t_c_p_base_alg_8h" name="TCPBaseAlg.h" local="yes" imported="no">TCPBaseAlg.h</includes>
    <member kind="typedef">
      <type>TCPBaseAlgStateVariables</type>
      <name>TCPNoCongestionControlStateVariables</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPReceiveQueue.h</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_receive_queue_8h</filename>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPReno.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_t_c_p_reno_8cc</filename>
    <includes id="_t_c_p_reno_8h" name="TCPReno.h" local="yes" imported="no">TCPReno.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(TCPReno)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPReno.h</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_t_c_p_reno_8h</filename>
    <includes id="_t_c_p_tahoe_reno_family_8h" name="TCPTahoeRenoFamily.h" local="yes" imported="no">TCPTahoeRenoFamily.h</includes>
    <member kind="typedef">
      <type>TCPTahoeRenoFamilyStateVariables</type>
      <name>TCPRenoStateVariables</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSegment.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_segment_8cc</filename>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(TCPSegment)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSegment.h</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_segment_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_t_c_p_segment__m_8h" name="TCPSegment_m.h" local="yes" imported="no">TCPSegment_m.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPSegment_m.h</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_segment__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCP_HEADER_OCTETS</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cMessage *</type>
      <name>cMessagePtr</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;os, cMessagePtr msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b, TCPPayloadMessage &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b, TCPPayloadMessage &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSendQueue.h</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>_t_c_p_send_queue_8h</filename>
    <includes id="_t_c_p_connection_8h" name="TCPConnection.h" local="yes" imported="no">TCPConnection.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPSessionApp.cc</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_session_app_8cc</filename>
    <includes id="_t_c_p_session_app_8h" name="TCPSessionApp.h" local="yes" imported="no">TCPSessionApp.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(TCPSessionApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSessionApp.h</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_session_app_8h</filename>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPSinkApp.cc</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_sink_app_8cc</filename>
    <includes id="_t_c_p_sink_app_8h" name="TCPSinkApp.h" local="yes" imported="no">TCPSinkApp.h</includes>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(TCPSinkApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSinkApp.h</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_sink_app_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPSocket.cc</name>
    <path>D:/home/INET-svn/Transport/Contract/</path>
    <filename>_t_c_p_socket_8cc</filename>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSocket.h</name>
    <path>D:/home/INET-svn/Transport/Contract/</path>
    <filename>_t_c_p_socket_8h</filename>
    <includes id="_t_c_p_command__m_8h" name="TCPCommand_m.h" local="yes" imported="no">TCPCommand_m.h</includes>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPSocketMap.cc</name>
    <path>D:/home/INET-svn/Transport/Contract/</path>
    <filename>_t_c_p_socket_map_8cc</filename>
    <includes id="_t_c_p_socket_map_8h" name="TCPSocketMap.h" local="yes" imported="no">TCPSocketMap.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPSocketMap.h</name>
    <path>D:/home/INET-svn/Transport/Contract/</path>
    <filename>_t_c_p_socket_map_8h</filename>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPSpoof.cc</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_spoof_8cc</filename>
    <includes id="_t_c_p_spoof_8h" name="TCPSpoof.h" local="yes" imported="no">TCPSpoof.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(TCPSpoof)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSpoof.h</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_spoof_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPSrvHostApp.cc</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_srv_host_app_8cc</filename>
    <includes id="_t_c_p_srv_host_app_8h" name="TCPSrvHostApp.h" local="yes" imported="no">TCPSrvHostApp.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(TCPSrvHostApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPSrvHostApp.h</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_t_c_p_srv_host_app_8h</filename>
    <includes id="_t_c_p_socket_8h" name="TCPSocket.h" local="yes" imported="no">TCPSocket.h</includes>
    <includes id="_t_c_p_socket_map_8h" name="TCPSocketMap.h" local="yes" imported="no">TCPSocketMap.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPTahoe.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_t_c_p_tahoe_8cc</filename>
    <includes id="_t_c_p_tahoe_8h" name="TCPTahoe.h" local="yes" imported="no">TCPTahoe.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(TCPTahoe)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPTahoe.h</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_t_c_p_tahoe_8h</filename>
    <includes id="_t_c_p_tahoe_reno_family_8h" name="TCPTahoeRenoFamily.h" local="yes" imported="no">TCPTahoeRenoFamily.h</includes>
    <member kind="typedef">
      <type>TCPTahoeRenoFamilyStateVariables</type>
      <name>TCPTahoeStateVariables</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPTahoeRenoFamily.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_t_c_p_tahoe_reno_family_8cc</filename>
    <includes id="_t_c_p_tahoe_reno_family_8h" name="TCPTahoeRenoFamily.h" local="yes" imported="no">TCPTahoeRenoFamily.h</includes>
    <includes id="_t_c_p_8h" name="TCP.h" local="yes" imported="no">TCP.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPTahoeRenoFamily.h</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>_t_c_p_tahoe_reno_family_8h</filename>
    <includes id="_t_c_p_base_alg_8h" name="TCPBaseAlg.h" local="yes" imported="no">TCPBaseAlg.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPVirtualDataRcvQueue.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/queues/</path>
    <filename>_t_c_p_virtual_data_rcv_queue_8cc</filename>
    <includes id="_t_c_p_virtual_data_rcv_queue_8h" name="TCPVirtualDataRcvQueue.h" local="yes" imported="no">TCPVirtualDataRcvQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(TCPVirtualDataRcvQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPVirtualDataRcvQueue.h</name>
    <path>D:/home/INET-svn/Transport/TCP/queues/</path>
    <filename>_t_c_p_virtual_data_rcv_queue_8h</filename>
    <includes id="_t_c_p_segment_8h" name="TCPSegment.h" local="yes" imported="no">TCPSegment.h</includes>
    <includes id="_t_c_p_receive_queue_8h" name="TCPReceiveQueue.h" local="yes" imported="no">TCPReceiveQueue.h</includes>
  </compound>
  <compound kind="file">
    <name>TCPVirtualDataSendQueue.cc</name>
    <path>D:/home/INET-svn/Transport/TCP/queues/</path>
    <filename>_t_c_p_virtual_data_send_queue_8cc</filename>
    <includes id="_t_c_p_virtual_data_send_queue_8h" name="TCPVirtualDataSendQueue.h" local="yes" imported="no">TCPVirtualDataSendQueue.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(TCPVirtualDataSendQueue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPVirtualDataSendQueue.h</name>
    <path>D:/home/INET-svn/Transport/TCP/queues/</path>
    <filename>_t_c_p_virtual_data_send_queue_8h</filename>
    <includes id="_t_c_p_send_queue_8h" name="TCPSendQueue.h" local="yes" imported="no">TCPSendQueue.h</includes>
  </compound>
  <compound kind="file">
    <name>TED.cc</name>
    <path>D:/home/INET-svn/Network/TED/</path>
    <filename>_t_e_d_8cc</filename>
    <includes id="_t_e_d_8h" name="TED.h" local="yes" imported="no">TED.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv4_interface_data_8h" name="IPv4InterfaceData.h" local="yes" imported="no">IPv4InterfaceData.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
    <includes id="_routing_table_access_8h" name="RoutingTableAccess.h" local="yes" imported="no">RoutingTableAccess.h</includes>
    <includes id="_interface_table_access_8h" name="InterfaceTableAccess.h" local="yes" imported="no">InterfaceTableAccess.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LS_INFINITY</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a1</anchor>
      <arglist>(TED)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os, const TELinkStateInfo &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TED.h</name>
    <path>D:/home/INET-svn/Network/TED/</path>
    <filename>_t_e_d_8h</filename>
    <includes id="_t_e_d__m_8h" name="TED_m.h" local="yes" imported="no">TED_m.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(std::ostream &amp;os, const TELinkStateInfo &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TED_m.h</name>
    <path>D:/home/INET-svn/Network/TED/</path>
    <filename>_t_e_d__m_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LINK_STATE_MESSAGE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; struct TELinkStateInfo &gt;</type>
      <name>TELinkStateInfoVector</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b, TELinkStateInfo &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b, TELinkStateInfo &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b, TEDChangeInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b, TEDChangeInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TEDAccess.h</name>
    <path>D:/home/INET-svn/Network/TED/</path>
    <filename>_t_e_d_access_8h</filename>
    <includes id="_module_access_8h" name="ModuleAccess.h" local="yes" imported="no">ModuleAccess.h</includes>
    <includes id="_t_e_d_8h" name="TED.h" local="yes" imported="no">TED.h</includes>
  </compound>
  <compound kind="file">
    <name>TelnetApp.cc</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_telnet_app_8cc</filename>
    <includes id="_telnet_app_8h" name="TelnetApp.h" local="yes" imported="no">TelnetApp.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_CONNECT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_SEND</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSGKIND_CLOSE</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a3</anchor>
      <arglist>(TelnetApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TelnetApp.h</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>_telnet_app_8h</filename>
    <includes id="_t_c_p_generic_cli_app_base_8h" name="TCPGenericCliAppBase.h" local="yes" imported="no">TCPGenericCliAppBase.h</includes>
  </compound>
  <compound kind="file">
    <name>ThruputMeter.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/PPP/</path>
    <filename>_thruput_meter_8cc</filename>
    <includes id="_thruput_meter_8h" name="ThruputMeter.h" local="yes" imported="no">ThruputMeter.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(ThruputMeter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThruputMeter.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/PPP/</path>
    <filename>_thruput_meter_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>ThruputMeteringChannel.cc</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>_thruput_metering_channel_8cc</filename>
    <includes id="_thruput_metering_channel_8h" name="ThruputMeteringChannel.h" local="yes" imported="no">ThruputMeteringChannel.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchor>a0</anchor>
      <arglist>(ThruputMeteringChannel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThruputMeteringChannel.h</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>_thruput_metering_channel_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>TransmComplete_m.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MFCore/</path>
    <filename>_transm_complete__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, TransmComplete &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, TransmComplete &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TurtleMobility.cc</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_turtle_mobility_8cc</filename>
    <includes id="_turtle_mobility_8h" name="TurtleMobility.h" local="yes" imported="no">TurtleMobility.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(TurtleMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TurtleMobility.h</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>_turtle_mobility_8h</filename>
    <includes id="_line_segments_mobility_base_8h" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
  </compound>
  <compound kind="file">
    <name>TxNotifDetails.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Contract/</path>
    <filename>_tx_notif_details_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>types_8h</filename>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>u_int8</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>u_int16</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed int</type>
      <name>int32</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>u_int32</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>u_int64</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDP.cc</name>
    <path>D:/home/INET-svn/Transport/UDP/</path>
    <filename>_u_d_p_8cc</filename>
    <includes id="_u_d_p_packet_8h" name="UDPPacket.h" local="yes" imported="no">UDPPacket.h</includes>
    <includes id="_transport_2_u_d_p_2_u_d_p_8h" name="Transport/UDP/UDP.h" local="yes" imported="no">UDP.h</includes>
    <includes id="_i_p_control_info_8h" name="IPControlInfo.h" local="yes" imported="no">IPControlInfo.h</includes>
    <includes id="_i_pv6_control_info_8h" name="IPv6ControlInfo.h" local="yes" imported="no">IPv6ControlInfo.h</includes>
    <includes id="_i_c_m_p_access_8h" name="ICMPAccess.h" local="yes" imported="no">ICMPAccess.h</includes>
    <includes id="_i_c_m_pv6_access_8h" name="ICMPv6Access.h" local="yes" imported="no">ICMPv6Access.h</includes>
    <includes id="_i_c_m_p_message__m_8h" name="ICMPMessage_m.h" local="yes" imported="no">ICMPMessage_m.h</includes>
    <includes id="_i_c_m_pv6_message__m_8h" name="ICMPv6Message_m.h" local="yes" imported="no">ICMPv6Message_m.h</includes>
    <includes id="_i_p_datagram__m_8h" name="IPDatagram_m.h" local="yes" imported="no">IPDatagram_m.h</includes>
    <includes id="_i_pv6_datagram__m_8h" name="IPv6Datagram_m.h" local="yes" imported="no">IPv6Datagram_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_START</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_END</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a2</anchor>
      <arglist>(UDP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport/UDP/UDP.h</name>
    <path>D:/home/INET-svn/Transport/UDP/</path>
    <filename>_transport_2_u_d_p_2_u_d_p_8h</filename>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <member kind="variable">
      <type>const char *</type>
      <name>ERROR_IP_ADDRESS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UDP_HEADER_BYTES</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Util/HeaderSerializers/headers/UDP.h</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/headers/</path>
    <filename>_util_2_header_serializers_2headers_2_u_d_p_8h</filename>
  </compound>
  <compound kind="file">
    <name>UDPAppBase.cc</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_app_base_8cc</filename>
    <includes id="_u_d_p_app_base_8h" name="UDPAppBase.h" local="yes" imported="no">UDPAppBase.h</includes>
    <includes id="_u_d_p_socket_8h" name="UDPSocket.h" local="yes" imported="no">UDPSocket.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
  </compound>
  <compound kind="file">
    <name>UDPAppBase.h</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_app_base_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>UDPBasicApp.cc</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_basic_app_8cc</filename>
    <includes id="_u_d_p_basic_app_8h" name="UDPBasicApp.h" local="yes" imported="no">UDPBasicApp.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(UDPBasicApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPBasicApp.h</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_basic_app_8h</filename>
    <includes id="_u_d_p_app_base_8h" name="UDPAppBase.h" local="yes" imported="no">UDPAppBase.h</includes>
  </compound>
  <compound kind="file">
    <name>UDPControlInfo_m.h</name>
    <path>D:/home/INET-svn/Transport/Contract/</path>
    <filename>_u_d_p_control_info__m_8h</filename>
    <includes id="_i_pv_x_address_8h" name="IPvXAddress.h" local="yes" imported="no">IPvXAddress.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDPCommandCode</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_C_DATA</name>
      <anchor>a9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_C_BIND</name>
      <anchor>a9a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_C_CONNECT</name>
      <anchor>a9a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_C_UNBIND</name>
      <anchor>a9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDPStatusInd</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_I_DATA</name>
      <anchor>a10a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_I_ERROR</name>
      <anchor>a10a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a7</anchor>
      <arglist>(cCommBuffer *b, UDPControlInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a8</anchor>
      <arglist>(cCommBuffer *b, UDPControlInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPEchoApp.cc</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_echo_app_8cc</filename>
    <includes id="_u_d_p_echo_app_8h" name="UDPEchoApp.h" local="yes" imported="no">UDPEchoApp.h</includes>
    <includes id="_u_d_p_echo_app_msg__m_8h" name="UDPEchoAppMsg_m.h" local="yes" imported="no">UDPEchoAppMsg_m.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(UDPEchoApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPEchoApp.h</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_echo_app_8h</filename>
    <includes id="_u_d_p_basic_app_8h" name="UDPBasicApp.h" local="yes" imported="no">UDPBasicApp.h</includes>
  </compound>
  <compound kind="file">
    <name>UDPEchoAppMsg_m.h</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_echo_app_msg__m_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, UDPEchoAppMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, UDPEchoAppMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPPacket.h</name>
    <path>D:/home/INET-svn/Transport/UDP/</path>
    <filename>_u_d_p_packet_8h</filename>
    <includes id="_u_d_p_packet__m_8h" name="UDPPacket_m.h" local="yes" imported="no">UDPPacket_m.h</includes>
  </compound>
  <compound kind="file">
    <name>UDPPacket_m.h</name>
    <path>D:/home/INET-svn/Transport/UDP/</path>
    <filename>_u_d_p_packet__m_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b, UDPPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b, UDPPacket &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPSerializer.cc</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/</path>
    <filename>_u_d_p_serializer_8cc</filename>
    <includes id="_util_2_header_serializers_2headers_2defs_8h" name="Util/HeaderSerializers/headers/defs.h" local="yes" imported="no">headers/defs.h</includes>
    <includes id="bsdint_8h" name="bsdint.h" local="yes" imported="no">headers/bsdint.h</includes>
    <includes id="in_8h" name="in.h" local="yes" imported="no">headers/in.h</includes>
    <includes id="in__systm_8h" name="in_systm.h" local="yes" imported="no">headers/in_systm.h</includes>
    <includes id="_util_2_header_serializers_2headers_2_u_d_p_8h" name="Util/HeaderSerializers/headers/UDP.h" local="yes" imported="no">headers/udp.h</includes>
    <includes id="_u_d_p_serializer_8h" name="UDPSerializer.h" local="yes" imported="no">UDPSerializer.h</includes>
    <namespace>INETFw</namespace>
    <class kind="struct">INETFw::in_addr</class>
  </compound>
  <compound kind="file">
    <name>UDPSerializer.h</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/</path>
    <filename>_u_d_p_serializer_8h</filename>
    <includes id="_u_d_p_packet_8h" name="UDPPacket.h" local="yes" imported="no">UDPPacket.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__UDPPSERIALIZER_H_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPSink.cc</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_sink_8cc</filename>
    <includes id="_u_d_p_sink_8h" name="UDPSink.h" local="yes" imported="no">UDPSink.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(UDPSink)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPSink.h</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_sink_8h</filename>
    <includes id="_u_d_p_app_base_8h" name="UDPAppBase.h" local="yes" imported="no">UDPAppBase.h</includes>
  </compound>
  <compound kind="file">
    <name>UDPSocket.cc</name>
    <path>D:/home/INET-svn/Transport/Contract/</path>
    <filename>_u_d_p_socket_8cc</filename>
    <includes id="_u_d_p_socket_8h" name="UDPSocket.h" local="yes" imported="no">UDPSocket.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPSocket.h</name>
    <path>D:/home/INET-svn/Transport/Contract/</path>
    <filename>_u_d_p_socket_8h</filename>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
  </compound>
  <compound kind="file">
    <name>UDPVideoStreamCli.cc</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_video_stream_cli_8cc</filename>
    <includes id="_u_d_p_video_stream_cli_8h" name="UDPVideoStreamCli.h" local="yes" imported="no">UDPVideoStreamCli.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(UDPVideoStreamCli)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPVideoStreamCli.h</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_video_stream_cli_8h</filename>
    <includes id="_u_d_p_app_base_8h" name="UDPAppBase.h" local="yes" imported="no">UDPAppBase.h</includes>
  </compound>
  <compound kind="file">
    <name>UDPVideoStreamSvr.cc</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_video_stream_svr_8cc</filename>
    <includes id="_u_d_p_video_stream_svr_8h" name="UDPVideoStreamSvr.h" local="yes" imported="no">UDPVideoStreamSvr.h</includes>
    <includes id="_u_d_p_control_info__m_8h" name="UDPControlInfo_m.h" local="yes" imported="no">UDPControlInfo_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchor>a0</anchor>
      <arglist>(UDPVideoStreamSvr)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;out, const UDPVideoStreamSvr::VideoStreamData &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UDPVideoStreamSvr.h</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>_u_d_p_video_stream_svr_8h</filename>
    <includes id="_u_d_p_app_base_8h" name="UDPAppBase.h" local="yes" imported="no">UDPAppBase.h</includes>
  </compound>
  <compound kind="file">
    <name>RSVP_TE/Utils.cc</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p___t_e_2_utils_8cc</filename>
    <includes id="_r_s_v_p___t_e_2_utils_8h" name="RSVP_TE/Utils.h" local="yes" imported="no">Utils.h</includes>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <member kind="function">
      <type>void</type>
      <name>removeDuplicates</name>
      <anchor>a0</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodepos</name>
      <anchor>a1</anchor>
      <arglist>(const EroVector &amp;ERO, IPAddress node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>find</name>
      <anchor>a2</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;vec, int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>find</name>
      <anchor>a3</anchor>
      <arglist>(const IPAddressVector &amp;vec, IPAddress addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchor>a4</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;dest, const std::vector&lt; int &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>payloadOwner</name>
      <anchor>a5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nterfaces/Ethernet/Utils.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>nterfaces_2_ethernet_2_utils_8cc</filename>
    <includes id="nterfaces_2_ethernet_2_utils_8h" name="nterfaces/Ethernet/Utils.h" local="yes" imported="no">utils.h</includes>
    <member kind="function">
      <type>char *</type>
      <name>fgetline</name>
      <anchor>a0</anchor>
      <arglist>(FILE *fp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSVP_TE/Utils.h</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>_r_s_v_p___t_e_2_utils_8h</filename>
    <includes id="_int_serv_8h" name="IntServ.h" local="yes" imported="no">IntServ.h</includes>
    <member kind="function">
      <type>void</type>
      <name>removeDuplicates</name>
      <anchor>a0</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>find</name>
      <anchor>a1</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;vec, int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>find</name>
      <anchor>a2</anchor>
      <arglist>(const IPAddressVector &amp;vec, IPAddress addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchor>a3</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;dest, const std::vector&lt; int &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodepos</name>
      <anchor>a4</anchor>
      <arglist>(const EroVector &amp;ERO, IPAddress node)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>payloadOwner</name>
      <anchor>a5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nterfaces/Ethernet/Utils.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>nterfaces_2_ethernet_2_utils_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MAX_LINE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>fgetline</name>
      <anchor>a1</anchor>
      <arglist>(FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;out, const MessageId &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WirelessMacBase.cc</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MFCore/</path>
    <filename>_wireless_mac_base_8cc</filename>
    <includes id="_wireless_mac_base_8h" name="WirelessMacBase.h" local="yes" imported="no">WirelessMacBase.h</includes>
    <includes id="_notification_board_8h" name="NotificationBoard.h" local="yes" imported="no">NotificationBoard.h</includes>
  </compound>
  <compound kind="file">
    <name>WirelessMacBase.h</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MFCore/</path>
    <filename>_wireless_mac_base_8h</filename>
    <includes id="_i_n_e_t_defs_8h" name="INETDefs.h" local="yes" imported="no">INETDefs.h</includes>
    <includes id="_notifier_consts_8h" name="NotifierConsts.h" local="yes" imported="no">NotifierConsts.h</includes>
  </compound>
  <compound kind="file">
    <name>XMLUtils.cc</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>_x_m_l_utils_8cc</filename>
    <includes id="_x_m_l_utils_8h" name="XMLUtils.h" local="yes" imported="no">XMLUtils.h</includes>
    <includes id="_i_p_address_resolver_8h" name="IPAddressResolver.h" local="yes" imported="no">IPAddressResolver.h</includes>
    <member kind="function">
      <type>const cXMLElement *</type>
      <name>getUniqueChild</name>
      <anchor>a0</anchor>
      <arglist>(const cXMLElement *node, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const cXMLElement *</type>
      <name>getUniqueChildIfExists</name>
      <anchor>a1</anchor>
      <arglist>(const cXMLElement *node, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseBool</name>
      <anchor>a2</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkTags</name>
      <anchor>a3</anchor>
      <arglist>(const cXMLElement *node, const char *allowed)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParameterStrValue</name>
      <anchor>a4</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, const char *def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParameterBoolValue</name>
      <anchor>a5</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, bool def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParameterBoolValue</name>
      <anchor>a6</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParameterStrValue</name>
      <anchor>a7</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParameterIntValue</name>
      <anchor>a8</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, int def)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParameterIntValue</name>
      <anchor>a9</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getParameterIPAddressValue</name>
      <anchor>a10</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, IPAddress def)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getParameterIPAddressValue</name>
      <anchor>a11</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParameterDoubleValue</name>
      <anchor>a12</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, double def)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParameterDoubleValue</name>
      <anchor>a13</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XMLUtils.h</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>_x_m_l_utils_8h</filename>
    <includes id="_i_p_address_8h" name="IPAddress.h" local="yes" imported="no">IPAddress.h</includes>
    <member kind="function">
      <type>const cXMLElement *</type>
      <name>getUniqueChild</name>
      <anchor>a0</anchor>
      <arglist>(const cXMLElement *node, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const cXMLElement *</type>
      <name>getUniqueChildIfExists</name>
      <anchor>a1</anchor>
      <arglist>(const cXMLElement *node, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkTags</name>
      <anchor>a2</anchor>
      <arglist>(const cXMLElement *node, const char *allowed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParameterBoolValue</name>
      <anchor>a3</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, bool def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParameterBoolValue</name>
      <anchor>a4</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParameterIntValue</name>
      <anchor>a5</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParameterIntValue</name>
      <anchor>a6</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, int def)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParameterStrValue</name>
      <anchor>a7</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParameterStrValue</name>
      <anchor>a8</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, const char *def)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getParameterIPAddressValue</name>
      <anchor>a9</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getParameterIPAddressValue</name>
      <anchor>a10</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, IPAddress def)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParameterDoubleValue</name>
      <anchor>a11</anchor>
      <arglist>(const cXMLElement *ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParameterDoubleValue</name>
      <anchor>a12</anchor>
      <arglist>(const cXMLElement *ptr, const char *name, double def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseBool</name>
      <anchor>a13</anchor>
      <arglist>(const char *text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractQueue</name>
    <filename>class_abstract_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractQueue</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractQueue</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>arrival</name>
      <anchor>z14_0</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cMessage *</type>
      <name>arrivalWhenIdle</name>
      <anchor>z14_1</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>startService</name>
      <anchor>z14_2</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>endService</name>
      <anchor>z14_3</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>queue</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>msgServiced</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>endServiceMsg</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractRadio</name>
    <filename>class_abstract_radio.html</filename>
    <base>ChannelAccess</base>
    <member kind="function">
      <type></type>
      <name>AbstractRadio</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractRadio</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AirFrame *, double &gt;</type>
      <name>RecvBuff</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchor>b3</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchor>b5</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchor>b6</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgEnd</name>
      <anchor>b7</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bufferMsg</name>
      <anchor>b8</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AirFrame *</type>
      <name>unbufferMsg</name>
      <anchor>b9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchor>b10</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchor>b11</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>encapsulatePacket</name>
      <anchor>b12</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setRadioState</name>
      <anchor>b13</anchor>
      <arglist>(RadioState::State newState)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>channelNumber</name>
      <anchor>b14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addNewSnr</name>
      <anchor>b15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>createAirFrame</name>
      <anchor>b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changeChannel</name>
      <anchor>b17</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBitrate</name>
      <anchor>b18</anchor>
      <arglist>(double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual IReceptionModel *</type>
      <name>createReceptionModel</name>
      <anchor>b19</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual IRadioModel *</type>
      <name>createRadioModel</name>
      <anchor>b20</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IRadioModel *</type>
      <name>radioModel</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IReceptionModel *</type>
      <name>receptionModel</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>transmitterPower</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnrStruct</type>
      <name>snrInfo</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RecvBuff</type>
      <name>recvBuff</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState</type>
      <name>rs</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>newChannel</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>newBitrate</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>noiseLevel</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>thermalNoise</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchor>z125_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateIn</name>
      <anchor>z125_1</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">AbstractRadio::SnrStruct</class>
  </compound>
  <compound kind="struct">
    <name>AbstractRadio::SnrStruct</name>
    <filename>struct_abstract_radio_1_1_snr_struct.html</filename>
    <member kind="variable">
      <type>AirFrame *</type>
      <name>ptr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rcvdPower</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SnrList</type>
      <name>sList</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AirFrame</name>
    <filename>class_air_frame.html</filename>
    <member kind="function">
      <type></type>
      <name>AirFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirFrame</name>
      <anchor>a1</anchor>
      <arglist>(const AirFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AirFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AirFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const AirFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPSend</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPSend</name>
      <anchor>a8</anchor>
      <arglist>(double pSend_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelNumber</name>
      <anchor>a10</anchor>
      <arglist>(int channelNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDuration</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDuration</name>
      <anchor>a12</anchor>
      <arglist>(double duration_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBitrate</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitrate</name>
      <anchor>a14</anchor>
      <arglist>(double bitrate_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getSenderPos</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getSenderPos</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderPos</name>
      <anchor>a17</anchor>
      <arglist>(const Coord &amp;senderPos_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const AirFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pSend_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>senderPos_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANSimMobility</name>
    <filename>class_a_n_sim_mobility.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractDataFrom</name>
      <anchor>b2</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeId</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>nextPosChange</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ARP</name>
    <filename>class_a_r_p.html</filename>
    <member kind="typedef">
      <type>std::map&lt; IPAddress, ARPCacheEntry * &gt;</type>
      <name>ARPCache</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; cMessage * &gt;</type>
      <name>MsgPtrVector</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ARP</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ARP</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processOutboundPacket</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPacketToNIC</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *msg, InterfaceEntry *ie, const MACAddress &amp;macAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initiateARPResolution</name>
      <anchor>b5</anchor>
      <arglist>(ARPCacheEntry *entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendARPRequest</name>
      <anchor>b6</anchor>
      <arglist>(InterfaceEntry *ie, IPAddress ipAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>requestTimedOut</name>
      <anchor>b7</anchor>
      <arglist>(cMessage *selfmsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addressRecognized</name>
      <anchor>b8</anchor>
      <arglist>(IPAddress destAddr, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processARPPacket</name>
      <anchor>b9</anchor>
      <arglist>(ARPPacket *arp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateARPCache</name>
      <anchor>b10</anchor>
      <arglist>(ARPCacheEntry *entry, const MACAddress &amp;macAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dumpARPPacket</name>
      <anchor>b11</anchor>
      <arglist>(ARPPacket *arp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>retryTimeout</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>retryCount</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>cacheTimeout</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>doProxyARP</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numResolutions</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numFailedResolutions</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numRequestsSent</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numRepliesSent</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ARPCache</type>
      <name>arpCache</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>pendingQueue</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingTable *</type>
      <name>rt</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ARP::ARPCacheEntry</class>
  </compound>
  <compound kind="struct">
    <name>ARP::ARPCacheEntry</name>
    <filename>struct_a_r_p_1_1_a_r_p_cache_entry.html</filename>
    <member kind="variable">
      <type>InterfaceEntry *</type>
      <name>ie</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>pending</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MACAddress</type>
      <name>macAddress</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastUpdate</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRetries</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>timer</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MsgPtrVector</type>
      <name>pendingPackets</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ARPCache::iterator</type>
      <name>myIter</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ARPPacket</name>
    <filename>class_a_r_p_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>ARPPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ARPPacket</name>
      <anchor>a1</anchor>
      <arglist>(const ARPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ARPPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ARPPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ARPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOpcode</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpcode</name>
      <anchor>a8</anchor>
      <arglist>(int opcode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getSrcMACAddress</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getSrcMACAddress</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcMACAddress</name>
      <anchor>a11</anchor>
      <arglist>(const MACAddress &amp;srcMACAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getDestMACAddress</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getDestMACAddress</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestMACAddress</name>
      <anchor>a14</anchor>
      <arglist>(const MACAddress &amp;destMACAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getSrcIPAddress</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getSrcIPAddress</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcIPAddress</name>
      <anchor>a17</anchor>
      <arglist>(const IPAddress &amp;srcIPAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getDestIPAddress</name>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getDestIPAddress</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestIPAddress</name>
      <anchor>a20</anchor>
      <arglist>(const IPAddress &amp;destIPAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const ARPPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>opcode_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>srcMACAddress_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>destMACAddress_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>srcIPAddress_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>destIPAddress_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicDecider</name>
    <filename>class_basic_decider.html</filename>
    <base>BasicModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>a1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>z109_0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchor>z109_1</anchor>
      <arglist>(AirFrame *, SnrList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchor>z111_0</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchor>z106_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowergateIn</name>
      <anchor>z106_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numRcvd</name>
      <anchor>z107_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numSentUp</name>
      <anchor>z107_1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicDSCPClassifier</name>
    <filename>class_basic_d_s_c_p_classifier.html</filename>
    <base>IQoSClassifier</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numQueues</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>classifyPacket</name>
      <anchor>a1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>classifyByDSCP</name>
      <anchor>d0</anchor>
      <arglist>(int dscp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicMobility</name>
    <filename>class_basic_mobility.html</filename>
    <base>BasicModule</base>
    <member kind="enumeration">
      <name>BorderPolicy</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFLECT</name>
      <anchor>w4w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRAP</name>
      <anchor>w4w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLACERANDOMLY</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RAISEERROR</name>
      <anchor>w4w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePosition</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeX</name>
      <anchor>b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeY</name>
      <anchor>b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getRandomPosition</name>
      <anchor>b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectIfOutside</name>
      <anchor>b8</anchor>
      <arglist>(Coord &amp;targetPos, Coord &amp;step, double &amp;angle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wrapIfOutside</name>
      <anchor>b9</anchor>
      <arglist>(Coord &amp;targetPos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeRandomlyIfOutside</name>
      <anchor>b10</anchor>
      <arglist>(Coord &amp;targetPos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>raiseErrorIfOutside</name>
      <anchor>b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleIfOutside</name>
      <anchor>b12</anchor>
      <arglist>(BorderPolicy policy, Coord &amp;targetPos, Coord &amp;step, double &amp;angle)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelControl *</type>
      <name>cc</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelControl::HostRef</type>
      <name>myHostRef</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>hostPtr</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>pos</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicModule</name>
    <filename>class_basic_module.html</filename>
    <base>INotifiable</base>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>findHost</name>
      <anchor>b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>getLogName</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>logName</name>
      <anchor>b4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b5</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>loggingName</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicSnrEval</name>
    <filename>class_basic_snr_eval.html</filename>
    <base>ChannelAccess</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcDuration</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>channelNumber</name>
      <anchor>b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchor>z114_0</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>z114_1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchor>z114_2</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgEnd</name>
      <anchor>z114_3</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bufferMsg</name>
      <anchor>z116_0</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AirFrame *</type>
      <name>unbufferMsg</name>
      <anchor>z116_1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchor>z116_2</anchor>
      <arglist>(AirFrame *, SnrList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchor>z116_3</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>encapsMsg</name>
      <anchor>z116_4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>createCapsulePkt</name>
      <anchor>z118_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>transmitterPower</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchor>z112_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateIn</name>
      <anchor>z112_1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Blackboard</name>
    <filename>class_blackboard.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; BlackboardAccess * &gt;</type>
      <name>SubscriberVector</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BBItem *</type>
      <name>BBItemRef</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Blackboard</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Blackboard</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BBItemRef</type>
      <name>publish</name>
      <anchor>z16_0</anchor>
      <arglist>(const char *label, cPolymorphic *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>withdraw</name>
      <anchor>z16_1</anchor>
      <arglist>(BBItemRef bbItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changed</name>
      <anchor>z16_2</anchor>
      <arglist>(BBItemRef bbItem, cPolymorphic *item=NULL)</arglist>
    </member>
    <member kind="function">
      <type>BBItemRef</type>
      <name>subscribe</name>
      <anchor>z18_0</anchor>
      <arglist>(BlackboardAccess *bbClient, const char *label)</arglist>
    </member>
    <member kind="function">
      <type>BBItemRef</type>
      <name>find</name>
      <anchor>z18_1</anchor>
      <arglist>(const char *label)</arglist>
    </member>
    <member kind="function">
      <type>BBItemRef</type>
      <name>subscribe</name>
      <anchor>z18_2</anchor>
      <arglist>(BlackboardAccess *bbClient, BBItemRef bbItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsubscribe</name>
      <anchor>z18_3</anchor>
      <arglist>(BlackboardAccess *bbClient, BBItemRef bbItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerClient</name>
      <anchor>z18_4</anchor>
      <arglist>(BlackboardAccess *bbClient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeClient</name>
      <anchor>z18_5</anchor>
      <arglist>(BlackboardAccess *bbClient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBlackboardContent</name>
      <anchor>z18_6</anchor>
      <arglist>(BlackboardAccess *bbClient)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchor>z18_7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchor>z18_8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, BBItem * &gt;</type>
      <name>ContentsMap</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ContentsMap</type>
      <name>contents</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SubscriberVector</type>
      <name>registeredClients</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Iterator</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">Blackboard::BBItem</class>
    <class kind="class">Blackboard::iterator</class>
  </compound>
  <compound kind="class">
    <name>Blackboard::BBItem</name>
    <filename>class_blackboard_1_1_b_b_item.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>label</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPolymorphic *</type>
      <name>data</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const cPolymorphic *</type>
      <name>data</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cPolymorphic *</type>
      <name>_item</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>_label</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SubscriberVector</type>
      <name>subscribers</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Blackboard</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Blackboard::iterator</name>
    <filename>class_blackboard_1_1iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchor>a0</anchor>
      <arglist>(ContentsMap::iterator it0)</arglist>
    </member>
    <member kind="function">
      <type>BBItemRef</type>
      <name>operator *</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>operator++</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator++</name>
      <anchor>a3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>operator--</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator--</name>
      <anchor>a5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a6</anchor>
      <arglist>(const iterator &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a7</anchor>
      <arglist>(const iterator &amp;i2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ContentsMap::iterator</type>
      <name>it</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BlackboardAccess</name>
    <filename>class_blackboard_access.html</filename>
    <member kind="function">
      <type></type>
      <name>BlackboardAccess</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BlackboardAccess</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Blackboard *</type>
      <name>blackboard</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>blackboardItemChanged</name>
      <anchor>z20_0</anchor>
      <arglist>(BBItemRef item)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>blackboardItemPublished</name>
      <anchor>z20_1</anchor>
      <arglist>(BBItemRef item)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>blackboardItemWithdrawn</name>
      <anchor>z20_2</anchor>
      <arglist>(BBItemRef item)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Blackboard *</type>
      <name>bb</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionFile</name>
    <filename>class_bonn_motion_file.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Line</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Line *</type>
      <name>getLine</name>
      <anchor>a0</anchor>
      <arglist>(int nodeId) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Line &gt;</type>
      <name>LineList</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LineList</type>
      <name>lines</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BonnMotionFileCache</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionFileCache</name>
    <filename>class_bonn_motion_file_cache.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const BonnMotionFile *</type>
      <name>getFile</name>
      <anchor>a0</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BonnMotionFileCache *</type>
      <name>instance</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteInstance</name>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, BonnMotionFile &gt;</type>
      <name>BMFileMap</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parseFile</name>
      <anchor>b0</anchor>
      <arglist>(const char *filename, BonnMotionFile &amp;bmFile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BonnMotionFileCache</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~BonnMotionFileCache</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BMFileMap</type>
      <name>cache</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static BonnMotionFileCache *</type>
      <name>inst</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionMobility</name>
    <filename>class_bonn_motion_mobility.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~BonnMotionMobility</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BonnMotionFile::Line *</type>
      <name>vecp</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>vecpos</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BPSKModulation</name>
    <filename>class_b_p_s_k_modulation.html</filename>
    <base>IModulation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>bitErrorRate</name>
      <anchor>a1</anchor>
      <arglist>(double snir, double bandwidth, double bitrate)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BusTap</name>
    <filename>struct_bus_tap.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>position</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>propagationDelay</name>
      <anchor>o2</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ByteArrayMessage</name>
    <filename>class_byte_array_message.html</filename>
    <base>ByteArrayMessage_Base</base>
    <member kind="function">
      <type></type>
      <name>ByteArrayMessage</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayMessage</name>
      <anchor>a1</anchor>
      <arglist>(const ByteArrayMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ByteArrayMessage &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const ByteArrayMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataFromBuffer</name>
      <anchor>a4</anchor>
      <arglist>(const void *ptr, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDataToBuffer</name>
      <anchor>a5</anchor>
      <arglist>(void *ptr, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePrefix</name>
      <anchor>a6</anchor>
      <arglist>(int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ByteArrayMessage_Base</name>
    <filename>class_byte_array_message___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ByteArrayMessage_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDataArraySize</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDataArraySize</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getData</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int k, char data_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const ByteArrayMessage_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ByteArrayMessage_Base</name>
      <anchor>b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ByteArrayMessage_Base</name>
      <anchor>b2</anchor>
      <arglist>(const ByteArrayMessage_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ByteArrayMessage_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const ByteArrayMessage_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>data_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>data_arraysize</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelAccess</name>
    <filename>class_channel_access.html</filename>
    <base>BasicModule</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToChannel</name>
      <anchor>b0</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Coord &amp;</type>
      <name>myPosition</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b2</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelControl *</type>
      <name>cc</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelControl::HostRef</type>
      <name>myHostRef</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelControl</name>
    <filename>class_channel_control.html</filename>
    <member kind="typedef">
      <type>HostEntry *</type>
      <name>HostRef</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; cModule * &gt;</type>
      <name>ModuleList</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AirFrame * &gt;</type>
      <name>TransmissionList</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelControl</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChannelControl</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HostRef</type>
      <name>registerHost</name>
      <anchor>a2</anchor>
      <arglist>(cModule *host, const Coord &amp;initialPos)</arglist>
    </member>
    <member kind="function">
      <type>HostRef</type>
      <name>lookupHost</name>
      <anchor>a3</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHostPosition</name>
      <anchor>a4</anchor>
      <arglist>(HostRef h, const Coord &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHostChannel</name>
      <anchor>a5</anchor>
      <arglist>(HostRef h, const int channel)</arglist>
    </member>
    <member kind="function">
      <type>const TransmissionList &amp;</type>
      <name>getOngoingTransmissions</name>
      <anchor>a6</anchor>
      <arglist>(const int channel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOngoingTransmission</name>
      <anchor>a7</anchor>
      <arglist>(HostRef h, AirFrame *frame)</arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>getHostPosition</name>
      <anchor>a8</anchor>
      <arglist>(HostRef h)</arglist>
    </member>
    <member kind="function">
      <type>const ModuleList &amp;</type>
      <name>getNeighbors</name>
      <anchor>a9</anchor>
      <arglist>(HostRef h)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCommunicationRange</name>
      <anchor>a10</anchor>
      <arglist>(HostRef h)</arglist>
    </member>
    <member kind="function">
      <type>const Coord *</type>
      <name>getPgs</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int</type>
      <name>getNumChannels</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; HostEntry &gt;</type>
      <name>HostList</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; TransmissionList &gt;</type>
      <name>ChannelTransmissionLists</name>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateConnections</name>
      <anchor>b0</anchor>
      <arglist>(HostRef h)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b2</anchor>
      <arglist>(cModule *playgroundMod)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>purgeOngoingTransmissions</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkChannel</name>
      <anchor>b5</anchor>
      <arglist>(const int channel)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HostList</type>
      <name>hosts</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelTransmissionLists</type>
      <name>transmissions</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>lastOngoingTransmissionsUpdate</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>playgroundSize</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxInterferenceDistance</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numChannels</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;, const HostEntry &amp;)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n1</anchor>
      <arglist>(std::ostream &amp;, const TransmissionList &amp;)</arglist>
    </member>
    <class kind="struct">ChannelControl::HostEntry</class>
  </compound>
  <compound kind="struct">
    <name>ChannelControl::HostEntry</name>
    <filename>struct_channel_control_1_1_host_entry.html</filename>
    <member kind="variable">
      <type>cModule *</type>
      <name>host</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>pos</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; HostRef &gt;</type>
      <name>neighbors</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>channel</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isModuleListValid</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ModuleList</type>
      <name>neighborModules</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInstaller</name>
    <filename>class_channel_installer.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cChannel *</type>
      <name>createReplacementChannelFor</name>
      <anchor>b2</anchor>
      <arglist>(cChannel *channel)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CircleMobility</name>
    <filename>class_circle_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>move</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>cx</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>cy</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>omega</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstSpeedMobility</name>
    <filename>class_const_speed_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>move</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>vHost</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchor>z25_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepSize</name>
      <anchor>z25_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSteps</name>
      <anchor>z25_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>step</name>
      <anchor>z25_3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ControlManetRouting</name>
    <filename>class_control_manet_routing.html</filename>
    <member kind="function">
      <type></type>
      <name>ControlManetRouting</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControlManetRouting</name>
      <anchor>a1</anchor>
      <arglist>(const ControlManetRouting &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ControlManetRouting</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ControlManetRouting &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ControlManetRouting &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getSrcAddress</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getSrcAddress</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddress</name>
      <anchor>a9</anchor>
      <arglist>(const IPAddress &amp;srcAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getDestAddress</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getDestAddress</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddress</name>
      <anchor>a12</anchor>
      <arglist>(const IPAddress &amp;destAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOptionCode</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptionCode</name>
      <anchor>a14</anchor>
      <arglist>(int optionCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const ControlManetRouting &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>srcAddress_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>destAddress_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>optionCode_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Coord</name>
    <filename>class_coord.html</filename>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchor>a0</anchor>
      <arglist>(double _x=0, double _y=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchor>a1</anchor>
      <arglist>(const Coord &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchor>a2</anchor>
      <arglist>(const Coord *pos)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator+=</name>
      <anchor>a4</anchor>
      <arglist>(Coord a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(Coord a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator-=</name>
      <anchor>a6</anchor>
      <arglist>(Coord a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchor>a7</anchor>
      <arglist>(const Coord a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrdist</name>
      <anchor>a8</anchor>
      <arglist>(const Coord a) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator+</name>
      <anchor>n0</anchor>
      <arglist>(Coord a, Coord b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator-</name>
      <anchor>n1</anchor>
      <arglist>(Coord a, Coord b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator *</name>
      <anchor>n2</anchor>
      <arglist>(Coord a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator/</name>
      <anchor>n3</anchor>
      <arglist>(Coord a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchor>n4</anchor>
      <arglist>(Coord a, Coord b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchor>n5</anchor>
      <arglist>(Coord a, Coord b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CSMAMacLayer</name>
    <filename>class_c_s_m_a_mac_layer.html</filename>
    <base>WirelessMacBase</base>
    <base>INotifiable</base>
    <member kind="function">
      <type></type>
      <name>CSMAMacLayer</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CSMAMacLayer</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerInterface</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MacPkt *</type>
      <name>encapsMsg</name>
      <anchor>b6</anchor>
      <arglist>(cMessage *netw)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b7</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>myMacAddr</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState::State</type>
      <name>radioState</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>macQueue</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>queueLength</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timer</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>sendTime</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211</name>
    <filename>class_decider80211.html</filename>
    <base>BasicDecider</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchor>b1</anchor>
      <arglist>(AirFrame *, SnrList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>dB2fraction</name>
      <anchor>b2</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>packetOk</name>
      <anchor>b3</anchor>
      <arglist>(double, int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snirThreshold</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DropTailQoSQueue</name>
    <filename>class_drop_tail_qo_s_queue.html</filename>
    <base>PassiveQueueBase</base>
    <member kind="function">
      <type></type>
      <name>DropTailQoSQueue</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DropTailQoSQueue</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>enqueue</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dequeue</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendOut</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>frameCapacity</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numQueues</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue **</type>
      <name>queues</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IQoSClassifier *</type>
      <name>classifier</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DropTailQueue</name>
    <filename>class_drop_tail_queue.html</filename>
    <base>PassiveQueueBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>enqueue</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dequeue</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendOut</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>frameCapacity</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>queue</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>qlenVec</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>dropVec</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DumbTCP</name>
    <filename>class_dumb_t_c_p.html</filename>
    <base>TCPAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>DumbTCP</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DumbTCP</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>established</name>
      <anchor>a3</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionClosed</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processTimer</name>
      <anchor>a5</anchor>
      <arglist>(cMessage *timer, TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendCommandInvoked</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedOutOfOrderSegment</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSeqChanged</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchor>a9</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedAckForDataNotYetSent</name>
      <anchor>a11</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ackSent</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataSent</name>
      <anchor>a13</anchor>
      <arglist>(uint32 fromseq)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DumbTCPStateVariables *&amp;</type>
      <name>state</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>rexmitTimer</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DumbTCPStateVariables</name>
    <filename>class_dumb_t_c_p_state_variables.html</filename>
    <base>TCPStateVariables</base>
  </compound>
  <compound kind="class">
    <name>Dummy</name>
    <filename>class_dummy.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnqueueHook</name>
    <filename>class_enqueue_hook.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setModule</name>
      <anchor>a0</anchor>
      <arglist>(cSimpleModule *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enqueue</name>
      <anchor>a1</anchor>
      <arglist>(cMessage *msg, cQueue &amp;queue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cMessage *</type>
      <name>dropIfNotNeeded</name>
      <anchor>a2</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EroObj_t</name>
    <filename>struct_ero_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>EroObj_t</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>L</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>node</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ErrAndCollDecider</name>
    <filename>class_err_and_coll_decider.html</filename>
    <base>SnrDecider</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchor>b0</anchor>
      <arglist>(AirFrame *, SnrList &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ErrorHandling</name>
    <filename>class_error_handling.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numReceived</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherAppCli</name>
    <filename>class_ether_app_cli.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MACAddress</type>
      <name>resolveDestMACAddress</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPacket</name>
      <anchor>b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>receivePacket</name>
      <anchor>b6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerDSAP</name>
      <anchor>b7</anchor>
      <arglist>(int dsap)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>seqNum</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cPar *</type>
      <name>reqLength</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cPar *</type>
      <name>respLength</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cPar *</type>
      <name>waitTime</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localSAP</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>remoteSAP</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MACAddress</type>
      <name>destMACAddress</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>packetsSent</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>packetsReceived</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>eedVector</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cStdDev</type>
      <name>eedStats</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherAppReq</name>
    <filename>class_ether_app_req.html</filename>
    <member kind="function">
      <type></type>
      <name>EtherAppReq</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherAppReq</name>
      <anchor>a1</anchor>
      <arglist>(const EtherAppReq &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherAppReq</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherAppReq &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const EtherAppReq &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getRequestId</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequestId</name>
      <anchor>a8</anchor>
      <arglist>(long requestId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getResponseBytes</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResponseBytes</name>
      <anchor>a10</anchor>
      <arglist>(long responseBytes_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const EtherAppReq &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>requestId_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>responseBytes_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherAppResp</name>
    <filename>class_ether_app_resp.html</filename>
    <member kind="function">
      <type></type>
      <name>EtherAppResp</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherAppResp</name>
      <anchor>a1</anchor>
      <arglist>(const EtherAppResp &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherAppResp</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherAppResp &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const EtherAppResp &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRequestId</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequestId</name>
      <anchor>a8</anchor>
      <arglist>(int requestId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumFrames</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumFrames</name>
      <anchor>a10</anchor>
      <arglist>(int numFrames_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const EtherAppResp &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>requestId_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numFrames_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherAppSrv</name>
    <filename>class_ether_app_srv.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerDSAP</name>
      <anchor>b3</anchor>
      <arglist>(int dsap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPacket</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *datapacket, const MACAddress &amp;destAddr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localSAP</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remoteSAP</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>packetsSent</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>packetsReceived</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>eedVector</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cStdDev</type>
      <name>eedStats</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherAutoconfig</name>
    <filename>class_ether_autoconfig.html</filename>
    <member kind="function">
      <type></type>
      <name>EtherAutoconfig</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherAutoconfig</name>
      <anchor>a1</anchor>
      <arglist>(const EtherAutoconfig &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherAutoconfig</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherAutoconfig &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const EtherAutoconfig &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTxrate</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTxrate</name>
      <anchor>a8</anchor>
      <arglist>(double txrate_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getHalfDuplex</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHalfDuplex</name>
      <anchor>a10</anchor>
      <arglist>(bool halfDuplex_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const EtherAutoconfig &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txrate_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>halfDuplex_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherBus</name>
    <filename>class_ether_bus.html</filename>
    <member kind="function">
      <type></type>
      <name>EtherBus</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherBus</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tokenize</name>
      <anchor>b3</anchor>
      <arglist>(const char *str, std::vector&lt; double &gt; &amp;array)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>propagationSpeed</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BusTap *</type>
      <name>tap</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>taps</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>numMessages</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherEncap</name>
    <filename>class_ether_encap.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacketFromHigherLayer</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrameFromMAC</name>
      <anchor>b4</anchor>
      <arglist>(EtherFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSendPause</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seqNum</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalFromHigherLayer</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalFromMAC</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalPauseSent</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherFrame</name>
    <filename>class_ether_frame.html</filename>
    <member kind="function">
      <type></type>
      <name>EtherFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherFrame</name>
      <anchor>a1</anchor>
      <arglist>(const EtherFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const EtherFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getDest</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getDest</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDest</name>
      <anchor>a9</anchor>
      <arglist>(const MACAddress &amp;dest_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getSrc</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getSrc</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrc</name>
      <anchor>a12</anchor>
      <arglist>(const MACAddress &amp;src_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const EtherFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>dest_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>src_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherFrameWithLLC</name>
    <filename>class_ether_frame_with_l_l_c.html</filename>
    <base>EtherFrame</base>
    <member kind="function">
      <type></type>
      <name>EtherFrameWithLLC</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherFrameWithLLC</name>
      <anchor>a1</anchor>
      <arglist>(const EtherFrameWithLLC &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherFrameWithLLC</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherFrameWithLLC &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const EtherFrameWithLLC &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSsap</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSsap</name>
      <anchor>a8</anchor>
      <arglist>(int ssap_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDsap</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDsap</name>
      <anchor>a10</anchor>
      <arglist>(int dsap_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getControl</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setControl</name>
      <anchor>a12</anchor>
      <arglist>(int control_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const EtherFrameWithLLC &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ssap_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dsap_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>control_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherFrameWithSNAP</name>
    <filename>class_ether_frame_with_s_n_a_p.html</filename>
    <base>EtherFrame</base>
    <member kind="function">
      <type></type>
      <name>EtherFrameWithSNAP</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherFrameWithSNAP</name>
      <anchor>a1</anchor>
      <arglist>(const EtherFrameWithSNAP &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherFrameWithSNAP</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherFrameWithSNAP &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const EtherFrameWithSNAP &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getOrgCode</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrgCode</name>
      <anchor>a8</anchor>
      <arglist>(long orgCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLocalcode</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalcode</name>
      <anchor>a10</anchor>
      <arglist>(int localcode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const EtherFrameWithSNAP &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>orgCode_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localcode_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherHub</name>
    <filename>class_ether_hub.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ports</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>numMessages</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherLLC</name>
    <filename>class_ether_l_l_c.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacketFromHigherLayer</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrameFromMAC</name>
      <anchor>b4</anchor>
      <arglist>(EtherFrameWithLLC *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRegisterSAP</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeregisterSAP</name>
      <anchor>b6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSendPause</name>
      <anchor>b7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>findPortForSAP</name>
      <anchor>b8</anchor>
      <arglist>(int sap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seqNum</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, int &gt;</type>
      <name>dsapToPort</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>dsapsRegistered</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalFromHigherLayer</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalFromMAC</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>totalPassedUp</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>droppedUnknownDSAP</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherMAC</name>
    <filename>class_ether_m_a_c.html</filename>
    <base>EtherMACBase</base>
    <member kind="function">
      <type></type>
      <name>EtherMAC</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherMAC</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeTxrate</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrameFromUpperLayer</name>
      <anchor>d0</anchor>
      <arglist>(EtherFrame *msg)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>processMsgFromNetwork</name>
      <anchor>d1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndIFGPeriod</name>
      <anchor>d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndTxPeriod</name>
      <anchor>d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleEndRxPeriod</name>
      <anchor>d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleEndBackoffPeriod</name>
      <anchor>d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleEndJammingPeriod</name>
      <anchor>d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>startAutoconfig</name>
      <anchor>d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleAutoconfigMessage</name>
      <anchor>d8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>printState</name>
      <anchor>d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scheduleEndRxPeriod</name>
      <anchor>d10</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendJamSignal</name>
      <anchor>d11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleRetransmission</name>
      <anchor>d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>startFrameTransmission</name>
      <anchor>d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>autoconfigInProgress</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>lowestTxrateSuggested</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>duplexVetoed</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>backoffs</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numConcurrentTransmissions</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EtherFrame *</type>
      <name>frameBeingReceived</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>endRxMsg</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>endBackoffMsg</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>endJammingMsg</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>totalCollisionTime</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>totalSuccessfulRxTxTime</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>channelBusySince</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>numCollisions</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>numBackoffs</name>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>numCollisionsVector</name>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>numBackoffsVector</name>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherMAC2</name>
    <filename>class_ether_m_a_c2.html</filename>
    <base>EtherMACBase</base>
    <member kind="function">
      <type></type>
      <name>EtherMAC2</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeTxrate</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startFrameTransmission</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrameFromUpperLayer</name>
      <anchor>b4</anchor>
      <arglist>(EtherFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMsgFromNetwork</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndIFGPeriod</name>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndTxPeriod</name>
      <anchor>b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherMACBase</name>
    <filename>class_ether_m_a_c_base.html</filename>
    <member kind="function">
      <type></type>
      <name>EtherMACBase</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherMACBase</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>queueLength</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MACAddress</type>
      <name>getMACAddress</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>initializeTxrate</name>
      <anchor>b1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeFlags</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeMACAddress</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeQueueModule</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeNotificationBoard</name>
      <anchor>b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeStatistics</name>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerInterface</name>
      <anchor>b7</anchor>
      <arglist>(double txrate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkDestinationAddress</name>
      <anchor>b8</anchor>
      <arglist>(EtherFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateParameters</name>
      <anchor>b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printParameters</name>
      <anchor>b10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrameFromUpperLayer</name>
      <anchor>b12</anchor>
      <arglist>(EtherFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMsgFromNetwork</name>
      <anchor>b13</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessageWhenNotConnected</name>
      <anchor>b14</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessageWhenDisabled</name>
      <anchor>b15</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndIFGPeriod</name>
      <anchor>b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndTxPeriod</name>
      <anchor>b17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndPausePeriod</name>
      <anchor>b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleEndIFGPeriod</name>
      <anchor>b19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleEndTxPeriod</name>
      <anchor>b20</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleEndPausePeriod</name>
      <anchor>b21</anchor>
      <arglist>(int pauseUnits)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAndScheduleEndPausePeriod</name>
      <anchor>b22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fireChangeNotification</name>
      <anchor>b23</anchor>
      <arglist>(int type, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>beginSendFrames</name>
      <anchor>b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>frameReceptionComplete</name>
      <anchor>b25</anchor>
      <arglist>(EtherFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processReceivedDataFrame</name>
      <anchor>b26</anchor>
      <arglist>(EtherFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processPauseCommand</name>
      <anchor>b27</anchor>
      <arglist>(int pauseUnits)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateConnectionColor</name>
      <anchor>b29</anchor>
      <arglist>(int txState)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>connected</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>disabled</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>promiscuous</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>address</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>txQueueLimit</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>duplexMode</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>carrierExtension</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>frameBursting</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txrate</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitTime</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>slotTime</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>interFrameGap</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>jamDuration</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>shortestFrameDuration</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>transmitState</name>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiveState</name>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pauseUnitsRequested</name>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>txQueue</name>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPassiveQueue *</type>
      <name>queueModule</name>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry *</type>
      <name>interfaceEntry</name>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TxNotifDetails</type>
      <name>notifDetails</name>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endTxMsg</name>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endIFGMsg</name>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endPauseMsg</name>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>framesSentInBurst</name>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesSentInBurst</name>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numFramesSent</name>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numFramesReceivedOK</name>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numBytesSent</name>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numBytesReceivedOK</name>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numFramesFromHL</name>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numDroppedIfaceDown</name>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numDroppedBitError</name>
      <anchor>p33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numDroppedNotForUs</name>
      <anchor>p34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numFramesPassedToHL</name>
      <anchor>p35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numPauseFramesRcvd</name>
      <anchor>p36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numPauseFramesSent</name>
      <anchor>p37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numFramesSentVector</name>
      <anchor>p38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numFramesReceivedOKVector</name>
      <anchor>p39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numBytesSentVector</name>
      <anchor>p40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numBytesReceivedOKVector</name>
      <anchor>p41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numDroppedIfaceDownVector</name>
      <anchor>p42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numDroppedBitErrorVector</name>
      <anchor>p43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numDroppedNotForUsVector</name>
      <anchor>p44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numFramesPassedToHLVector</name>
      <anchor>p45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numPauseFramesRcvdVector</name>
      <anchor>p46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>numPauseFramesSentVector</name>
      <anchor>p47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EthernetIIFrame</name>
    <filename>class_ethernet_i_i_frame.html</filename>
    <base>EtherFrame</base>
    <member kind="function">
      <type></type>
      <name>EthernetIIFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EthernetIIFrame</name>
      <anchor>a1</anchor>
      <arglist>(const EthernetIIFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EthernetIIFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EthernetIIFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const EthernetIIFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getEtherType</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEtherType</name>
      <anchor>a8</anchor>
      <arglist>(int etherType_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const EthernetIIFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>etherType_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EtherPauseFrame</name>
    <filename>class_ether_pause_frame.html</filename>
    <base>EtherFrame</base>
    <member kind="function">
      <type></type>
      <name>EtherPauseFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EtherPauseFrame</name>
      <anchor>a1</anchor>
      <arglist>(const EtherPauseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EtherPauseFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EtherPauseFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const EtherPauseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPauseTime</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPauseTime</name>
      <anchor>a8</anchor>
      <arglist>(int pauseTime_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const EtherPauseFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pauseTime_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExternalTOSInfo</name>
    <filename>struct_external_t_o_s_info.html</filename>
    <member kind="function">
      <type></type>
      <name>ExternalTOSInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>TOSData</type>
      <name>tosData</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>E_ExternalMetricType</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>forwardingAddress</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>externalRouteTag</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FailureManager</name>
    <filename>class_failure_manager.html</filename>
    <base>IScriptable</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processCommand</name>
      <anchor>b2</anchor>
      <arglist>(const cXMLElement &amp;node)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>replaceNode</name>
      <anchor>d0</anchor>
      <arglist>(cModule *mod, const char *newNodeType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reconnectNode</name>
      <anchor>d1</anchor>
      <arglist>(cModule *old, cModule *n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reconnect</name>
      <anchor>d2</anchor>
      <arglist>(cModule *old, cModule *n, const char *ins, const char *outs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>cModule *</type>
      <name>getTargetNode</name>
      <anchor>d3</anchor>
      <arglist>(const char *target)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FEC_TLV</name>
    <filename>struct_f_e_c___t_l_v.html</filename>
    <member kind="function">
      <type></type>
      <name>FEC_TLV</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>addr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>length</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FilterSpecObj_t</name>
    <filename>struct_filter_spec_obj__t.html</filename>
    <base>SenderTemplateObj_t</base>
    <member kind="function">
      <type></type>
      <name>FilterSpecObj_t</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlatNetworkConfigurator</name>
    <filename>class_flat_network_configurator.html</filename>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NodeInfo &gt;</type>
      <name>NodeInfoVector</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>StringVector</name>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractTopology</name>
      <anchor>b3</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assignAddresses</name>
      <anchor>b4</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDefaultRoutes</name>
      <anchor>b5</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillRoutingTables</name>
      <anchor>b6</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDisplayString</name>
      <anchor>b7</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <class kind="struct">FlatNetworkConfigurator::NodeInfo</class>
  </compound>
  <compound kind="struct">
    <name>FlatNetworkConfigurator::NodeInfo</name>
    <filename>struct_flat_network_configurator_1_1_node_info.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isIPNode</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingTable *</type>
      <name>rt</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>address</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usesDefaultRoute</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlatNetworkConfigurator6</name>
    <filename>class_flat_network_configurator6.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>StringVector</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configureAdvPrefixes</name>
      <anchor>b3</anchor>
      <arglist>(cTopology &amp;topo, StringVector &amp;nonIPTypes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOwnAdvPrefixRoutes</name>
      <anchor>b4</anchor>
      <arglist>(cTopology &amp;topo, StringVector &amp;nonIPTypes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addStaticRoutes</name>
      <anchor>b5</anchor>
      <arglist>(cTopology &amp;topo, StringVector &amp;nonIPTypes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDisplayString</name>
      <anchor>b6</anchor>
      <arglist>(int numIPNodes, int numNonIPNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isNonIPType</name>
      <anchor>b7</anchor>
      <arglist>(cTopology::Node *node, StringVector &amp;nonIPTypes)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FlowDescriptor_t</name>
    <filename>struct_flow_descriptor__t.html</filename>
    <member kind="function">
      <type></type>
      <name>FlowDescriptor_t</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>FlowSpecObj_t</type>
      <name>Flowspec_Object</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FilterSpecObj_t</type>
      <name>Filter_Spec_Object</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddressVector</type>
      <name>RRO</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>label</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FlowSpecObj_t</name>
    <filename>struct_flow_spec_obj__t.html</filename>
    <base>SenderTspecObj_t</base>
    <member kind="function">
      <type></type>
      <name>FlowSpecObj_t</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FWMath</name>
    <filename>class_f_w_math.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mod</name>
      <anchor>e0</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>div</name>
      <anchor>e1</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>close</name>
      <anchor>e2</anchor>
      <arglist>(double one, double two)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stepfunction</name>
      <anchor>e3</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sign</name>
      <anchor>e4</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>round</name>
      <anchor>e5</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>max</name>
      <anchor>e6</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dBm2mW</name>
      <anchor>e7</anchor>
      <arglist>(double dBm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericAppMsg</name>
    <filename>class_generic_app_msg.html</filename>
    <member kind="function">
      <type></type>
      <name>GenericAppMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericAppMsg</name>
      <anchor>a1</anchor>
      <arglist>(const GenericAppMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericAppMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GenericAppMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const GenericAppMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>expectedReplyLength</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpectedReplyLength</name>
      <anchor>a8</anchor>
      <arglist>(int expectedReplyLength_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>replyDelay</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReplyDelay</name>
      <anchor>a10</anchor>
      <arglist>(double replyDelay_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>close</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClose</name>
      <anchor>a12</anchor>
      <arglist>(bool close_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const GenericAppMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>expectedReplyLength_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>replyDelay_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>close_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericRadio</name>
    <filename>class_generic_radio.html</filename>
    <base>AbstractRadio</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IReceptionModel *</type>
      <name>createReceptionModel</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IRadioModel *</type>
      <name>createRadioModel</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericRadioModel</name>
    <filename>class_generic_radio_model.html</filename>
    <base>IRadioModel</base>
    <member kind="function">
      <type></type>
      <name>GenericRadioModel</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericRadioModel</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchor>a2</anchor>
      <arglist>(cModule *radioModule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calculateDuration</name>
      <anchor>a3</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReceivedCorrectly</name>
      <anchor>a4</anchor>
      <arglist>(AirFrame *airframe, const SnrList &amp;receivedList)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>packetOk</name>
      <anchor>b0</anchor>
      <arglist>(double snirMin, int length, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>dB2fraction</name>
      <anchor>b1</anchor>
      <arglist>(double dB)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snirThreshold</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>headerLengthBits</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bandwidth</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IModulation *</type>
      <name>modulation</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GilbertElliotSnr</name>
    <filename>class_gilbert_elliot_snr.html</filename>
    <base>SnrEval</base>
    <member kind="function">
      <type></type>
      <name>GilbertElliotSnr</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GilbertElliotSnr</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchor>x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOOD</name>
      <anchor>x2x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD</name>
      <anchor>x2x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchor>b2</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgEnd</name>
      <anchor>b3</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>state</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>meanGood</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>meanBad</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stateChange</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HelloTimeoutMsg</name>
    <filename>class_hello_timeout_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>HelloTimeoutMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HelloTimeoutMsg</name>
      <anchor>a1</anchor>
      <arglist>(const HelloTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HelloTimeoutMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HelloTimeoutMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const HelloTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getPeer</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getPeer</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPeer</name>
      <anchor>a9</anchor>
      <arglist>(const IPAddress &amp;peer_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a11</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const HelloTimeoutMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>peer_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HelloTimerMsg</name>
    <filename>class_hello_timer_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>HelloTimerMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HelloTimerMsg</name>
      <anchor>a1</anchor>
      <arglist>(const HelloTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HelloTimerMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HelloTimerMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const HelloTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getPeer</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getPeer</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPeer</name>
      <anchor>a9</anchor>
      <arglist>(const IPAddress &amp;peer_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a11</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const HelloTimerMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>peer_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IClassifier</name>
    <filename>class_i_classifier.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IClassifier</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>lookupLabel</name>
      <anchor>a1</anchor>
      <arglist>(IPDatagram *ipdatagram, LabelOpVector &amp;outLabel, std::string &amp;outInterface, int &amp;color)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>icmp</name>
    <filename>structicmp.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>icmp_type</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>icmp_code</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>icmp_cksum</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>icmp::@3</type>
      <name>icmp_hun</name>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ih_pptr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>in_addr</type>
      <name>ih_gwaddr</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>icmp::@3::ih_idseq</type>
      <name>ih_idseq</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>icd_id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>icd_seq</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ih_void</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>icmp::@3::ih_pmtu</type>
      <name>ih_pmtu</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>ipm_void</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>ipm_nextmtu</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>icmp::@3::ih_rtradv</type>
      <name>ih_rtradv</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>irt_num_addrs</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>irt_wpa</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int16_t</type>
      <name>irt_lifetime</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>icmp::@4</type>
      <name>icmp_dun</name>
      <anchor>o26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>icmp::@4::id_ts</type>
      <name>id_ts</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_otime</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_rtime</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_ttime</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>icmp::@4::id_ip</type>
      <name>id_ip</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ip</type>
      <name>idi_ip</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>icmp_ra_addr</type>
      <name>id_radv</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>id_mask</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>id_data</name>
      <anchor>o4</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMP</name>
    <filename>class_i_c_m_p.html</filename>
    <member kind="function">
      <type>void</type>
      <name>sendErrorMessage</name>
      <anchor>a0</anchor>
      <arglist>(IPDatagram *datagram, ICMPType type, ICMPCode code)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendErrorMessage</name>
      <anchor>a1</anchor>
      <arglist>(cMessage *transportPacket, IPControlInfo *ctrl, ICMPType type, ICMPCode code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processICMPMessage</name>
      <anchor>b0</anchor>
      <arglist>(ICMPMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>errorOut</name>
      <anchor>b1</anchor>
      <arglist>(ICMPMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processEchoRequest</name>
      <anchor>b2</anchor>
      <arglist>(ICMPMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processEchoReply</name>
      <anchor>b3</anchor>
      <arglist>(ICMPMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendEchoRequest</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchor>b5</anchor>
      <arglist>(ICMPMessage *, const IPAddress &amp;dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchor>b6</anchor>
      <arglist>(ICMPMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingTableAccess</type>
      <name>routingTableAccess</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>icmp_ra_addr</name>
    <filename>structicmp__ra__addr.html</filename>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>ira_addr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>ira_preference</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPAccess</name>
    <filename>class_i_c_m_p_access.html</filename>
    <base>ModuleAccess&lt; ICMP &gt;</base>
    <member kind="function">
      <type></type>
      <name>ICMPAccess</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPMessage</name>
    <filename>class_i_c_m_p_message.html</filename>
    <member kind="function">
      <type></type>
      <name>ICMPMessage</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPMessage</name>
      <anchor>a1</anchor>
      <arglist>(const ICMPMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPMessage</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPMessage &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ICMPMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchor>a8</anchor>
      <arglist>(int type_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCode</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchor>a10</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const ICMPMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPSerializer</name>
    <filename>class_i_c_m_p_serializer.html</filename>
    <member kind="function">
      <type></type>
      <name>ICMPSerializer</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialize</name>
      <anchor>a1</anchor>
      <arglist>(ICMPMessage *pkt, unsigned char *buf, unsigned int bufsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchor>a2</anchor>
      <arglist>(unsigned char *buf, unsigned int bufsize, ICMPMessage *pkt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned short</type>
      <name>checksum</name>
      <anchor>e0</anchor>
      <arglist>(unsigned char *addr, unsigned int count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6</name>
    <filename>class_i_c_m_pv6.html</filename>
    <member kind="function">
      <type>void</type>
      <name>sendErrorMessage</name>
      <anchor>a0</anchor>
      <arglist>(IPv6Datagram *datagram, ICMPv6Type type, int code)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendErrorMessage</name>
      <anchor>a1</anchor>
      <arglist>(cMessage *transportPacket, IPv6ControlInfo *ctrl, ICMPv6Type type, int code)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToIP</name>
      <anchor>b0</anchor>
      <arglist>(ICMPv6Message *msg, const IPv6Address &amp;dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToIP</name>
      <anchor>b1</anchor>
      <arglist>(ICMPv6Message *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ICMPv6Message *</type>
      <name>createDestUnreachableMsg</name>
      <anchor>b2</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ICMPv6Message *</type>
      <name>createPacketTooBigMsg</name>
      <anchor>b3</anchor>
      <arglist>(int mtu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ICMPv6Message *</type>
      <name>createTimeExceededMsg</name>
      <anchor>b4</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ICMPv6Message *</type>
      <name>createParamProblemMsg</name>
      <anchor>b5</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processICMPv6Message</name>
      <anchor>b8</anchor>
      <arglist>(ICMPv6Message *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processEchoRequest</name>
      <anchor>b9</anchor>
      <arglist>(ICMPv6EchoRequestMsg *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processEchoReply</name>
      <anchor>b10</anchor>
      <arglist>(ICMPv6EchoReplyMsg *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendEchoRequest</name>
      <anchor>b11</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>validateDatagramPromptingError</name>
      <anchor>b12</anchor>
      <arglist>(IPv6Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>errorOut</name>
      <anchor>b13</anchor>
      <arglist>(ICMPv6Message *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6Access</name>
    <filename>class_i_c_m_pv6_access.html</filename>
    <base>ModuleAccess&lt; ICMPv6 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6Access</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6DestUnreachableMsg</name>
    <filename>class_i_c_m_pv6_dest_unreachable_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6DestUnreachableMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6DestUnreachableMsg</name>
      <anchor>a1</anchor>
      <arglist>(const ICMPv6DestUnreachableMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6DestUnreachableMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6DestUnreachableMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ICMPv6DestUnreachableMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>code</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchor>a8</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const ICMPv6DestUnreachableMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6EchoReplyMsg</name>
    <filename>class_i_c_m_pv6_echo_reply_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6EchoReplyMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6EchoReplyMsg</name>
      <anchor>a1</anchor>
      <arglist>(const ICMPv6EchoReplyMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6EchoReplyMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6EchoReplyMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ICMPv6EchoReplyMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>code</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchor>a8</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>identifier</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdentifier</name>
      <anchor>a10</anchor>
      <arglist>(int identifier_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>seqNumber</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeqNumber</name>
      <anchor>a12</anchor>
      <arglist>(int seqNumber_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const ICMPv6EchoReplyMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>identifier_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seqNumber_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6EchoRequestMsg</name>
    <filename>class_i_c_m_pv6_echo_request_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6EchoRequestMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6EchoRequestMsg</name>
      <anchor>a1</anchor>
      <arglist>(const ICMPv6EchoRequestMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6EchoRequestMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6EchoRequestMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ICMPv6EchoRequestMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>code</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchor>a8</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>identifier</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdentifier</name>
      <anchor>a10</anchor>
      <arglist>(int identifier_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>seqNumber</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeqNumber</name>
      <anchor>a12</anchor>
      <arglist>(int seqNumber_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const ICMPv6EchoRequestMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>identifier_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seqNumber_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6Message</name>
    <filename>class_i_c_m_pv6_message.html</filename>
    <member kind="function">
      <type></type>
      <name>ICMPv6Message</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6Message</name>
      <anchor>a1</anchor>
      <arglist>(const ICMPv6Message &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6Message</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6Message &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ICMPv6Message &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>type</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchor>a8</anchor>
      <arglist>(int type_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const ICMPv6Message &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6PacketTooBigMsg</name>
    <filename>class_i_c_m_pv6_packet_too_big_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6PacketTooBigMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6PacketTooBigMsg</name>
      <anchor>a1</anchor>
      <arglist>(const ICMPv6PacketTooBigMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6PacketTooBigMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6PacketTooBigMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ICMPv6PacketTooBigMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>code</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchor>a8</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>MTU</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMTU</name>
      <anchor>a10</anchor>
      <arglist>(int MTU_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const ICMPv6PacketTooBigMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MTU_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6ParamProblemMsg</name>
    <filename>class_i_c_m_pv6_param_problem_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6ParamProblemMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6ParamProblemMsg</name>
      <anchor>a1</anchor>
      <arglist>(const ICMPv6ParamProblemMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6ParamProblemMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6ParamProblemMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ICMPv6ParamProblemMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>code</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchor>a8</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const ICMPv6ParamProblemMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICMPv6TimeExceededMsg</name>
    <filename>class_i_c_m_pv6_time_exceeded_msg.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>ICMPv6TimeExceededMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ICMPv6TimeExceededMsg</name>
      <anchor>a1</anchor>
      <arglist>(const ICMPv6TimeExceededMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ICMPv6TimeExceededMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ICMPv6TimeExceededMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ICMPv6TimeExceededMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>code</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchor>a8</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const ICMPv6TimeExceededMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ACKFrame</name>
    <filename>class_ieee80211_a_c_k_frame.html</filename>
    <base>Ieee80211OneAddressFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ACKFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ACKFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211ACKFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ACKFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ACKFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211ACKFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211ACKFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AgentSTA</name>
    <filename>class_ieee80211_agent_s_t_a.html</filename>
    <base>INotifiable</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleResponse</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b5</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRequest</name>
      <anchor>b6</anchor>
      <arglist>(Ieee80211PrimRequest *req)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>chooseBSS</name>
      <anchor>b7</anchor>
      <arglist>(Ieee80211Prim_ScanConfirm *resp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpAPList</name>
      <anchor>b8</anchor>
      <arglist>(Ieee80211Prim_ScanConfirm *resp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendScanRequest</name>
      <anchor>z90_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendAuthenticateRequest</name>
      <anchor>z90_1</anchor>
      <arglist>(const MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDeauthenticateRequest</name>
      <anchor>z90_2</anchor>
      <arglist>(const MACAddress &amp;address, int reasonCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendAssociateRequest</name>
      <anchor>z90_3</anchor>
      <arglist>(const MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendReassociateRequest</name>
      <anchor>z90_4</anchor>
      <arglist>(const MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDisassociateRequest</name>
      <anchor>z90_5</anchor>
      <arglist>(const MACAddress &amp;address, int reasonCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processScanConfirm</name>
      <anchor>z91_0</anchor>
      <arglist>(Ieee80211Prim_ScanConfirm *resp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processAuthenticateConfirm</name>
      <anchor>z91_1</anchor>
      <arglist>(Ieee80211Prim_AuthenticateConfirm *resp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processAssociateConfirm</name>
      <anchor>z91_2</anchor>
      <arglist>(Ieee80211Prim_AssociateConfirm *resp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processReassociateConfirm</name>
      <anchor>z91_3</anchor>
      <arglist>(Ieee80211Prim_ReassociateConfirm *resp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>activeScan</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>channelsToScan</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>probeDelay</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minChannelTime</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxChannelTime</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>authenticationTimeout</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>associationTimeout</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AssociationRequestFrame</name>
    <filename>class_ieee80211_association_request_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationRequestFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationRequestFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211AssociationRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AssociationRequestFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AssociationRequestFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211AssociationRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AssociationRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211AssociationRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchor>a9</anchor>
      <arglist>(const Ieee80211AssociationRequestFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211AssociationRequestFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211AssociationRequestFrameBody</type>
      <name>body_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AssociationRequestFrameBody</name>
    <filename>class_ieee80211_association_request_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationRequestFrameBody</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationRequestFrameBody</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211AssociationRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AssociationRequestFrameBody</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AssociationRequestFrameBody &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211AssociationRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSSID</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSID</name>
      <anchor>a7</anchor>
      <arglist>(const char *SSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupportedRates</name>
      <anchor>a10</anchor>
      <arglist>(const Ieee80211SupportedRatesElement &amp;supportedRates_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211AssociationRequestFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>SSID_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211SupportedRatesElement</type>
      <name>supportedRates_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AssociationResponseFrame</name>
    <filename>class_ieee80211_association_response_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationResponseFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationResponseFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211AssociationResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AssociationResponseFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AssociationResponseFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211AssociationResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AssociationResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211AssociationResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchor>a9</anchor>
      <arglist>(const Ieee80211AssociationResponseFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211AssociationResponseFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211AssociationResponseFrameBody</type>
      <name>body_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AssociationResponseFrameBody</name>
    <filename>class_ieee80211_association_response_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationResponseFrameBody</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AssociationResponseFrameBody</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211AssociationResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AssociationResponseFrameBody</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AssociationResponseFrameBody &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211AssociationResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatusCode</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatusCode</name>
      <anchor>a7</anchor>
      <arglist>(int statusCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getAid</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAid</name>
      <anchor>a9</anchor>
      <arglist>(short aid_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupportedRates</name>
      <anchor>a12</anchor>
      <arglist>(const Ieee80211SupportedRatesElement &amp;supportedRates_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211AssociationResponseFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>statusCode_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>aid_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211SupportedRatesElement</type>
      <name>supportedRates_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AuthenticationFrame</name>
    <filename>class_ieee80211_authentication_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AuthenticationFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AuthenticationFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211AuthenticationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AuthenticationFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AuthenticationFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211AuthenticationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211AuthenticationFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211AuthenticationFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchor>a9</anchor>
      <arglist>(const Ieee80211AuthenticationFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211AuthenticationFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211AuthenticationFrameBody</type>
      <name>body_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211AuthenticationFrameBody</name>
    <filename>class_ieee80211_authentication_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211AuthenticationFrameBody</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211AuthenticationFrameBody</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211AuthenticationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211AuthenticationFrameBody</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211AuthenticationFrameBody &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211AuthenticationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getSequenceNumber</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNumber</name>
      <anchor>a7</anchor>
      <arglist>(unsigned short sequenceNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatusCode</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatusCode</name>
      <anchor>a9</anchor>
      <arglist>(int statusCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsLast</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsLast</name>
      <anchor>a11</anchor>
      <arglist>(bool isLast_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211AuthenticationFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>sequenceNumber_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>statusCode_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isLast_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211BeaconFrame</name>
    <filename>class_ieee80211_beacon_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211BeaconFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211BeaconFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211BeaconFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211BeaconFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211BeaconFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211BeaconFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211BeaconFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211BeaconFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchor>a9</anchor>
      <arglist>(const Ieee80211BeaconFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211BeaconFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211BeaconFrameBody</type>
      <name>body_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211BeaconFrameBody</name>
    <filename>class_ieee80211_beacon_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211BeaconFrameBody</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211BeaconFrameBody</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211BeaconFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211BeaconFrameBody</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211BeaconFrameBody &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211BeaconFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSSID</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSID</name>
      <anchor>a7</anchor>
      <arglist>(const char *SSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupportedRates</name>
      <anchor>a10</anchor>
      <arglist>(const Ieee80211SupportedRatesElement &amp;supportedRates_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBeaconInterval</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBeaconInterval</name>
      <anchor>a12</anchor>
      <arglist>(double beaconInterval_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelNumber</name>
      <anchor>a14</anchor>
      <arglist>(int channelNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211HandoverParameters &amp;</type>
      <name>getHandoverParameters</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211HandoverParameters &amp;</type>
      <name>getHandoverParameters</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHandoverParameters</name>
      <anchor>a17</anchor>
      <arglist>(const Ieee80211HandoverParameters &amp;handoverParameters_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211BeaconFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>SSID_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211SupportedRatesElement</type>
      <name>supportedRates_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>beaconInterval_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211HandoverParameters</type>
      <name>handoverParameters_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211CapabilityInformation</name>
    <filename>struct_ieee80211_capability_information.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211CapabilityInformation</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ESS</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IBSS</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>CFPollable</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>CFPollRequest</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>privacy</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211CTSFrame</name>
    <filename>class_ieee80211_c_t_s_frame.html</filename>
    <base>Ieee80211OneAddressFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211CTSFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211CTSFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211CTSFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211CTSFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211CTSFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211CTSFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211CTSFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DataFrame</name>
    <filename>class_ieee80211_data_frame.html</filename>
    <base>Ieee80211DataOrMgmtFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DataFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DataFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211DataFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DataFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DataFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211DataFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress4</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress4</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress4</name>
      <anchor>a9</anchor>
      <arglist>(const MACAddress &amp;address4_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211DataFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>address4_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DataOrMgmtFrame</name>
    <filename>class_ieee80211_data_or_mgmt_frame.html</filename>
    <base>Ieee80211TwoAddressFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DataOrMgmtFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DataOrMgmtFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211DataOrMgmtFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DataOrMgmtFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DataOrMgmtFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211DataOrMgmtFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress3</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress3</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress3</name>
      <anchor>a9</anchor>
      <arglist>(const MACAddress &amp;address3_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getFragmentNumber</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFragmentNumber</name>
      <anchor>a11</anchor>
      <arglist>(short fragmentNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getSequenceNumber</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNumber</name>
      <anchor>a13</anchor>
      <arglist>(short sequenceNumber_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211DataOrMgmtFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>address3_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>fragmentNumber_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>sequenceNumber_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DeauthenticationFrame</name>
    <filename>class_ieee80211_deauthentication_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DeauthenticationFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DeauthenticationFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211DeauthenticationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DeauthenticationFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DeauthenticationFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211DeauthenticationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211DeauthenticationFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211DeauthenticationFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchor>a9</anchor>
      <arglist>(const Ieee80211DeauthenticationFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211DeauthenticationFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211DeauthenticationFrameBody</type>
      <name>body_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DeauthenticationFrameBody</name>
    <filename>class_ieee80211_deauthentication_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DeauthenticationFrameBody</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DeauthenticationFrameBody</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211DeauthenticationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DeauthenticationFrameBody</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DeauthenticationFrameBody &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211DeauthenticationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getReasonCode</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReasonCode</name>
      <anchor>a7</anchor>
      <arglist>(int reasonCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211DeauthenticationFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reasonCode_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DisassociationFrame</name>
    <filename>class_ieee80211_disassociation_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DisassociationFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DisassociationFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211DisassociationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DisassociationFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DisassociationFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211DisassociationFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211DisassociationFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211DisassociationFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchor>a9</anchor>
      <arglist>(const Ieee80211DisassociationFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211DisassociationFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211DisassociationFrameBody</type>
      <name>body_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211DisassociationFrameBody</name>
    <filename>class_ieee80211_disassociation_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211DisassociationFrameBody</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211DisassociationFrameBody</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211DisassociationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211DisassociationFrameBody</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211DisassociationFrameBody &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211DisassociationFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getReasonCode</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReasonCode</name>
      <anchor>a7</anchor>
      <arglist>(int reasonCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211DisassociationFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reasonCode_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Frame</name>
    <filename>class_ieee80211_frame.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211Frame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Frame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Frame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Frame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Frame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Frame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getType</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchor>a8</anchor>
      <arglist>(short type_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getToDS</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setToDS</name>
      <anchor>a10</anchor>
      <arglist>(bool toDS_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getFromDS</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFromDS</name>
      <anchor>a12</anchor>
      <arglist>(bool fromDS_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRetry</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRetry</name>
      <anchor>a14</anchor>
      <arglist>(bool retry_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getMoreFragments</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMoreFragments</name>
      <anchor>a16</anchor>
      <arglist>(bool moreFragments_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDuration</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDuration</name>
      <anchor>a18</anchor>
      <arglist>(double duration_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getAID</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAID</name>
      <anchor>a20</anchor>
      <arglist>(short AID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getReceiverAddress</name>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getReceiverAddress</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiverAddress</name>
      <anchor>a23</anchor>
      <arglist>(const MACAddress &amp;receiverAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Frame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>type_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>toDS_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fromDS_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>retry_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>moreFragments_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>AID_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>receiverAddress_var</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211FrameBody</name>
    <filename>class_ieee80211_frame_body.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211FrameBody</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211FrameBody</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211FrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211FrameBody</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211FrameBody &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211FrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getBodyLength</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBodyLength</name>
      <anchor>a7</anchor>
      <arglist>(short bodyLength_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211FrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>bodyLength_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211HandoverParameters</name>
    <filename>struct_ieee80211_handover_parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211HandoverParameters</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>avgBackoffTime</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>avgWaitTime</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>avgErrorRate</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>estAvailBW</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Mac</name>
    <filename>class_ieee80211_mac.html</filename>
    <base>WirelessMacBase</base>
    <base>INotifiable</base>
    <member kind="enumeration">
      <name>State</name>
      <anchor>z69_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE</name>
      <anchor>z69_0x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFER</name>
      <anchor>z69_0x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITDIFS</name>
      <anchor>z69_0x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKOFF</name>
      <anchor>z69_0x3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITACK</name>
      <anchor>z69_0x4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITBROADCAST</name>
      <anchor>z69_0x5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITCTS</name>
      <anchor>z69_0x6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITSIFS</name>
      <anchor>z69_0x7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RECEIVE</name>
      <anchor>z69_0x8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Mode</name>
      <anchor>z69_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DCF</name>
      <anchor>z69_1x9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PCF</name>
      <anchor>z69_1x10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cFSM</type>
      <name>fsm</name>
      <anchor>z69_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mode</type>
      <name>mode</name>
      <anchor>z69_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sequenceNumber</name>
      <anchor>z69_4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>lastReceiveFailed</name>
      <anchor>z69_5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>backoff</name>
      <anchor>z69_6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nav</name>
      <anchor>z69_7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>backoffPeriod</name>
      <anchor>z69_8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>retryCounter</name>
      <anchor>z69_9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState::State</type>
      <name>radioState</name>
      <anchor>z69_10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211DataOrMgmtFrameList</type>
      <name>transmissionQueue</name>
      <anchor>z69_11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211ASFTupleList</type>
      <name>asfTuplesList</name>
      <anchor>z69_12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPassiveQueue *</type>
      <name>queueModule</name>
      <anchor>z69_13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>pendingRadioConfigMsg</name>
      <anchor>z69_14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>address</name>
      <anchor>z67_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchor>z67_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>basicBitrate</name>
      <anchor>z67_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxQueueSize</name>
      <anchor>z67_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rtsThreshold</name>
      <anchor>z67_4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>retryLimit</name>
      <anchor>z67_5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>cwMinData</name>
      <anchor>z67_6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>cwMinBroadcast</name>
      <anchor>z67_7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>fragmentationThreshold</name>
      <anchor>z67_8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Mac</name>
      <anchor>z75_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Mac</name>
      <anchor>z75_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Ieee80211Frame *</type>
      <name>setBasicBitrate</name>
      <anchor>b0</anchor>
      <arglist>(Ieee80211Frame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>z77_0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>z77_1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerInterface</name>
      <anchor>z77_2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeQueueModule</name>
      <anchor>z77_3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>z79_0</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchor>z79_1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>z79_2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchor>z79_3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchor>z79_4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleWithFSM</name>
      <anchor>z79_5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>SIFSPeriod</name>
      <anchor>z81_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>SlotPeriod</name>
      <anchor>z81_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>DIFSPeriod</name>
      <anchor>z81_2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>EIFSPeriod</name>
      <anchor>z81_3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>PIFSPeriod</name>
      <anchor>z81_4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>BackoffPeriod</name>
      <anchor>z81_5</anchor>
      <arglist>(Ieee80211Frame *msg, int r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleSIFSPeriod</name>
      <anchor>z83_0</anchor>
      <arglist>(Ieee80211Frame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleDIFSPeriod</name>
      <anchor>z83_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cancelDIFSPeriod</name>
      <anchor>z83_2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleDataTimeoutPeriod</name>
      <anchor>z83_3</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleBroadcastTimeoutPeriod</name>
      <anchor>z83_4</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cancelTimeoutPeriod</name>
      <anchor>z83_5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleCTSTimeoutPeriod</name>
      <anchor>z83_6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleReservePeriod</name>
      <anchor>z83_7</anchor>
      <arglist>(Ieee80211Frame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invalidateBackoffPeriod</name>
      <anchor>z83_8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isInvalidBackoffPeriod</name>
      <anchor>z83_9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateBackoffPeriod</name>
      <anchor>z83_10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decreaseBackoffPeriod</name>
      <anchor>z83_11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleBackoffPeriod</name>
      <anchor>z83_12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cancelBackoffPeriod</name>
      <anchor>z83_13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendACKFrameOnEndSIFS</name>
      <anchor>z85_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendACKFrame</name>
      <anchor>z85_1</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendRTSFrame</name>
      <anchor>z85_2</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendCTSFrameOnEndSIFS</name>
      <anchor>z85_3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendCTSFrame</name>
      <anchor>z85_4</anchor>
      <arglist>(Ieee80211RTSFrame *rtsFrame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDataFrameOnEndSIFS</name>
      <anchor>z85_5</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDataFrame</name>
      <anchor>z85_6</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBroadcastFrame</name>
      <anchor>z85_7</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Ieee80211DataOrMgmtFrame *</type>
      <name>buildDataFrame</name>
      <anchor>z87_0</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Ieee80211ACKFrame *</type>
      <name>buildACKFrame</name>
      <anchor>z87_1</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToACK)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Ieee80211RTSFrame *</type>
      <name>buildRTSFrame</name>
      <anchor>z87_2</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Ieee80211CTSFrame *</type>
      <name>buildCTSFrame</name>
      <anchor>z87_3</anchor>
      <arglist>(Ieee80211RTSFrame *rtsFrame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Ieee80211DataOrMgmtFrame *</type>
      <name>buildBroadcastFrame</name>
      <anchor>z87_4</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frameToSend)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishCurrentTransmission</name>
      <anchor>z89_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>giveUpCurrentTransmission</name>
      <anchor>z89_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>retryCurrentTransmission</name>
      <anchor>z89_2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDownPendingRadioConfigMsg</name>
      <anchor>z89_3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setMode</name>
      <anchor>z89_4</anchor>
      <arglist>(Mode mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Ieee80211DataOrMgmtFrame *</type>
      <name>currentTransmission</name>
      <anchor>z89_5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetStateVariables</name>
      <anchor>z89_6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isMediumStateChange</name>
      <anchor>z89_7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isMediumFree</name>
      <anchor>z89_8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isBroadcast</name>
      <anchor>z89_9</anchor>
      <arglist>(Ieee80211Frame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isForUs</name>
      <anchor>z89_10</anchor>
      <arglist>(Ieee80211Frame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isDataOrMgmtFrame</name>
      <anchor>z89_11</anchor>
      <arglist>(Ieee80211Frame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Ieee80211Frame *</type>
      <name>frameReceivedBeforeSIFS</name>
      <anchor>z89_12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>popTransmissionQueue</name>
      <anchor>z89_13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>frameDuration</name>
      <anchor>z89_14</anchor>
      <arglist>(Ieee80211Frame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>frameDuration</name>
      <anchor>z89_15</anchor>
      <arglist>(int bits, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>logState</name>
      <anchor>z89_16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>modeName</name>
      <anchor>z89_17</anchor>
      <arglist>(int mode)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endSIFS</name>
      <anchor>z71_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endDIFS</name>
      <anchor>z71_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endBackoff</name>
      <anchor>z71_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endTimeout</name>
      <anchor>z71_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endReserve</name>
      <anchor>z71_4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>mediumStateChange</name>
      <anchor>z71_5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numRetry</name>
      <anchor>z73_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSentWithoutRetry</name>
      <anchor>z73_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numGivenUp</name>
      <anchor>z73_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numCollision</name>
      <anchor>z73_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSent</name>
      <anchor>z73_4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numReceived</name>
      <anchor>z73_5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSentBroadcast</name>
      <anchor>z73_6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numReceivedBroadcast</name>
      <anchor>z73_7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>stateVector</name>
      <anchor>z73_8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>radioStateVector</name>
      <anchor>z73_9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Ieee80211DataOrMgmtFrame * &gt;</type>
      <name>Ieee80211DataOrMgmtFrameList</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Ieee80211ASFTuple * &gt;</type>
      <name>Ieee80211ASFTupleList</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">Ieee80211Mac::Ieee80211ASFTuple</class>
  </compound>
  <compound kind="struct">
    <name>Ieee80211Mac::Ieee80211ASFTuple</name>
    <filename>struct_ieee80211_mac_1_1_ieee80211_a_s_f_tuple.html</filename>
    <member kind="variable">
      <type>MACAddress</type>
      <name>address</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sequenceNumber</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fragmentNumber</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ManagementFrame</name>
    <filename>class_ieee80211_management_frame.html</filename>
    <base>Ieee80211DataOrMgmtFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ManagementFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ManagementFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211ManagementFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ManagementFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ManagementFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211ManagementFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211ManagementFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtAdhoc</name>
    <filename>class_ieee80211_mgmt_adhoc.html</filename>
    <base>Ieee80211MgmtBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchor>b4</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211DataFrame *</type>
      <name>encapsulate</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b6</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchor>z93_0</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchor>z93_1</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchor>z93_2</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchor>z93_3</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchor>z93_4</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchor>z93_5</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchor>z93_6</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchor>z93_7</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchor>z93_8</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchor>z93_9</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchor>z93_10</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtAP</name>
    <filename>class_ieee80211_mgmt_a_p.html</filename>
    <base>Ieee80211MgmtAPBase</base>
    <member kind="typedef">
      <type>std::map&lt; MACAddress, STAInfo, MAC_compare &gt;</type>
      <name>STAList</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>STAStatus</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_AUTHENTICATED</name>
      <anchor>w4w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUTHENTICATED</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSOCIATED</name>
      <anchor>w4w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchor>b4</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b5</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>STAInfo *</type>
      <name>lookupSenderSTA</name>
      <anchor>b6</anchor>
      <arglist>(Ieee80211ManagementFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendManagementFrame</name>
      <anchor>b7</anchor>
      <arglist>(Ieee80211ManagementFrame *frame, const MACAddress &amp;destAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBeacon</name>
      <anchor>b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchor>z95_0</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchor>z95_1</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchor>z95_2</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchor>z95_3</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchor>z95_4</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchor>z95_5</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchor>z95_6</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchor>z95_7</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchor>z95_8</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchor>z95_9</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchor>z95_10</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>ssid</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>beaconInterval</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numAuthSteps</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211SupportedRatesElement</type>
      <name>supportedRates</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STAList</type>
      <name>staList</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>beaconTimer</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">Ieee80211MgmtAP::MAC_compare</class>
    <class kind="struct">Ieee80211MgmtAP::STAInfo</class>
  </compound>
  <compound kind="struct">
    <name>Ieee80211MgmtAP::MAC_compare</name>
    <filename>struct_ieee80211_mgmt_a_p_1_1_m_a_c__compare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const MACAddress &amp;u1, const MACAddress &amp;u2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211MgmtAP::STAInfo</name>
    <filename>struct_ieee80211_mgmt_a_p_1_1_s_t_a_info.html</filename>
    <member kind="variable">
      <type>MACAddress</type>
      <name>address</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>STAStatus</type>
      <name>status</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>authSeqExpected</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtAPBase</name>
    <filename>class_ieee80211_mgmt_a_p_base.html</filename>
    <base>Ieee80211MgmtBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>distributeReceivedDataFrame</name>
      <anchor>b2</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211DataFrame *</type>
      <name>convertFromEtherFrame</name>
      <anchor>b3</anchor>
      <arglist>(EtherFrame *ethframe)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual EtherFrame *</type>
      <name>convertToEtherFrame</name>
      <anchor>b4</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasRelayUnit</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtAPSimplified</name>
    <filename>class_ieee80211_mgmt_a_p_simplified.html</filename>
    <base>Ieee80211MgmtAPBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchor>b4</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b5</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchor>z97_0</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchor>z97_1</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchor>z97_2</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchor>z97_3</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchor>z97_4</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchor>z97_5</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchor>z97_6</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchor>z97_7</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchor>z97_8</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchor>z97_9</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchor>z97_10</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtBase</name>
    <filename>class_ieee80211_mgmt_base.html</filename>
    <base>PassiveQueueBase</base>
    <base>INotifiable</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchor>b5</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendOrEnqueue</name>
      <anchor>b6</anchor>
      <arglist>(cMessage *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>enqueue</name>
      <anchor>b7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dequeue</name>
      <anchor>b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendOut</name>
      <anchor>b9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dropManagementFrame</name>
      <anchor>b10</anchor>
      <arglist>(Ieee80211ManagementFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>decapsulate</name>
      <anchor>b11</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchor>b12</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFrame</name>
      <anchor>b13</anchor>
      <arglist>(Ieee80211DataOrMgmtFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchor>z99_0</anchor>
      <arglist>(Ieee80211DataFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchor>z99_1</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchor>z99_2</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchor>z99_3</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchor>z99_4</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchor>z99_5</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchor>z99_6</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchor>z99_7</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchor>z99_8</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchor>z99_9</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchor>z99_10</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>frameCapacity</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>myAddress</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>dataQueue</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>mgmtQueue</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numDataFramesReceived</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numMgmtFramesReceived</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numMgmtFramesDropped</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>dataQueueLenVec</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>dataQueueDropVec</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtSTA</name>
    <filename>class_ieee80211_mgmt_s_t_a.html</filename>
    <base>Ieee80211MgmtBase</base>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; APInfo &gt;</type>
      <name>AccessPointList</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchor>b4</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211DataFrame *</type>
      <name>encapsulate</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startAuthentication</name>
      <anchor>b6</anchor>
      <arglist>(APInfo *ap, double timeout)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startAssociation</name>
      <anchor>b7</anchor>
      <arglist>(APInfo *ap, double timeout)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>APInfo *</type>
      <name>lookupAP</name>
      <anchor>b8</anchor>
      <arglist>(const MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearAPList</name>
      <anchor>b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changeChannel</name>
      <anchor>b10</anchor>
      <arglist>(int channelNum)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>storeAPInfo</name>
      <anchor>b11</anchor>
      <arglist>(const MACAddress &amp;address, const Ieee80211BeaconFrameBody &amp;body)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>scanNextChannel</name>
      <anchor>b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendProbeRequest</name>
      <anchor>b13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beaconLost</name>
      <anchor>b14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendScanConfirm</name>
      <anchor>b15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendAuthenticationConfirm</name>
      <anchor>b16</anchor>
      <arglist>(APInfo *ap, int resultCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendAssociationConfirm</name>
      <anchor>b17</anchor>
      <arglist>(APInfo *ap, int resultCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disassociate</name>
      <anchor>b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendConfirm</name>
      <anchor>b19</anchor>
      <arglist>(Ieee80211PrimConfirm *confirm, int resultCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendManagementFrame</name>
      <anchor>b20</anchor>
      <arglist>(Ieee80211ManagementFrame *frame, const MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b21</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>statusCodeToPrimResultCode</name>
      <anchor>b22</anchor>
      <arglist>(int statusCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchor>z101_0</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchor>z101_1</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchor>z101_2</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchor>z101_3</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchor>z101_4</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchor>z101_5</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchor>z101_6</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchor>z101_7</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchor>z101_8</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchor>z101_9</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchor>z101_10</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processScanCommand</name>
      <anchor>z103_0</anchor>
      <arglist>(Ieee80211Prim_ScanRequest *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processAuthenticateCommand</name>
      <anchor>z103_1</anchor>
      <arglist>(Ieee80211Prim_AuthenticateRequest *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processDeauthenticateCommand</name>
      <anchor>z103_2</anchor>
      <arglist>(Ieee80211Prim_DeauthenticateRequest *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processAssociateCommand</name>
      <anchor>z103_3</anchor>
      <arglist>(Ieee80211Prim_AssociateRequest *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processReassociateCommand</name>
      <anchor>z103_4</anchor>
      <arglist>(Ieee80211Prim_ReassociateRequest *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processDisassociateCommand</name>
      <anchor>z103_5</anchor>
      <arglist>(Ieee80211Prim_DisassociateRequest *ctrl)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numChannels</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isScanning</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScanningInfo</type>
      <name>scanning</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AccessPointList</type>
      <name>apList</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isAssociated</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>assocTimeoutMsg</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AssociatedAPInfo</type>
      <name>assocAP</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">Ieee80211MgmtSTA::APInfo</class>
    <class kind="struct">Ieee80211MgmtSTA::AssociatedAPInfo</class>
    <class kind="struct">Ieee80211MgmtSTA::ScanningInfo</class>
  </compound>
  <compound kind="struct">
    <name>Ieee80211MgmtSTA::APInfo</name>
    <filename>struct_ieee80211_mgmt_s_t_a_1_1_a_p_info.html</filename>
    <member kind="function">
      <type></type>
      <name>APInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>channel</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MACAddress</type>
      <name>address</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ssid</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ieee80211SupportedRatesElement</type>
      <name>supportedRates</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>beaconInterval</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rxPower</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isAuthenticated</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>authSeqExpected</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>authTimeoutMsg</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211MgmtSTA::AssociatedAPInfo</name>
    <filename>struct_ieee80211_mgmt_s_t_a_1_1_associated_a_p_info.html</filename>
    <base>Ieee80211MgmtSTA::APInfo</base>
    <member kind="function">
      <type></type>
      <name>AssociatedAPInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>receiveSequence</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>beaconTimeoutMsg</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211MgmtSTA::ScanningInfo</name>
    <filename>struct_ieee80211_mgmt_s_t_a_1_1_scanning_info.html</filename>
    <member kind="variable">
      <type>MACAddress</type>
      <name>bssid</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ssid</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>activeScan</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>probeDelay</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>channelList</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>currentChannelIndex</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>busyChannelDetected</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minChannelTime</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxChannelTime</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211MgmtSTASimplified</name>
    <filename>class_ieee80211_mgmt_s_t_a_simplified.html</filename>
    <base>Ieee80211MgmtBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchor>b4</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Ieee80211DataFrame *</type>
      <name>encapsulate</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b6</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDataFrame</name>
      <anchor>z105_0</anchor>
      <arglist>(Ieee80211DataFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAuthenticationFrame</name>
      <anchor>z105_1</anchor>
      <arglist>(Ieee80211AuthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeauthenticationFrame</name>
      <anchor>z105_2</anchor>
      <arglist>(Ieee80211DeauthenticationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationRequestFrame</name>
      <anchor>z105_3</anchor>
      <arglist>(Ieee80211AssociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAssociationResponseFrame</name>
      <anchor>z105_4</anchor>
      <arglist>(Ieee80211AssociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationRequestFrame</name>
      <anchor>z105_5</anchor>
      <arglist>(Ieee80211ReassociationRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReassociationResponseFrame</name>
      <anchor>z105_6</anchor>
      <arglist>(Ieee80211ReassociationResponseFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDisassociationFrame</name>
      <anchor>z105_7</anchor>
      <arglist>(Ieee80211DisassociationFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBeaconFrame</name>
      <anchor>z105_8</anchor>
      <arglist>(Ieee80211BeaconFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeRequestFrame</name>
      <anchor>z105_9</anchor>
      <arglist>(Ieee80211ProbeRequestFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleProbeResponseFrame</name>
      <anchor>z105_10</anchor>
      <arglist>(Ieee80211ProbeResponseFrame *frame)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>accessPointAddress</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiveSequence</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211OneAddressFrame</name>
    <filename>class_ieee80211_one_address_frame.html</filename>
    <base>Ieee80211Frame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211OneAddressFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211OneAddressFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211OneAddressFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211OneAddressFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211OneAddressFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211OneAddressFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211OneAddressFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_AssociateConfirm</name>
    <filename>class_ieee80211_prim___associate_confirm.html</filename>
    <base>Ieee80211PrimConfirm</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AssociateConfirm</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AssociateConfirm</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Prim_AssociateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_AssociateConfirm</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_AssociateConfirm &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Prim_AssociateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Prim_AssociateConfirm &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_AssociateRequest</name>
    <filename>class_ieee80211_prim___associate_request.html</filename>
    <base>Ieee80211PrimRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AssociateRequest</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AssociateRequest</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Prim_AssociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_AssociateRequest</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_AssociateRequest &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Prim_AssociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchor>a8</anchor>
      <arglist>(const MACAddress &amp;address_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTimeout</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeout</name>
      <anchor>a10</anchor>
      <arglist>(double timeout_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Prim_AssociateRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>address_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeout_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_AuthenticateConfirm</name>
    <filename>class_ieee80211_prim___authenticate_confirm.html</filename>
    <base>Ieee80211PrimConfirm</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AuthenticateConfirm</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AuthenticateConfirm</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_AuthenticateConfirm</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_AuthenticateConfirm &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchor>a8</anchor>
      <arglist>(const MACAddress &amp;address_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateConfirm &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>address_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_AuthenticateRequest</name>
    <filename>class_ieee80211_prim___authenticate_request.html</filename>
    <base>Ieee80211PrimRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AuthenticateRequest</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_AuthenticateRequest</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_AuthenticateRequest</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_AuthenticateRequest &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchor>a8</anchor>
      <arglist>(const MACAddress &amp;address_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTimeout</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeout</name>
      <anchor>a10</anchor>
      <arglist>(double timeout_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Prim_AuthenticateRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>address_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeout_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_BSSDescription</name>
    <filename>class_ieee80211_prim___b_s_s_description.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_BSSDescription</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_BSSDescription</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Prim_BSSDescription &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_BSSDescription</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_BSSDescription &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Prim_BSSDescription &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelNumber</name>
      <anchor>a7</anchor>
      <arglist>(int channelNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getBSSID</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getBSSID</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBSSID</name>
      <anchor>a10</anchor>
      <arglist>(const MACAddress &amp;BSSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSSID</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSID</name>
      <anchor>a12</anchor>
      <arglist>(const char *SSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupportedRates</name>
      <anchor>a15</anchor>
      <arglist>(const Ieee80211SupportedRatesElement &amp;supportedRates_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBeaconInterval</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBeaconInterval</name>
      <anchor>a17</anchor>
      <arglist>(double beaconInterval_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRxPower</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRxPower</name>
      <anchor>a19</anchor>
      <arglist>(double rxPower_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Prim_BSSDescription &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>BSSID_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>SSID_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211SupportedRatesElement</type>
      <name>supportedRates_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>beaconInterval_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rxPower_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_DeauthenticateRequest</name>
    <filename>class_ieee80211_prim___deauthenticate_request.html</filename>
    <base>Ieee80211PrimRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_DeauthenticateRequest</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_DeauthenticateRequest</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Prim_DeauthenticateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_DeauthenticateRequest</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_DeauthenticateRequest &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Prim_DeauthenticateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchor>a8</anchor>
      <arglist>(const MACAddress &amp;address_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getReasonCode</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReasonCode</name>
      <anchor>a10</anchor>
      <arglist>(int reasonCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Prim_DeauthenticateRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>address_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reasonCode_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_DisassociateRequest</name>
    <filename>class_ieee80211_prim___disassociate_request.html</filename>
    <base>Ieee80211PrimRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_DisassociateRequest</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_DisassociateRequest</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Prim_DisassociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_DisassociateRequest</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_DisassociateRequest &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Prim_DisassociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getAddress</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getAddress</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchor>a8</anchor>
      <arglist>(const MACAddress &amp;address_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getReasonCode</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReasonCode</name>
      <anchor>a10</anchor>
      <arglist>(int reasonCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Prim_DisassociateRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>address_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reasonCode_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_ReassociateConfirm</name>
    <filename>class_ieee80211_prim___reassociate_confirm.html</filename>
    <base>Ieee80211Prim_AssociateConfirm</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ReassociateConfirm</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ReassociateConfirm</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Prim_ReassociateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_ReassociateConfirm</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_ReassociateConfirm &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Prim_ReassociateConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Prim_ReassociateConfirm &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_ReassociateRequest</name>
    <filename>class_ieee80211_prim___reassociate_request.html</filename>
    <base>Ieee80211Prim_AssociateRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ReassociateRequest</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ReassociateRequest</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Prim_ReassociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_ReassociateRequest</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_ReassociateRequest &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Prim_ReassociateRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Prim_ReassociateRequest &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_ScanConfirm</name>
    <filename>class_ieee80211_prim___scan_confirm.html</filename>
    <base>Ieee80211PrimConfirm</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ScanConfirm</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ScanConfirm</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Prim_ScanConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_ScanConfirm</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_ScanConfirm &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Prim_ScanConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBssListArraySize</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getBssListArraySize</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211Prim_BSSDescription &amp;</type>
      <name>getBssList</name>
      <anchor>a8</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211Prim_BSSDescription &amp;</type>
      <name>getBssList</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBssList</name>
      <anchor>a10</anchor>
      <arglist>(unsigned int k, const Ieee80211Prim_BSSDescription &amp;bssList_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Prim_ScanConfirm &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211Prim_BSSDescription *</type>
      <name>bssList_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>bssList_arraysize</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Prim_ScanRequest</name>
    <filename>class_ieee80211_prim___scan_request.html</filename>
    <base>Ieee80211PrimRequest</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ScanRequest</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211Prim_ScanRequest</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211Prim_ScanRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211Prim_ScanRequest</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211Prim_ScanRequest &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211Prim_ScanRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBSSType</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBSSType</name>
      <anchor>a7</anchor>
      <arglist>(int BSSType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getBSSID</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getBSSID</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBSSID</name>
      <anchor>a10</anchor>
      <arglist>(const MACAddress &amp;BSSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSSID</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSID</name>
      <anchor>a12</anchor>
      <arglist>(const char *SSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getActiveScan</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setActiveScan</name>
      <anchor>a14</anchor>
      <arglist>(bool activeScan_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getProbeDelay</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProbeDelay</name>
      <anchor>a16</anchor>
      <arglist>(double probeDelay_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelListArraySize</name>
      <anchor>a17</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getChannelListArraySize</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelList</name>
      <anchor>a19</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelList</name>
      <anchor>a20</anchor>
      <arglist>(unsigned int k, int channelList_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMinChannelTime</name>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMinChannelTime</name>
      <anchor>a22</anchor>
      <arglist>(double minChannelTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxChannelTime</name>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxChannelTime</name>
      <anchor>a24</anchor>
      <arglist>(double maxChannelTime_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211Prim_ScanRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>BSSType_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>BSSID_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>SSID_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>activeScan_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>probeDelay_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>channelList_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>channelList_arraysize</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minChannelTime_var</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxChannelTime_var</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211PrimConfirm</name>
    <filename>class_ieee80211_prim_confirm.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211PrimConfirm</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211PrimConfirm</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211PrimConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211PrimConfirm</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211PrimConfirm &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211PrimConfirm &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getResultCode</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResultCode</name>
      <anchor>a7</anchor>
      <arglist>(int resultCode_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211PrimConfirm &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>resultCode_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211PrimRequest</name>
    <filename>class_ieee80211_prim_request.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211PrimRequest</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211PrimRequest</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211PrimRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211PrimRequest</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211PrimRequest &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211PrimRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211PrimRequest &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ProbeRequestFrame</name>
    <filename>class_ieee80211_probe_request_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeRequestFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeRequestFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211ProbeRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ProbeRequestFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ProbeRequestFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211ProbeRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ProbeRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211ProbeRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchor>a9</anchor>
      <arglist>(const Ieee80211ProbeRequestFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211ProbeRequestFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211ProbeRequestFrameBody</type>
      <name>body_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ProbeRequestFrameBody</name>
    <filename>class_ieee80211_probe_request_frame_body.html</filename>
    <base>Ieee80211FrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeRequestFrameBody</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeRequestFrameBody</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211ProbeRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ProbeRequestFrameBody</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ProbeRequestFrameBody &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211ProbeRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSSID</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSID</name>
      <anchor>a7</anchor>
      <arglist>(const char *SSID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211SupportedRatesElement &amp;</type>
      <name>getSupportedRates</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupportedRates</name>
      <anchor>a10</anchor>
      <arglist>(const Ieee80211SupportedRatesElement &amp;supportedRates_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211ProbeRequestFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>SSID_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211SupportedRatesElement</type>
      <name>supportedRates_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ProbeResponseFrame</name>
    <filename>class_ieee80211_probe_response_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeResponseFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeResponseFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211ProbeResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ProbeResponseFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ProbeResponseFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211ProbeResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ProbeResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211ProbeResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchor>a9</anchor>
      <arglist>(const Ieee80211ProbeResponseFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211ProbeResponseFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211ProbeResponseFrameBody</type>
      <name>body_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ProbeResponseFrameBody</name>
    <filename>class_ieee80211_probe_response_frame_body.html</filename>
    <base>Ieee80211BeaconFrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeResponseFrameBody</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ProbeResponseFrameBody</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211ProbeResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ProbeResponseFrameBody</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ProbeResponseFrameBody &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211ProbeResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211ProbeResponseFrameBody &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211Radio</name>
    <filename>class_ieee80211_radio.html</filename>
    <base>AbstractRadio</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IReceptionModel *</type>
      <name>createReceptionModel</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IRadioModel *</type>
      <name>createRadioModel</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211RadioModel</name>
    <filename>class_ieee80211_radio_model.html</filename>
    <base>IRadioModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchor>a0</anchor>
      <arglist>(cModule *radioModule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calculateDuration</name>
      <anchor>a1</anchor>
      <arglist>(AirFrame *airframe)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReceivedCorrectly</name>
      <anchor>a2</anchor>
      <arglist>(AirFrame *airframe, const SnrList &amp;receivedList)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>packetOk</name>
      <anchor>b0</anchor>
      <arglist>(double snirMin, int lengthMPDU, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>dB2fraction</name>
      <anchor>b1</anchor>
      <arglist>(double dB)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snirThreshold</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ReassociationRequestFrame</name>
    <filename>class_ieee80211_reassociation_request_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationRequestFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationRequestFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ReassociationRequestFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ReassociationRequestFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ReassociationRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211ReassociationRequestFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchor>a9</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211ReassociationRequestFrameBody</type>
      <name>body_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ReassociationRequestFrameBody</name>
    <filename>class_ieee80211_reassociation_request_frame_body.html</filename>
    <base>Ieee80211AssociationRequestFrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationRequestFrameBody</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationRequestFrameBody</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ReassociationRequestFrameBody</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ReassociationRequestFrameBody &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getCurrentAP</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getCurrentAP</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentAP</name>
      <anchor>a8</anchor>
      <arglist>(const MACAddress &amp;currentAP_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211ReassociationRequestFrameBody &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>currentAP_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ReassociationResponseFrame</name>
    <filename>class_ieee80211_reassociation_response_frame.html</filename>
    <base>Ieee80211ManagementFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationResponseFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationResponseFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ReassociationResponseFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ReassociationResponseFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ieee80211ReassociationResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ieee80211ReassociationResponseFrameBody &amp;</type>
      <name>getBody</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBody</name>
      <anchor>a9</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrameBody &amp;body_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ieee80211ReassociationResponseFrameBody</type>
      <name>body_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211ReassociationResponseFrameBody</name>
    <filename>class_ieee80211_reassociation_response_frame_body.html</filename>
    <base>Ieee80211AssociationResponseFrameBody</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationResponseFrameBody</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211ReassociationResponseFrameBody</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211ReassociationResponseFrameBody</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211ReassociationResponseFrameBody &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrameBody &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211ReassociationResponseFrameBody &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211RTSFrame</name>
    <filename>class_ieee80211_r_t_s_frame.html</filename>
    <base>Ieee80211TwoAddressFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211RTSFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211RTSFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211RTSFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211RTSFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211RTSFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211RTSFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211RTSFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ieee80211SupportedRatesElement</name>
    <filename>struct_ieee80211_supported_rates_element.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee80211SupportedRatesElement</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>numRates</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rate</name>
      <anchor>o1</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee80211TwoAddressFrame</name>
    <filename>class_ieee80211_two_address_frame.html</filename>
    <base>Ieee80211OneAddressFrame</base>
    <member kind="function">
      <type></type>
      <name>Ieee80211TwoAddressFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee80211TwoAddressFrame</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee80211TwoAddressFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee80211TwoAddressFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee80211TwoAddressFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee80211TwoAddressFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getTransmitterAddress</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getTransmitterAddress</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransmitterAddress</name>
      <anchor>a9</anchor>
      <arglist>(const MACAddress &amp;transmitterAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee80211TwoAddressFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>transmitterAddress_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ieee802Ctrl</name>
    <filename>class_ieee802_ctrl.html</filename>
    <member kind="function">
      <type></type>
      <name>Ieee802Ctrl</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ieee802Ctrl</name>
      <anchor>a1</anchor>
      <arglist>(const Ieee802Ctrl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ieee802Ctrl</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ieee802Ctrl &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Ieee802Ctrl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getSrc</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getSrc</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrc</name>
      <anchor>a8</anchor>
      <arglist>(const MACAddress &amp;src_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getDest</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getDest</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDest</name>
      <anchor>a11</anchor>
      <arglist>(const MACAddress &amp;dest_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getEtherType</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEtherType</name>
      <anchor>a13</anchor>
      <arglist>(int etherType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSsap</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSsap</name>
      <anchor>a15</anchor>
      <arglist>(int ssap_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDsap</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDsap</name>
      <anchor>a17</anchor>
      <arglist>(int dsap_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPauseUnits</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPauseUnits</name>
      <anchor>a19</anchor>
      <arglist>(int pauseUnits_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInputPort</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInputPort</name>
      <anchor>a21</anchor>
      <arglist>(int inputPort_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Ieee802Ctrl &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>src_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>dest_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>etherType_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ssap_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dsap_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pauseUnits_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inputPort_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IModulation</name>
    <filename>class_i_modulation.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IModulation</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>name</name>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>bitErrorRate</name>
      <anchor>a2</anchor>
      <arglist>(double snir, double bandwidth, double bitrate)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>in_addr</name>
    <filename>structin__addr.html</filename>
    <member kind="variable">
      <type>in_addr_t</type>
      <name>s_addr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INotifiable</name>
    <filename>class_i_notifiable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~INotifiable</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>a1</anchor>
      <arglist>(int category, cPolymorphic *details)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceEntry</name>
    <filename>class_interface_entry.html</filename>
    <member kind="function">
      <type></type>
      <name>InterfaceEntry</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterfaceEntry</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>interfaceId</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>networkLayerGateIndex</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodeOutputGateId</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodeInputGateId</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>peerNamId</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mtu</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDown</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBroadcast</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMulticast</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointToPoint</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoopback</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>datarate</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MACAddress &amp;</type>
      <name>macAddress</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InterfaceToken &amp;</type>
      <name>interfaceToken</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchor>a19</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNetworkLayerGateIndex</name>
      <anchor>a20</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeOutputGateId</name>
      <anchor>a21</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeInputGateId</name>
      <anchor>a22</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPeerNamId</name>
      <anchor>a23</anchor>
      <arglist>(int ni)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMtu</name>
      <anchor>a24</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDown</name>
      <anchor>a25</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBroadcast</name>
      <anchor>a26</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMulticast</name>
      <anchor>a27</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPointToPoint</name>
      <anchor>a28</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoopback</name>
      <anchor>a29</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDatarate</name>
      <anchor>a30</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMACAddress</name>
      <anchor>a31</anchor>
      <arglist>(const MACAddress &amp;macAddr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterfaceToken</name>
      <anchor>a32</anchor>
      <arglist>(const InterfaceToken &amp;token)</arglist>
    </member>
    <member kind="function">
      <type>IPv4InterfaceData *</type>
      <name>ipv4</name>
      <anchor>a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6InterfaceData *</type>
      <name>ipv6</name>
      <anchor>a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPolymorphic *</type>
      <name>protocol3</name>
      <anchor>a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPolymorphic *</type>
      <name>protocol4</name>
      <anchor>a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPv4Data</name>
      <anchor>a37</anchor>
      <arglist>(IPv4InterfaceData *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPv6Data</name>
      <anchor>a38</anchor>
      <arglist>(IPv6InterfaceData *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProtocol3Data</name>
      <anchor>a39</anchor>
      <arglist>(cPolymorphic *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProtocol4Data</name>
      <anchor>a40</anchor>
      <arglist>(cPolymorphic *p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>InterfaceEntry</name>
      <anchor>d0</anchor>
      <arglist>(const InterfaceEntry &amp;obj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>InterfaceEntry &amp;</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const InterfaceEntry &amp;obj)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_interfaceId</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>_name</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_nwLayerGateIndex</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_nodeOutputGateId</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_nodeInputGateId</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_peernamid</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_mtu</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_down</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_broadcast</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_multicast</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_pointToPoint</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_loopback</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>_datarate</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MACAddress</type>
      <name>_macAddr</name>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceToken</type>
      <name>_token</name>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPv4InterfaceData *</type>
      <name>_ipv4data</name>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPv6InterfaceData *</type>
      <name>_ipv6data</name>
      <anchor>r16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cPolymorphic *</type>
      <name>_protocol3data</name>
      <anchor>r17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cPolymorphic *</type>
      <name>_protocol4data</name>
      <anchor>r18</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InterfaceTable</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceTable</name>
    <filename>class_interface_table.html</filename>
    <base>INotifiable</base>
    <member kind="function">
      <type></type>
      <name>InterfaceTable</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterfaceTable</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>a2</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInterface</name>
      <anchor>a3</anchor>
      <arglist>(InterfaceEntry *entry, cModule *ifmod)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numInterfaces</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>interfaceAt</name>
      <anchor>a5</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>interfaceByNodeOutputGateId</name>
      <anchor>a6</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>interfaceByNodeInputGateId</name>
      <anchor>a7</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>interfaceByNetworkLayerGateIndex</name>
      <anchor>a8</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>interfaceByName</name>
      <anchor>a9</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>firstLoopbackInterface</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>discoverConnectingGates</name>
      <anchor>b1</anchor>
      <arglist>(InterfaceEntry *entry, cModule *ifmod)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numInitStages</name>
      <anchor>b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchor>b3</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; InterfaceEntry * &gt;</type>
      <name>InterfaceVector</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceVector</type>
      <name>interfaces</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceTableAccess</name>
    <filename>class_interface_table_access.html</filename>
    <base>ModuleAccess&lt; InterfaceTable &gt;</base>
    <member kind="function">
      <type></type>
      <name>InterfaceTableAccess</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceToken</name>
    <filename>class_interface_token.html</filename>
    <member kind="function">
      <type></type>
      <name>InterfaceToken</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceToken</name>
      <anchor>a1</anchor>
      <arglist>(uint32 low, uint32 normal, int len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceToken</name>
      <anchor>a2</anchor>
      <arglist>(const InterfaceToken &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const InterfaceToken &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>low</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>normal</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32</type>
      <name>_normal</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32</type>
      <name>_low</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>_len</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ip</name>
    <filename>structip.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_hl</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_v</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_tos</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_len</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_id</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_off</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_ttl</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_p</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_sum</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>in_addr ip_src</type>
      <name>ip_dst</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IP</name>
    <filename>class_i_p.html</filename>
    <base>QueueBase</base>
    <member kind="function">
      <type></type>
      <name>IP</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InterfaceEntry *</type>
      <name>sourceInterfaceFrom</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPDatagram *</type>
      <name>encapsulate</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *transportPacket, InterfaceEntry *&amp;destIE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePacketFromNetwork</name>
      <anchor>b3</anchor>
      <arglist>(IPDatagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromHL</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleARP</name>
      <anchor>b5</anchor>
      <arglist>(ARPPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReceivedICMP</name>
      <anchor>b6</anchor>
      <arglist>(ICMPMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>routePacket</name>
      <anchor>b7</anchor>
      <arglist>(IPDatagram *datagram, InterfaceEntry *destIE, bool fromHL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>routeMulticastPacket</name>
      <anchor>b8</anchor>
      <arglist>(IPDatagram *datagram, InterfaceEntry *destIE, InterfaceEntry *fromIE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>localDeliver</name>
      <anchor>b9</anchor>
      <arglist>(IPDatagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>decapsulateIP</name>
      <anchor>b10</anchor>
      <arglist>(IPDatagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fragmentAndSend</name>
      <anchor>b11</anchor>
      <arglist>(IPDatagram *datagram, InterfaceEntry *ie, IPAddress nextHopAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDatagramToOutput</name>
      <anchor>b12</anchor>
      <arglist>(IPDatagram *datagram, InterfaceEntry *ie, IPAddress nextHopAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>endService</name>
      <anchor>b14</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingTable *</type>
      <name>rt</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMPAccess</type>
      <name>icmpAccess</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>defaultTimeToLive</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>defaultMCTimeToLive</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>fragmentTimeoutTime</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>curFragmentId</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPFragBuf</type>
      <name>fragbuf</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastCheckTime</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProtocolMapping</type>
      <name>mapping</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numMulticast</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numLocalDeliver</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDropped</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numUnroutable</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numForwarded</name>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ip_timestamp</name>
    <filename>structip__timestamp.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_code</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_len</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_ptr</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_flg</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_oflw</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ip_timestamp::ipt_timestamp</type>
      <name>ipt_timestamp</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <class kind="union">ip_timestamp::ipt_timestamp</class>
  </compound>
  <compound kind="union">
    <name>ip_timestamp::ipt_timestamp</name>
    <filename>unionip__timestamp_1_1ipt__timestamp.html</filename>
    <member kind="variable">
      <type>n_long</type>
      <name>ipt_time</name>
      <anchor>o0</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="variable">
      <type>ip_timestamp::ipt_timestamp::ipt_ta</type>
      <name>ipt_ta</name>
      <anchor>o1</anchor>
      <arglist>[1]</arglist>
    </member>
    <class kind="struct">ip_timestamp::ipt_timestamp::ipt_ta</class>
  </compound>
  <compound kind="struct">
    <name>ip_timestamp::ipt_timestamp::ipt_ta</name>
    <filename>structip__timestamp_1_1ipt__timestamp_1_1ipt__ta.html</filename>
    <member kind="variable">
      <type>in_addr</type>
      <name>ipt_addr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_long</type>
      <name>ipt_time</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPAddress</name>
    <filename>class_i_p_address.html</filename>
    <member kind="function">
      <type>IPAddress &amp;</type>
      <name>operator=</name>
      <anchor>a0</anchor>
      <arglist>(const IPAddress &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchor>a2</anchor>
      <arglist>(const IPAddress &amp;toCmp) const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>doAnd</name>
      <anchor>a3</anchor>
      <arglist>(const IPAddress &amp;ip) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getInt</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDByte</name>
      <anchor>a6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getIPClass</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMulticast</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkLocalMulticast</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNetwork</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNetworkMask</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNetwork</name>
      <anchor>a12</anchor>
      <arglist>(const IPAddress &amp;toCmp) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prefixMatches</name>
      <anchor>a13</anchor>
      <arglist>(const IPAddress &amp;to_cmp, int numbits) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numMatchingPrefixBits</name>
      <anchor>a14</anchor>
      <arglist>(const IPAddress &amp;to_cmp) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>netmaskLength</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a16</anchor>
      <arglist>(const IPAddress &amp;addr1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a17</anchor>
      <arglist>(const IPAddress &amp;addr1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a18</anchor>
      <arglist>(const IPAddress &amp;addr1) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchor>z28_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchor>z28_1</anchor>
      <arglist>(uint32 i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchor>z28_2</anchor>
      <arglist>(int i0, int i1, int i2, int i3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchor>z28_3</anchor>
      <arglist>(const char *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddress</name>
      <anchor>z28_4</anchor>
      <arglist>(const IPAddress &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPAddress</name>
      <anchor>z28_5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>z29_0</anchor>
      <arglist>(uint32 i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>z29_1</anchor>
      <arglist>(int i0, int i1, int i2, int i3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>z29_2</anchor>
      <arglist>(const char *t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>maskedAddrAreEqual</name>
      <anchor>e0</anchor>
      <arglist>(const IPAddress &amp;addr1, const IPAddress &amp;addr2, const IPAddress &amp;netmask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isWellFormed</name>
      <anchor>e1</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>UNSPECIFIED_ADDRESS</name>
      <anchor>z27_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>LOOPBACK_ADDRESS</name>
      <anchor>z27_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>LOOPBACK_NETMASK</name>
      <anchor>z27_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALLONES_ADDRESS</name>
      <anchor>z27_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALL_HOSTS_MCAST</name>
      <anchor>z27_4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALL_ROUTERS_MCAST</name>
      <anchor>z27_5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALL_DVMRP_ROUTERS_MCAST</name>
      <anchor>z27_6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALL_OSPF_ROUTERS_MCAST</name>
      <anchor>z27_7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPAddress</type>
      <name>ALL_OSPF_DESIGNATED_ROUTERS_MCAST</name>
      <anchor>z27_8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>keepFirstBits</name>
      <anchor>b0</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>parseIPAddress</name>
      <anchor>f0</anchor>
      <arglist>(const char *text, unsigned char tobytes[])</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>addr</name>
      <anchor>p0</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPAddressResolver</name>
    <filename>class_i_p_address_resolver.html</filename>
    <member kind="enumvalue">
      <name>ADDR_PREFER_IPv4</name>
      <anchor>w4w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDR_PREFER_IPv6</name>
      <anchor>w4w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDR_IPv4</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDR_IPv6</name>
      <anchor>w4w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPAddressResolver</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPAddressResolver</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>resolve</name>
      <anchor>a2</anchor>
      <arglist>(const char *str, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryResolve</name>
      <anchor>a3</anchor>
      <arglist>(const char *str, IPvXAddress &amp;result, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>addressOf</name>
      <anchor>z31_0</anchor>
      <arglist>(cModule *host, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>addressOf</name>
      <anchor>z31_1</anchor>
      <arglist>(cModule *host, const char *ifname, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>routerIdOf</name>
      <anchor>z31_2</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>getAddressFrom</name>
      <anchor>z31_3</anchor>
      <arglist>(InterfaceTable *ift, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>getAddressFrom</name>
      <anchor>z31_4</anchor>
      <arglist>(InterfaceEntry *ie, int addrType=ADDR_PREFER_IPv6)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceTable *</type>
      <name>interfaceTableOf</name>
      <anchor>z31_5</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function">
      <type>RoutingTable *</type>
      <name>routingTableOf</name>
      <anchor>z31_6</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function">
      <type>NotificationBoard *</type>
      <name>notificationBoardOf</name>
      <anchor>z31_7</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceTable *</type>
      <name>findInterfaceTableOf</name>
      <anchor>z31_8</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function">
      <type>RoutingTable *</type>
      <name>findRoutingTableOf</name>
      <anchor>z31_9</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function">
      <type>NotificationBoard *</type>
      <name>findNotificationBoardOf</name>
      <anchor>z31_10</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IPAddress</type>
      <name>getIPv4AddressFrom</name>
      <anchor>d0</anchor>
      <arglist>(InterfaceTable *ift)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IPv6Address</type>
      <name>getIPv6AddressFrom</name>
      <anchor>d1</anchor>
      <arglist>(InterfaceTable *ift)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IPv6Address</type>
      <name>getIPv6AddressFrom</name>
      <anchor>d2</anchor>
      <arglist>(InterfaceTable *ift, int scope)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IPv6Address</type>
      <name>getInterfaceIPv6Address</name>
      <anchor>d3</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPassiveQueue</name>
    <filename>class_i_passive_queue.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPassiveQueue</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>requestPacket</name>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPControlInfo</name>
    <filename>class_i_p_control_info.html</filename>
    <base>IPControlInfo_Base</base>
    <member kind="function">
      <type></type>
      <name>IPControlInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPControlInfo</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPControlInfo</name>
      <anchor>a2</anchor>
      <arglist>(const IPControlInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IPControlInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigDatagram</name>
      <anchor>a4</anchor>
      <arglist>(IPDatagram *d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPDatagram *</type>
      <name>removeOrigDatagram</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPDatagram *</type>
      <name>dgram</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPControlInfo_Base</name>
    <filename>class_i_p_control_info___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPControlInfo_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>destAddr</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>destAddr</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchor>a5</anchor>
      <arglist>(const IPAddress &amp;destAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>srcAddr</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>srcAddr</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddr</name>
      <anchor>a8</anchor>
      <arglist>(const IPAddress &amp;srcAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>interfaceId</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceId</name>
      <anchor>a10</anchor>
      <arglist>(int interfaceId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>protocol</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProtocol</name>
      <anchor>a12</anchor>
      <arglist>(short protocol_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>diffServCodePoint</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDiffServCodePoint</name>
      <anchor>a14</anchor>
      <arglist>(unsigned char diffServCodePoint_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>timeToLive</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeToLive</name>
      <anchor>a16</anchor>
      <arglist>(short timeToLive_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dontFragment</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDontFragment</name>
      <anchor>a18</anchor>
      <arglist>(bool dontFragment_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPControlInfo_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPControlInfo_Base</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPControlInfo_Base</name>
      <anchor>b2</anchor>
      <arglist>(const IPControlInfo_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPControlInfo_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const IPControlInfo_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>destAddr_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>srcAddr_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>interfaceId_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>protocol_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>diffServCodePoint_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>timeToLive_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dontFragment_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPDatagram</name>
    <filename>class_i_p_datagram.html</filename>
    <member kind="function">
      <type></type>
      <name>IPDatagram</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPDatagram</name>
      <anchor>a1</anchor>
      <arglist>(const IPDatagram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPDatagram</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPDatagram &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPDatagram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>version</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVersion</name>
      <anchor>a8</anchor>
      <arglist>(short version_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>headerLength</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHeaderLength</name>
      <anchor>a10</anchor>
      <arglist>(short headerLength_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>srcAddress</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>srcAddress</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddress</name>
      <anchor>a13</anchor>
      <arglist>(const IPAddress &amp;srcAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>destAddress</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>destAddress</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddress</name>
      <anchor>a16</anchor>
      <arglist>(const IPAddress &amp;destAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>transportProtocol</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransportProtocol</name>
      <anchor>a18</anchor>
      <arglist>(int transportProtocol_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>timeToLive</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeToLive</name>
      <anchor>a20</anchor>
      <arglist>(short timeToLive_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>identification</name>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdentification</name>
      <anchor>a22</anchor>
      <arglist>(int identification_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>moreFragments</name>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMoreFragments</name>
      <anchor>a24</anchor>
      <arglist>(bool moreFragments_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dontFragment</name>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDontFragment</name>
      <anchor>a26</anchor>
      <arglist>(bool dontFragment_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fragmentOffset</name>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFragmentOffset</name>
      <anchor>a28</anchor>
      <arglist>(int fragmentOffset_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>diffServCodePoint</name>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDiffServCodePoint</name>
      <anchor>a30</anchor>
      <arglist>(unsigned char diffServCodePoint_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>optionCode</name>
      <anchor>a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptionCode</name>
      <anchor>a32</anchor>
      <arglist>(int optionCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPRecordRouteOption &amp;</type>
      <name>recordRoute</name>
      <anchor>a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPRecordRouteOption &amp;</type>
      <name>recordRoute</name>
      <anchor>a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordRoute</name>
      <anchor>a35</anchor>
      <arglist>(const IPRecordRouteOption &amp;recordRoute_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPTimestampOption &amp;</type>
      <name>timestampOption</name>
      <anchor>a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPTimestampOption &amp;</type>
      <name>timestampOption</name>
      <anchor>a37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimestampOption</name>
      <anchor>a38</anchor>
      <arglist>(const IPTimestampOption &amp;timestampOption_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPSourceRoutingOption &amp;</type>
      <name>sourceRoutingOption</name>
      <anchor>a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPSourceRoutingOption &amp;</type>
      <name>sourceRoutingOption</name>
      <anchor>a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceRoutingOption</name>
      <anchor>a41</anchor>
      <arglist>(const IPSourceRoutingOption &amp;sourceRoutingOption_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPDatagram &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>version_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>headerLength_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>srcAddress_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>destAddress_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>transportProtocol_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>timeToLive_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>identification_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>moreFragments_var</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dontFragment_var</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fragmentOffset_var</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>diffServCodePoint_var</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>optionCode_var</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPRecordRouteOption</type>
      <name>recordRoute_var</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPTimestampOption</type>
      <name>timestampOption_var</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPSourceRoutingOption</type>
      <name>sourceRoutingOption_var</name>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPFragBuf</name>
    <filename>class_i_p_frag_buf.html</filename>
    <member kind="function">
      <type></type>
      <name>IPFragBuf</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPFragBuf</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(ICMP *icmp)</arglist>
    </member>
    <member kind="function">
      <type>IPDatagram *</type>
      <name>addFragment</name>
      <anchor>a3</anchor>
      <arglist>(IPDatagram *datagram, simtime_t now)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purgeStaleFragments</name>
      <anchor>a4</anchor>
      <arglist>(simtime_t lastupdate)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Key, DatagramBuffer &gt;</type>
      <name>Buffers</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Buffers</type>
      <name>bufs</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMP *</type>
      <name>icmpModule</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">IPFragBuf::DatagramBuffer</class>
    <class kind="struct">IPFragBuf::Key</class>
  </compound>
  <compound kind="struct">
    <name>IPFragBuf::DatagramBuffer</name>
    <filename>struct_i_p_frag_buf_1_1_datagram_buffer.html</filename>
    <member kind="variable">
      <type>ReassemblyBuffer</type>
      <name>buf</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPDatagram *</type>
      <name>datagram</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastupdate</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPFragBuf::Key</name>
    <filename>struct_i_p_frag_buf_1_1_key.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a0</anchor>
      <arglist>(const Key &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>ushort</type>
      <name>id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>src</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>dest</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPRecordRouteOption</name>
    <filename>class_i_p_record_route_option.html</filename>
    <member kind="function">
      <type></type>
      <name>IPRecordRouteOption</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPRecordRouteOption</name>
      <anchor>a1</anchor>
      <arglist>(const IPRecordRouteOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPRecordRouteOption</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPRecordRouteOption &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPRecordRouteOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRecordAddressArraySize</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchor>a8</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordAddress</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int k, const IPAddress &amp;recordAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNextAddressPtr</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextAddressPtr</name>
      <anchor>a11</anchor>
      <arglist>(short nextAddressPtr_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPRecordRouteOption &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>recordAddress_var</name>
      <anchor>p0</anchor>
      <arglist>[MAX_IPADDR_OPTION_ENTRIES]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>nextAddressPtr_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPRoutingDecision</name>
    <filename>class_i_p_routing_decision.html</filename>
    <member kind="function">
      <type></type>
      <name>IPRoutingDecision</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPRoutingDecision</name>
      <anchor>a1</anchor>
      <arglist>(const IPRoutingDecision &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPRoutingDecision</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPRoutingDecision &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPRoutingDecision &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>interfaceId</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceId</name>
      <anchor>a7</anchor>
      <arglist>(int interfaceId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>nextHopAddr</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>nextHopAddr</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopAddr</name>
      <anchor>a10</anchor>
      <arglist>(const IPAddress &amp;nextHopAddr_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPRoutingDecision &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>interfaceId_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>nextHopAddr_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPSerializer</name>
    <filename>class_i_p_serializer.html</filename>
    <member kind="function">
      <type></type>
      <name>IPSerializer</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialize</name>
      <anchor>a1</anchor>
      <arglist>(IPDatagram *dgram, unsigned char *buf, unsigned int bufsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchor>a2</anchor>
      <arglist>(unsigned char *buf, unsigned int bufsize, IPDatagram *dest)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPSourceRoutingOption</name>
    <filename>class_i_p_source_routing_option.html</filename>
    <member kind="function">
      <type></type>
      <name>IPSourceRoutingOption</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPSourceRoutingOption</name>
      <anchor>a1</anchor>
      <arglist>(const IPSourceRoutingOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPSourceRoutingOption</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPSourceRoutingOption &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPSourceRoutingOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRecordAddressArraySize</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchor>a8</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordAddress</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int k, const IPAddress &amp;recordAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNextAddressPtr</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextAddressPtr</name>
      <anchor>a11</anchor>
      <arglist>(short nextAddressPtr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getLastAddressPtr</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastAddressPtr</name>
      <anchor>a13</anchor>
      <arglist>(short lastAddressPtr_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPSourceRoutingOption &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>recordAddress_var</name>
      <anchor>p0</anchor>
      <arglist>[MAX_IPADDR_OPTION_ENTRIES]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>nextAddressPtr_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>lastAddressPtr_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPTimestampOption</name>
    <filename>class_i_p_timestamp_option.html</filename>
    <member kind="function">
      <type></type>
      <name>IPTimestampOption</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPTimestampOption</name>
      <anchor>a1</anchor>
      <arglist>(const IPTimestampOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPTimestampOption</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPTimestampOption &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPTimestampOption &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFlag</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlag</name>
      <anchor>a7</anchor>
      <arglist>(int flag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getOverflow</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOverflow</name>
      <anchor>a9</anchor>
      <arglist>(short overflow_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getNextAddressPtr</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextAddressPtr</name>
      <anchor>a11</anchor>
      <arglist>(short nextAddressPtr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRecordAddressArraySize</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchor>a13</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getRecordAddress</name>
      <anchor>a14</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordAddress</name>
      <anchor>a15</anchor>
      <arglist>(unsigned int k, const IPAddress &amp;recordAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRecordTimestampArraySize</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getRecordTimestamp</name>
      <anchor>a17</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordTimestamp</name>
      <anchor>a18</anchor>
      <arglist>(unsigned int k, simtime_t recordTimestamp_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPTimestampOption &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>flag_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>overflow_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>nextAddressPtr_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>recordAddress_var</name>
      <anchor>p3</anchor>
      <arglist>[MAX_TIMESTAMP_OPTION_ENTRIES]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>recordTimestamp_var</name>
      <anchor>p4</anchor>
      <arglist>[MAX_IPADDR_OPTION_ENTRIES]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPTrafGen</name>
    <filename>class_i_p_traf_gen.html</filename>
    <base>IPTrafSink</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPvXAddress</type>
      <name>chooseDestAddr</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPacket</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b3</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nodeName</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>protocol</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>msgByteLength</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPackets</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IPvXAddress &gt;</type>
      <name>destAddresses</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSent</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>counter</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPTrafSink</name>
    <filename>class_i_p_traf_sink.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printPacket</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numReceived</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv4InterfaceData</name>
    <filename>class_i_pv4_interface_data.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; IPAddress &gt;</type>
      <name>IPAddressVector</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv4InterfaceData</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv4InterfaceData</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>inetAddress</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>netmask</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>metric</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IPAddressVector &amp;</type>
      <name>multicastGroups</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInetAddress</name>
      <anchor>a8</anchor>
      <arglist>(IPAddress a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNetmask</name>
      <anchor>a9</anchor>
      <arglist>(IPAddress m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMetric</name>
      <anchor>a10</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMulticastGroups</name>
      <anchor>a11</anchor>
      <arglist>(const IPAddressVector &amp;v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>IPv4InterfaceData</name>
      <anchor>d0</anchor>
      <arglist>(const IPv4InterfaceData &amp;obj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IPv4InterfaceData &amp;</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const IPv4InterfaceData &amp;obj)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPAddress</type>
      <name>_inetAddr</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPAddress</type>
      <name>_netmask</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_metric</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPAddressVector</type>
      <name>_multicastGroups</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6</name>
    <filename>class_i_pv6.html</filename>
    <base>QueueBase</base>
    <member kind="function">
      <type></type>
      <name>IPv6</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InterfaceEntry *</type>
      <name>sourceInterfaceFrom</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6Datagram *</type>
      <name>encapsulate</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *transportPacket, InterfaceEntry *&amp;destIE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDatagramFromNetwork</name>
      <anchor>b3</anchor>
      <arglist>(IPv6Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromHL</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReceivedICMP</name>
      <anchor>b5</anchor>
      <arglist>(ICMPv6Message *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fragmentAndRoute</name>
      <anchor>b6</anchor>
      <arglist>(IPv6Datagram *datagram, InterfaceEntry *destIE=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>routePacket</name>
      <anchor>b7</anchor>
      <arglist>(IPv6Datagram *datagram, InterfaceEntry *destIE, bool fromHL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>routeMulticastPacket</name>
      <anchor>b8</anchor>
      <arglist>(IPv6Datagram *datagram, InterfaceEntry *destIE, InterfaceEntry *fromIE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>localDeliver</name>
      <anchor>b9</anchor>
      <arglist>(IPv6Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>decapsulate</name>
      <anchor>b10</anchor>
      <arglist>(IPv6Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDatagramToOutput</name>
      <anchor>b11</anchor>
      <arglist>(IPv6Datagram *datagram, InterfaceEntry *ie, const MACAddress &amp;macAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>endService</name>
      <anchor>b13</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingTable6 *</type>
      <name>rt</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6NeighbourDiscovery *</type>
      <name>nd</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMPv6 *</type>
      <name>icmp</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>curFragmentId</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6FragBuf</type>
      <name>fragbuf</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastCheckTime</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProtocolMapping</type>
      <name>mapping</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numMulticast</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numLocalDeliver</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDropped</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numUnroutable</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numForwarded</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6Address</name>
    <filename>class_i_pv6_address.html</filename>
    <member kind="enumeration">
      <name>Scope</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSPECIFIED</name>
      <anchor>w6w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOOPBACK</name>
      <anchor>w6w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTICAST</name>
      <anchor>w6w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK</name>
      <anchor>w6w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SITE</name>
      <anchor>w6w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLOBAL</name>
      <anchor>w6w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Address</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Address</name>
      <anchor>a1</anchor>
      <arglist>(uint32 segment0, uint32 segment1, uint32 segment2, uint32 segment3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Address</name>
      <anchor>a2</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchor>a4</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchor>a7</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryParse</name>
      <anchor>a8</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryParseAddrWithPrefix</name>
      <anchor>a9</anchor>
      <arglist>(const char *addr, int &amp;prefixLen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a10</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>a12</anchor>
      <arglist>(uint32 d0, uint32 d1, uint32 d2, uint32 d3)</arglist>
    </member>
    <member kind="function">
      <type>uint32 *</type>
      <name>words</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scope</type>
      <name>scope</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPv6Address</type>
      <name>getPrefix</name>
      <anchor>a15</anchor>
      <arglist>(int prefixLength) const </arglist>
    </member>
    <member kind="function">
      <type>IPv6Address</type>
      <name>getSuffix</name>
      <anchor>a16</anchor>
      <arglist>(int prefixLength) const </arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>setPrefix</name>
      <anchor>a17</anchor>
      <arglist>(const IPv6Address &amp;fromAddr, int prefixLength)</arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>setSuffix</name>
      <anchor>a18</anchor>
      <arglist>(const IPv6Address &amp;fromAddr, int prefixLength)</arglist>
    </member>
    <member kind="function">
      <type>IPv6Address</type>
      <name>formSolicitedNodeMulticastAddress</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPv6Address</type>
      <name>formSubnetRouterAnycastAddress</name>
      <anchor>a20</anchor>
      <arglist>(int prefixLength) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchor>a21</anchor>
      <arglist>(const IPv6Address &amp;prefix, int prefixLength) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMulticast</name>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnicast</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoopback</name>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkLocal</name>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSiteLocal</name>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGlobal</name>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>multicastScope</name>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>scopeName</name>
      <anchor>e0</anchor>
      <arglist>(Scope s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>constructMask</name>
      <anchor>e1</anchor>
      <arglist>(int prefixLength, uint32 *mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IPv6Address</type>
      <name>formLinkLocalAddress</name>
      <anchor>e2</anchor>
      <arglist>(const InterfaceToken &amp;ident)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>UNSPECIFIED_ADDRESS</name>
      <anchor>z33_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>LOOPBACK_ADDRESS</name>
      <anchor>z33_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>ALL_NODES_1</name>
      <anchor>z33_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>ALL_NODES_2</name>
      <anchor>z33_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>ALL_ROUTERS_1</name>
      <anchor>z33_4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>ALL_ROUTERS_2</name>
      <anchor>z33_5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>ALL_ROUTERS_5</name>
      <anchor>z33_6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>SOLICITED_NODE_PREFIX</name>
      <anchor>z33_7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IPv6Address</type>
      <name>LINKLOCAL_PREFIX</name>
      <anchor>z33_8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>doTryParse</name>
      <anchor>b0</anchor>
      <arglist>(const char *&amp;addr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32</type>
      <name>d</name>
      <anchor>r0</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6AuthenticationHeader</name>
    <filename>class_i_pv6_authentication_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6AuthenticationHeader</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6AuthenticationHeader</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6AuthenticationHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6AuthenticationHeader</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6AuthenticationHeader &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6AuthenticationHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6AuthenticationHeader &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6ControlInfo</name>
    <filename>class_i_pv6_control_info.html</filename>
    <base>IPv6ControlInfo_Base</base>
    <member kind="function">
      <type></type>
      <name>IPv6ControlInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPv6ControlInfo</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6ControlInfo</name>
      <anchor>a2</anchor>
      <arglist>(const IPv6ControlInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IPv6ControlInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6ControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigDatagram</name>
      <anchor>a4</anchor>
      <arglist>(IPv6Datagram *d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Datagram *</type>
      <name>removeOrigDatagram</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Datagram *</type>
      <name>dgram</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6ControlInfo_Base</name>
    <filename>class_i_pv6_control_info___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6ControlInfo_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>protocol</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProtocol</name>
      <anchor>a4</anchor>
      <arglist>(int protocol_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>destAddr</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>destAddr</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchor>a7</anchor>
      <arglist>(const IPv6Address &amp;destAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>srcAddr</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>srcAddr</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddr</name>
      <anchor>a10</anchor>
      <arglist>(const IPv6Address &amp;srcAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>hopLimit</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopLimit</name>
      <anchor>a12</anchor>
      <arglist>(short hopLimit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>interfaceId</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceId</name>
      <anchor>a14</anchor>
      <arglist>(int interfaceId_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6ControlInfo_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6ControlInfo_Base</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6ControlInfo_Base</name>
      <anchor>b2</anchor>
      <arglist>(const IPv6ControlInfo_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6ControlInfo_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const IPv6ControlInfo_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>protocol_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>destAddr_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>srcAddr_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>hopLimit_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>interfaceId_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6Datagram</name>
    <filename>class_i_pv6_datagram.html</filename>
    <base>IPv6Datagram_Base</base>
    <member kind="function">
      <type></type>
      <name>IPv6Datagram</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Datagram</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6Datagram &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IPv6Datagram &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const IPv6Datagram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExtensionHeaderArraySize</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExtensionHeader</name>
      <anchor>a5</anchor>
      <arglist>(unsigned int k, const IPv6ExtensionHeaderPtr &amp;extensionHeader_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>extensionHeaderArraySize</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6ExtensionHeaderPtr &amp;</type>
      <name>extensionHeader</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addExtensionHeader</name>
      <anchor>a8</anchor>
      <arglist>(IPv6ExtensionHeader *eh, int atPos=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>calculateHeaderByteLength</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; IPv6ExtensionHeader * &gt;</type>
      <name>ExtensionHeaders</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExtensionHeaders</type>
      <name>extensionHeaders</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6Datagram_Base</name>
    <filename>class_i_pv6_datagram___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6Datagram_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>srcAddress</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>srcAddress</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddress</name>
      <anchor>a6</anchor>
      <arglist>(const IPv6Address &amp;srcAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>destAddress</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>destAddress</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddress</name>
      <anchor>a9</anchor>
      <arglist>(const IPv6Address &amp;destAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>trafficClass</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTrafficClass</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int trafficClass_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>flowLabel</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlowLabel</name>
      <anchor>a13</anchor>
      <arglist>(unsigned int flowLabel_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>hopLimit</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopLimit</name>
      <anchor>a15</anchor>
      <arglist>(short hopLimit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>transportProtocol</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransportProtocol</name>
      <anchor>a17</anchor>
      <arglist>(int transportProtocol_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExtensionHeaderArraySize</name>
      <anchor>a18</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>extensionHeaderArraySize</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6ExtensionHeaderPtr &amp;</type>
      <name>extensionHeader</name>
      <anchor>a20</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6ExtensionHeaderPtr &amp;</type>
      <name>extensionHeader</name>
      <anchor>a21</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExtensionHeader</name>
      <anchor>a22</anchor>
      <arglist>(unsigned int k, const IPv6ExtensionHeaderPtr &amp;extensionHeader_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6Datagram_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6Datagram_Base</name>
      <anchor>b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6Datagram_Base</name>
      <anchor>b2</anchor>
      <arglist>(const IPv6Datagram_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6Datagram_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const IPv6Datagram_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>srcAddress_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>destAddress_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>trafficClass_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>flowLabel_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>hopLimit_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>transportProtocol_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6ExtensionHeaderPtr *</type>
      <name>extensionHeader_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>extensionHeader_arraysize</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6DestinationOptionsHeader</name>
    <filename>class_i_pv6_destination_options_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6DestinationOptionsHeader</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6DestinationOptionsHeader</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6DestinationOptionsHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6DestinationOptionsHeader</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6DestinationOptionsHeader &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6DestinationOptionsHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6DestinationOptionsHeader &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6EncapsulatingSecurityPayloadHeader</name>
    <filename>class_i_pv6_encapsulating_security_payload_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6EncapsulatingSecurityPayloadHeader</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6EncapsulatingSecurityPayloadHeader</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6EncapsulatingSecurityPayloadHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6EncapsulatingSecurityPayloadHeader</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6EncapsulatingSecurityPayloadHeader &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6EncapsulatingSecurityPayloadHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6EncapsulatingSecurityPayloadHeader &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6ErrorHandling</name>
    <filename>class_i_pv6_error_handling.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>displayType1Msg</name>
      <anchor>d0</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>displayType2Msg</name>
      <anchor>d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>displayType3Msg</name>
      <anchor>d2</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>displayType4Msg</name>
      <anchor>d3</anchor>
      <arglist>(int code)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6ExtensionHeader</name>
    <filename>class_i_pv6_extension_header.html</filename>
    <base>IPv6ExtensionHeader_Base</base>
    <member kind="function">
      <type></type>
      <name>IPv6ExtensionHeader</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6ExtensionHeader</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6ExtensionHeader &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IPv6ExtensionHeader &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const IPv6ExtensionHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPProtocolId</type>
      <name>extensionType</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>byteLength</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6ExtensionHeader_Base</name>
    <filename>class_i_pv6_extension_header___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6ExtensionHeader_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6ExtensionHeader_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6ExtensionHeader_Base</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IPv6ExtensionHeader_Base</name>
      <anchor>b2</anchor>
      <arglist>(const IPv6ExtensionHeader_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6ExtensionHeader_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const IPv6ExtensionHeader_Base &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6FragBuf</name>
    <filename>class_i_pv6_frag_buf.html</filename>
    <member kind="function">
      <type></type>
      <name>IPv6FragBuf</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPv6FragBuf</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(ICMPv6 *icmp)</arglist>
    </member>
    <member kind="function">
      <type>IPv6Datagram *</type>
      <name>addFragment</name>
      <anchor>a3</anchor>
      <arglist>(IPv6Datagram *datagram, IPv6FragmentHeader *fh, simtime_t now)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purgeStaleFragments</name>
      <anchor>a4</anchor>
      <arglist>(simtime_t lastupdate)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Key, DatagramBuffer &gt;</type>
      <name>Buffers</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Buffers</type>
      <name>bufs</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMPv6 *</type>
      <name>icmpModule</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">IPv6FragBuf::DatagramBuffer</class>
    <class kind="struct">IPv6FragBuf::Key</class>
  </compound>
  <compound kind="struct">
    <name>IPv6FragBuf::DatagramBuffer</name>
    <filename>struct_i_pv6_frag_buf_1_1_datagram_buffer.html</filename>
    <member kind="variable">
      <type>ReassemblyBuffer</type>
      <name>buf</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Datagram *</type>
      <name>datagram</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastupdate</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6FragBuf::Key</name>
    <filename>struct_i_pv6_frag_buf_1_1_key.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a0</anchor>
      <arglist>(const Key &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>src</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>dest</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6FragmentHeader</name>
    <filename>class_i_pv6_fragment_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6FragmentHeader</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6FragmentHeader</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6FragmentHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6FragmentHeader</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6FragmentHeader &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6FragmentHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>fragmentOffset</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFragmentOffset</name>
      <anchor>a7</anchor>
      <arglist>(unsigned short fragmentOffset_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>identification</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdentification</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int identification_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>moreFragments</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMoreFragments</name>
      <anchor>a11</anchor>
      <arglist>(bool moreFragments_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6FragmentHeader &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>fragmentOffset_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>identification_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>moreFragments_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6HopByHopOptionsHeader</name>
    <filename>class_i_pv6_hop_by_hop_options_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6HopByHopOptionsHeader</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6HopByHopOptionsHeader</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6HopByHopOptionsHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6HopByHopOptionsHeader</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6HopByHopOptionsHeader &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6HopByHopOptionsHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6HopByHopOptionsHeader &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6InterfaceData</name>
    <filename>class_i_pv6_interface_data.html</filename>
    <member kind="function">
      <type></type>
      <name>IPv6InterfaceData</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6InterfaceData</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>detailedInfo</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignAddress</name>
      <anchor>z48_0</anchor>
      <arglist>(const IPv6Address &amp;addr, bool tentative, simtime_t expiryTime, simtime_t prefExpiryTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMatchingAddressExpiryTimes</name>
      <anchor>z48_1</anchor>
      <arglist>(const IPv6Address &amp;prefix, int length, simtime_t expiryTime=0, simtime_t prefExpiryTime=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numAddresses</name>
      <anchor>z48_2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>address</name>
      <anchor>z48_3</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTentativeAddress</name>
      <anchor>z48_4</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAddress</name>
      <anchor>z48_5</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesSolicitedNodeMulticastAddress</name>
      <anchor>z48_6</anchor>
      <arglist>(const IPv6Address &amp;solNodeAddr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTentativeAddress</name>
      <anchor>z48_7</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permanentlyAssign</name>
      <anchor>z48_8</anchor>
      <arglist>(const IPv6Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>preferredAddress</name>
      <anchor>z48_9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>linkLocalAddress</name>
      <anchor>z48_10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAddress</name>
      <anchor>z48_11</anchor>
      <arglist>(const IPv6Address &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_maxInitialRtrAdvertInterval</name>
      <anchor>z48_12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_maxInitialRtrAdvertisements</name>
      <anchor>z48_13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_maxFinalRtrAdvertisements</name>
      <anchor>z48_14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_minDelayBetweenRAs</name>
      <anchor>z48_15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_maxRADelayTime</name>
      <anchor>z48_16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMaxInitialRtrAdvertInterval</name>
      <anchor>z48_17</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMaxInitialRtrAdvertisements</name>
      <anchor>z48_18</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMaxFinalRtrAdvertisements</name>
      <anchor>z48_19</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMinDelayBetweenRAs</name>
      <anchor>z48_20</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMaxRADelayTime</name>
      <anchor>z48_21</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_maxRtrSolicitationDelay</name>
      <anchor>z48_22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_rtrSolicitationInterval</name>
      <anchor>z48_23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_maxRtrSolicitations</name>
      <anchor>z48_24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMaxRtrSolicitationDelay</name>
      <anchor>z48_25</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setRtrSolicitationInterval</name>
      <anchor>z48_26</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMaxRtrSolicitations</name>
      <anchor>z48_27</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_maxMulticastSolicit</name>
      <anchor>z48_28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_maxUnicastSolicit</name>
      <anchor>z48_29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_maxAnycastDelayTime</name>
      <anchor>z48_30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>_maxNeighbourAdvertisement</name>
      <anchor>z48_31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_reachableTime</name>
      <anchor>z48_32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_retransTimer</name>
      <anchor>z48_33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>_delayFirstProbeTime</name>
      <anchor>z48_34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>_minRandomFactor</name>
      <anchor>z48_35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>_maxRandomFactor</name>
      <anchor>z48_36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMaxMulticastSolicit</name>
      <anchor>z48_37</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMaxUnicastSolicit</name>
      <anchor>z48_38</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMaxAnycastDelayTime</name>
      <anchor>z48_39</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMaxNeighbourAdvertisement</name>
      <anchor>z48_40</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setReachableTime</name>
      <anchor>z48_41</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setRetransTimer</name>
      <anchor>z48_42</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setDelayFirstProbeTime</name>
      <anchor>z48_43</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMinRandomFactor</name>
      <anchor>z48_44</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_setMaxRandomFactor</name>
      <anchor>z48_45</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dupAddrDetectTransmits</name>
      <anchor>z48_46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDupAddrDetectTransmits</name>
      <anchor>z48_47</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>linkMTU</name>
      <anchor>z48_48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>curHopLimit</name>
      <anchor>z48_49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>baseReachableTime</name>
      <anchor>z48_50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>reachableTime</name>
      <anchor>z48_51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>retransTimer</name>
      <anchor>z48_52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinkMTU</name>
      <anchor>z48_53</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurHopLimit</name>
      <anchor>z48_54</anchor>
      <arglist>(short d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBaseReachableTime</name>
      <anchor>z48_55</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReachableTime</name>
      <anchor>z48_56</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRetransTimer</name>
      <anchor>z48_57</anchor>
      <arglist>(uint d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>advSendAdvertisements</name>
      <anchor>z48_58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>maxRtrAdvInterval</name>
      <anchor>z48_59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>minRtrAdvInterval</name>
      <anchor>z48_60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>advManagedFlag</name>
      <anchor>z48_61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>advOtherConfigFlag</name>
      <anchor>z48_62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advLinkMTU</name>
      <anchor>z48_63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advReachableTime</name>
      <anchor>z48_64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advRetransTimer</name>
      <anchor>z48_65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>advCurHopLimit</name>
      <anchor>z48_66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>advDefaultLifetime</name>
      <anchor>z48_67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdvSendAdvertisements</name>
      <anchor>z48_68</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxRtrAdvInterval</name>
      <anchor>z48_69</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinRtrAdvInterval</name>
      <anchor>z48_70</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdvManagedFlag</name>
      <anchor>z48_71</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdvOtherConfigFlag</name>
      <anchor>z48_72</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdvLinkMTU</name>
      <anchor>z48_73</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdvReachableTime</name>
      <anchor>z48_74</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdvRetransTimer</name>
      <anchor>z48_75</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdvCurHopLimit</name>
      <anchor>z48_76</anchor>
      <arglist>(short d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdvDefaultLifetime</name>
      <anchor>z48_77</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAdvPrefix</name>
      <anchor>z50_0</anchor>
      <arglist>(const AdvPrefix &amp;advPrefix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numAdvPrefixes</name>
      <anchor>z50_1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AdvPrefix &amp;</type>
      <name>advPrefix</name>
      <anchor>z50_2</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdvPrefix</name>
      <anchor>z50_3</anchor>
      <arglist>(int i, const AdvPrefix &amp;advPrefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAdvPrefix</name>
      <anchor>z50_4</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>generateReachableTime</name>
      <anchor>z50_5</anchor>
      <arglist>(double MIN_RANDOM_FACTOR, double MAX_RANDOM_FACTOR, uint baseReachableTime)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>generateReachableTime</name>
      <anchor>z50_6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>RouterConstants</type>
      <name>routerConstants</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HostConstants</type>
      <name>hostConstants</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeConstants</type>
      <name>nodeConstants</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; AddressData &gt;</type>
      <name>AddressDataVector</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; AdvPrefix &gt;</type>
      <name>AdvPrefixList</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>findAddress</name>
      <anchor>d0</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>choosePreferredAddress</name>
      <anchor>d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>addrLess</name>
      <anchor>h0</anchor>
      <arglist>(const AddressData &amp;a, const AddressData &amp;b)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AddressDataVector</type>
      <name>addresses</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPv6Address</type>
      <name>preferredAddr</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>preferredAddrExpiryTime</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeVariables</type>
      <name>nodeVars</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HostVariables</type>
      <name>hostVars</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouterVariables</type>
      <name>rtrVars</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">IPv6InterfaceData::AddressData</class>
    <class kind="struct">IPv6InterfaceData::AdvPrefix</class>
    <class kind="struct">IPv6InterfaceData::HostConstants</class>
    <class kind="struct">IPv6InterfaceData::HostVariables</class>
    <class kind="struct">IPv6InterfaceData::NodeConstants</class>
    <class kind="struct">IPv6InterfaceData::NodeVariables</class>
    <class kind="struct">IPv6InterfaceData::RouterConstants</class>
    <class kind="struct">IPv6InterfaceData::RouterVariables</class>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::AddressData</name>
    <filename>struct_i_pv6_interface_data_1_1_address_data.html</filename>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>address</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>tentative</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>expiryTime</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>prefExpiryTime</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::AdvPrefix</name>
    <filename>struct_i_pv6_interface_data_1_1_adv_prefix.html</filename>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>prefix</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>prefixLength</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>advValidLifetime</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>advOnLinkFlag</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>advPreferredLifetime</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>advAutonomousFlag</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::HostConstants</name>
    <filename>struct_i_pv6_interface_data_1_1_host_constants.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxRtrSolicitationDelay</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rtrSolicitationInterval</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxRtrSolicitations</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::HostVariables</name>
    <filename>struct_i_pv6_interface_data_1_1_host_variables.html</filename>
    <member kind="variable">
      <type>uint</type>
      <name>linkMTU</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>curHopLimit</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>baseReachableTime</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>reachableTime</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>retransTimer</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::NodeConstants</name>
    <filename>struct_i_pv6_interface_data_1_1_node_constants.html</filename>
    <member kind="variable">
      <type>uint</type>
      <name>maxMulticastSolicit</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>maxUnicastSolicit</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxAnycastDelayTime</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>maxNeighbourAdvertisement</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>reachableTime</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>retransTimer</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delayFirstProbeTime</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minRandomFactor</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxRandomFactor</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::NodeVariables</name>
    <filename>struct_i_pv6_interface_data_1_1_node_variables.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>dupAddrDetectTransmits</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::RouterConstants</name>
    <filename>struct_i_pv6_interface_data_1_1_router_constants.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxInitialRtrAdvertInterval</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>maxInitialRtrAdvertisements</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>maxFinalRtrAdvertisements</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>minDelayBetweenRAs</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxRADelayTime</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6InterfaceData::RouterVariables</name>
    <filename>struct_i_pv6_interface_data_1_1_router_variables.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>advSendAdvertisements</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxRtrAdvInterval</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>minRtrAdvInterval</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>advManagedFlag</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>advOtherConfigFlag</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>advLinkMTU</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>advReachableTime</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>advRetransTimer</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>advCurHopLimit</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>advDefaultLifetime</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdvPrefixList</type>
      <name>advPrefixList</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NDMessage</name>
    <filename>class_i_pv6_n_d_message.html</filename>
    <base>ICMPv6Message</base>
    <member kind="function">
      <type></type>
      <name>IPv6NDMessage</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NDMessage</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6NDMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6NDMessage</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6NDMessage &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6NDMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>code</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCode</name>
      <anchor>a8</anchor>
      <arglist>(int code_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6NDMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>code_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NDPrefixInformation</name>
    <filename>class_i_pv6_n_d_prefix_information.html</filename>
    <member kind="function">
      <type></type>
      <name>IPv6NDPrefixInformation</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NDPrefixInformation</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6NDPrefixInformation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6NDPrefixInformation</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6NDPrefixInformation &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6NDPrefixInformation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>prefixLength</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrefixLength</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int prefixLength_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>onlinkFlag</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOnlinkFlag</name>
      <anchor>a9</anchor>
      <arglist>(bool onlinkFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>autoAddressConfFlag</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAutoAddressConfFlag</name>
      <anchor>a11</anchor>
      <arglist>(bool autoAddressConfFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>validLifetime</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValidLifetime</name>
      <anchor>a13</anchor>
      <arglist>(unsigned int validLifetime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>preferredLifetime</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPreferredLifetime</name>
      <anchor>a15</anchor>
      <arglist>(unsigned int preferredLifetime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>prefix</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>prefix</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrefix</name>
      <anchor>a18</anchor>
      <arglist>(const IPv6Address &amp;prefix_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6NDPrefixInformation &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>prefixLength_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>onlinkFlag_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoAddressConfFlag_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>validLifetime_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>preferredLifetime_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>prefix_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NeighbourAdvertisement</name>
    <filename>class_i_pv6_neighbour_advertisement.html</filename>
    <base>IPv6NDMessage</base>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourAdvertisement</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourAdvertisement</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6NeighbourAdvertisement &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6NeighbourAdvertisement</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6NeighbourAdvertisement &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6NeighbourAdvertisement &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>routerFlag</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterFlag</name>
      <anchor>a8</anchor>
      <arglist>(bool routerFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>solicitedFlag</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSolicitedFlag</name>
      <anchor>a10</anchor>
      <arglist>(bool solicitedFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>overrideFlag</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOverrideFlag</name>
      <anchor>a12</anchor>
      <arglist>(bool overrideFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>targetAddress</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>targetAddress</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetAddress</name>
      <anchor>a15</anchor>
      <arglist>(const IPv6Address &amp;targetAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>targetLinkLayerAddress</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>targetLinkLayerAddress</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetLinkLayerAddress</name>
      <anchor>a18</anchor>
      <arglist>(const MACAddress &amp;targetLinkLayerAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6NeighbourAdvertisement &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>routerFlag_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>solicitedFlag_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>overrideFlag_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>targetAddress_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>targetLinkLayerAddress_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NeighbourCache</name>
    <filename>class_i_pv6_neighbour_cache.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; cMessage * &gt;</type>
      <name>MsgPtrVector</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Key, Neighbour &gt;</type>
      <name>NeighbourMap</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NeighbourMap::iterator</type>
      <name>iterator</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ReachabilityState</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCOMPLETE</name>
      <anchor>w8w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REACHABLE</name>
      <anchor>w8w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STALE</name>
      <anchor>w8w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELAY</name>
      <anchor>w8w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROBE</name>
      <anchor>w8w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourCache</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPv6NeighbourCache</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Neighbour *</type>
      <name>lookup</name>
      <anchor>a2</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID)</arglist>
    </member>
    <member kind="function">
      <type>const Key *</type>
      <name>lookupKeyAddr</name>
      <anchor>a3</anchor>
      <arglist>(Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Neighbour *</type>
      <name>addNeighbour</name>
      <anchor>a6</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID)</arglist>
    </member>
    <member kind="function">
      <type>Neighbour *</type>
      <name>addNeighbour</name>
      <anchor>a7</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID, MACAddress macAddress)</arglist>
    </member>
    <member kind="function">
      <type>Neighbour *</type>
      <name>addRouter</name>
      <anchor>a8</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID, simtime_t expiryTime)</arglist>
    </member>
    <member kind="function">
      <type>Neighbour *</type>
      <name>addRouter</name>
      <anchor>a9</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID, MACAddress macAddress, simtime_t expiryTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchor>a10</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchor>a11</anchor>
      <arglist>(NeighbourMap::iterator it)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchor>e0</anchor>
      <arglist>(ReachabilityState state)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NeighbourMap</type>
      <name>neighbourMap</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">IPv6NeighbourCache::Key</class>
    <class kind="struct">IPv6NeighbourCache::Neighbour</class>
  </compound>
  <compound kind="struct">
    <name>IPv6NeighbourCache::Key</name>
    <filename>struct_i_pv6_neighbour_cache_1_1_key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchor>a0</anchor>
      <arglist>(IPv6Address addr, int ifaceID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a1</anchor>
      <arglist>(const Key &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>address</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>interfaceID</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6NeighbourCache::Neighbour</name>
    <filename>struct_i_pv6_neighbour_cache_1_1_neighbour.html</filename>
    <member kind="variable">
      <type>const Key *</type>
      <name>nceKey</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MACAddress</type>
      <name>macAddress</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isRouter</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isDefaultRouter</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ReachabilityState</type>
      <name>reachabilityState</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>reachabilityExpires</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>numProbesSent</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>nudTimeoutEvent</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numOfARNSSent</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>arTimer</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MsgPtrVector</type>
      <name>pendingPackets</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>nsSrcAddr</name>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>routerExpiryTime</name>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NeighbourDiscovery</name>
    <filename>class_i_pv6_neighbour_discovery.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; cMessage * &gt;</type>
      <name>MsgPtrVector</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IPv6NeighbourCache::Key</type>
      <name>Key</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IPv6NeighbourCache::Neighbour</type>
      <name>Neighbour</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourDiscovery</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6NeighbourDiscovery</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MACAddress &amp;</type>
      <name>resolveNeighbour</name>
      <anchor>a2</anchor>
      <arglist>(const IPv6Address &amp;nextHop, int interfaceId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reachabilityConfirmed</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6Address &amp;neighbour, int interfaceId)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; cMessage * &gt;</type>
      <name>RATimerList</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; DADEntry * &gt;</type>
      <name>DADList</name>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; RDEntry * &gt;</type>
      <name>RDList</name>
      <anchor>x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; AdvIfEntry * &gt;</type>
      <name>AdvIfList</name>
      <anchor>x3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processNDMessage</name>
      <anchor>b3</anchor>
      <arglist>(ICMPv6Message *msg, IPv6ControlInfo *ctrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processIPv6Datagram</name>
      <anchor>b5</anchor>
      <arglist>(IPv6Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6NeighbourDiscovery::AdvIfEntry *</type>
      <name>fetchAdvIfEntry</name>
      <anchor>b6</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6NeighbourDiscovery::RDEntry *</type>
      <name>fetchRDEntry</name>
      <anchor>b7</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6Address</type>
      <name>determineNextHop</name>
      <anchor>b8</anchor>
      <arglist>(const IPv6Address &amp;destAddr, int &amp;outIfID)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initiateNeighbourUnreachabilityDetection</name>
      <anchor>b9</anchor>
      <arglist>(Neighbour *neighbour)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processNUDTimeout</name>
      <anchor>b10</anchor>
      <arglist>(cMessage *timeoutMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6Address</type>
      <name>selectDefaultRouter</name>
      <anchor>b11</anchor>
      <arglist>(int &amp;outIfID)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>timeoutPrefixEntry</name>
      <anchor>b12</anchor>
      <arglist>(const IPv6Address &amp;destPrefix, int prefixLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>timeoutDefaultRouter</name>
      <anchor>b13</anchor>
      <arglist>(const IPv6Address &amp;addr, int interfaceID)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initiateAddressResolution</name>
      <anchor>b14</anchor>
      <arglist>(const IPv6Address &amp;dgSrcAddr, Neighbour *nce)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processARTimeout</name>
      <anchor>b15</anchor>
      <arglist>(cMessage *arTimeoutMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dropQueuedPacketsAwaitingAR</name>
      <anchor>b16</anchor>
      <arglist>(Neighbour *nce)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPacketToIPv6Module</name>
      <anchor>b17</anchor>
      <arglist>(cMessage *msg, const IPv6Address &amp;destAddr, const IPv6Address &amp;srcAddr, int interfaceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendQueuedPacketsToIPv6Module</name>
      <anchor>b18</anchor>
      <arglist>(Neighbour *nce)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initiateDAD</name>
      <anchor>b19</anchor>
      <arglist>(const IPv6Address &amp;tentativeAddr, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processDADTimeout</name>
      <anchor>b20</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assignLinkLocalAddress</name>
      <anchor>b21</anchor>
      <arglist>(cMessage *timerMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6RouterSolicitation *</type>
      <name>createAndSendRSPacket</name>
      <anchor>b22</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initiateRouterDiscovery</name>
      <anchor>b23</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cancelRouterDiscovery</name>
      <anchor>b24</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processRDTimeout</name>
      <anchor>b25</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processRSPacket</name>
      <anchor>b26</anchor>
      <arglist>(IPv6RouterSolicitation *rs, IPv6ControlInfo *rsCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>validateRSPacket</name>
      <anchor>b27</anchor>
      <arglist>(IPv6RouterSolicitation *rs, IPv6ControlInfo *rsCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6RouterAdvertisement *</type>
      <name>createAndSendRAPacket</name>
      <anchor>b28</anchor>
      <arglist>(const IPv6Address &amp;destAddr, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processRAPacket</name>
      <anchor>b29</anchor>
      <arglist>(IPv6RouterAdvertisement *ra, IPv6ControlInfo *raCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processRAForRouterUpdates</name>
      <anchor>b30</anchor>
      <arglist>(IPv6RouterAdvertisement *ra, IPv6ControlInfo *raCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processRAPrefixInfo</name>
      <anchor>b31</anchor>
      <arglist>(IPv6RouterAdvertisement *ra, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processRAPrefixInfoForAddrAutoConf</name>
      <anchor>b32</anchor>
      <arglist>(IPv6NDPrefixInformation &amp;prefixInfo, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createRATimer</name>
      <anchor>b33</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetRATimer</name>
      <anchor>b34</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPeriodicRA</name>
      <anchor>b35</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSolicitedRA</name>
      <anchor>b36</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>validateRAPacket</name>
      <anchor>b37</anchor>
      <arglist>(IPv6RouterAdvertisement *ra, IPv6ControlInfo *raCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6NeighbourSolicitation *</type>
      <name>createAndSendNSPacket</name>
      <anchor>b38</anchor>
      <arglist>(const IPv6Address &amp;nsTargetAddr, const IPv6Address &amp;dgDestAddr, const IPv6Address &amp;dgSrcAddr, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processNSPacket</name>
      <anchor>b39</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *naCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>validateNSPacket</name>
      <anchor>b40</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *nsCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processNSForTentativeAddress</name>
      <anchor>b41</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *ctrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processNSForNonTentativeAddress</name>
      <anchor>b42</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *ctrlInfo, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processNSWithSpecifiedSrcAddr</name>
      <anchor>b43</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *ctrlInfo, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6NeighbourAdvertisement *</type>
      <name>createAndSendNAPacket</name>
      <anchor>b44</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, const IPv6Address &amp;nsSrcAddr, const IPv6Address &amp;nsDestAddr, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSolicitedNA</name>
      <anchor>b45</anchor>
      <arglist>(IPv6NeighbourSolicitation *ns, IPv6ControlInfo *nsCtrlInfo, InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUnsolicitedNA</name>
      <anchor>b46</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processNAPacket</name>
      <anchor>b47</anchor>
      <arglist>(IPv6NeighbourAdvertisement *na, IPv6ControlInfo *naCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>validateNAPacket</name>
      <anchor>b48</anchor>
      <arglist>(IPv6NeighbourAdvertisement *na, IPv6ControlInfo *naCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processNAForIncompleteNCEState</name>
      <anchor>b49</anchor>
      <arglist>(IPv6NeighbourAdvertisement *na, IPv6NeighbourCache::Neighbour *nce)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processNAForOtherNCEStates</name>
      <anchor>b50</anchor>
      <arglist>(IPv6NeighbourAdvertisement *na, IPv6NeighbourCache::Neighbour *nce)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6Redirect *</type>
      <name>createAndSendRedirectPacket</name>
      <anchor>b51</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processRedirectPacket</name>
      <anchor>b52</anchor>
      <arglist>(IPv6Redirect *redirect, IPv6ControlInfo *ctrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>pendingQueue</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingTable6 *</type>
      <name>rt6</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMPv6 *</type>
      <name>icmpv6</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6NeighbourCache</type>
      <name>neighbourCache</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RATimerList</type>
      <name>raTimerList</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DADList</type>
      <name>dadList</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RDList</type>
      <name>rdList</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AdvIfList</type>
      <name>advIfList</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">IPv6NeighbourDiscovery::AdvIfEntry</class>
    <class kind="struct">IPv6NeighbourDiscovery::DADEntry</class>
    <class kind="struct">IPv6NeighbourDiscovery::RDEntry</class>
  </compound>
  <compound kind="struct">
    <name>IPv6NeighbourDiscovery::AdvIfEntry</name>
    <filename>struct_i_pv6_neighbour_discovery_1_1_adv_if_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>interfaceId</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRASent</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>nextScheduledRATime</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>raTimeoutMsg</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6NeighbourDiscovery::DADEntry</name>
    <filename>struct_i_pv6_neighbour_discovery_1_1_d_a_d_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>interfaceId</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>address</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNSSent</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6NeighbourDiscovery::RDEntry</name>
    <filename>struct_i_pv6_neighbour_discovery_1_1_r_d_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>interfaceId</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRSSent</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NeighbourDiscoveryAccess</name>
    <filename>class_i_pv6_neighbour_discovery_access.html</filename>
    <base>ModuleAccess&lt; IPv6NeighbourDiscovery &gt;</base>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourDiscoveryAccess</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6NeighbourSolicitation</name>
    <filename>class_i_pv6_neighbour_solicitation.html</filename>
    <base>IPv6NDMessage</base>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourSolicitation</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6NeighbourSolicitation</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6NeighbourSolicitation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6NeighbourSolicitation</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6NeighbourSolicitation &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6NeighbourSolicitation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>targetAddress</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>targetAddress</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetAddress</name>
      <anchor>a9</anchor>
      <arglist>(const IPv6Address &amp;targetAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>sourceLinkLayerAddress</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>sourceLinkLayerAddress</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceLinkLayerAddress</name>
      <anchor>a12</anchor>
      <arglist>(const MACAddress &amp;sourceLinkLayerAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6NeighbourSolicitation &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>targetAddress_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>sourceLinkLayerAddress_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6Redirect</name>
    <filename>class_i_pv6_redirect.html</filename>
    <base>IPv6NDMessage</base>
    <member kind="function">
      <type></type>
      <name>IPv6Redirect</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Redirect</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6Redirect &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6Redirect</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6Redirect &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6Redirect &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>targetAddress</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>targetAddress</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetAddress</name>
      <anchor>a9</anchor>
      <arglist>(const IPv6Address &amp;targetAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>destinationAddress</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>destinationAddress</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestinationAddress</name>
      <anchor>a12</anchor>
      <arglist>(const IPv6Address &amp;destinationAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>targetLinkLayerAddress</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>targetLinkLayerAddress</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetLinkLayerAddress</name>
      <anchor>a15</anchor>
      <arglist>(const MACAddress &amp;targetLinkLayerAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6Redirect &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>targetAddress_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address</type>
      <name>destinationAddress_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>targetLinkLayerAddress_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6Route</name>
    <filename>class_i_pv6_route.html</filename>
    <member kind="enumeration">
      <name>RouteSrc</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FROM_RA</name>
      <anchor>w4w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWN_ADV_PREFIX</name>
      <anchor>w4w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATIC</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTING_PROT</name>
      <anchor>w4w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Route</name>
      <anchor>a0</anchor>
      <arglist>(IPv6Address destPrefix, int length, RouteSrc src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterfaceID</name>
      <anchor>a3</anchor>
      <arglist>(int interfaceId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextHop</name>
      <anchor>a4</anchor>
      <arglist>(const IPv6Address &amp;nextHop)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpiryTime</name>
      <anchor>a5</anchor>
      <arglist>(simtime_t expiryTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMetric</name>
      <anchor>a6</anchor>
      <arglist>(int metric)</arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>destPrefix</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prefixLength</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RouteSrc</type>
      <name>src</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>interfaceID</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>nextHop</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>expiryTime</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>metric</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>routeSrcName</name>
      <anchor>e0</anchor>
      <arglist>(RouteSrc src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPv6Address</type>
      <name>_destPrefix</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>_length</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouteSrc</type>
      <name>_src</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_interfaceID</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPv6Address</type>
      <name>_nextHop</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>_expiryTime</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_metric</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6RouterAdvertisement</name>
    <filename>class_i_pv6_router_advertisement.html</filename>
    <base>IPv6NDMessage</base>
    <member kind="function">
      <type></type>
      <name>IPv6RouterAdvertisement</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6RouterAdvertisement</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6RouterAdvertisement &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6RouterAdvertisement</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6RouterAdvertisement &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6RouterAdvertisement &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>curHopLimit</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurHopLimit</name>
      <anchor>a8</anchor>
      <arglist>(unsigned int curHopLimit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>managedAddrConfFlag</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setManagedAddrConfFlag</name>
      <anchor>a10</anchor>
      <arglist>(bool managedAddrConfFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>otherStatefulConfFlag</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOtherStatefulConfFlag</name>
      <anchor>a12</anchor>
      <arglist>(bool otherStatefulConfFlag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>routerLifetime</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterLifetime</name>
      <anchor>a14</anchor>
      <arglist>(unsigned short routerLifetime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>reachableTime</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReachableTime</name>
      <anchor>a16</anchor>
      <arglist>(unsigned int reachableTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>retransTimer</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRetransTimer</name>
      <anchor>a18</anchor>
      <arglist>(unsigned int retransTimer_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>sourceLinkLayerAddress</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>sourceLinkLayerAddress</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceLinkLayerAddress</name>
      <anchor>a21</anchor>
      <arglist>(const MACAddress &amp;sourceLinkLayerAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>MTU</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMTU</name>
      <anchor>a23</anchor>
      <arglist>(unsigned int MTU_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrefixInformationArraySize</name>
      <anchor>a24</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>prefixInformationArraySize</name>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6NDPrefixInformation &amp;</type>
      <name>prefixInformation</name>
      <anchor>a26</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6NDPrefixInformation &amp;</type>
      <name>prefixInformation</name>
      <anchor>a27</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrefixInformation</name>
      <anchor>a28</anchor>
      <arglist>(unsigned int k, const IPv6NDPrefixInformation &amp;prefixInformation_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6RouterAdvertisement &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>curHopLimit_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>managedAddrConfFlag_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>otherStatefulConfFlag_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>routerLifetime_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>reachableTime_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>retransTimer_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>sourceLinkLayerAddress_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>MTU_var</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6NDPrefixInformation *</type>
      <name>prefixInformation_var</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>prefixInformation_arraysize</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6RouterSolicitation</name>
    <filename>class_i_pv6_router_solicitation.html</filename>
    <base>IPv6NDMessage</base>
    <member kind="function">
      <type></type>
      <name>IPv6RouterSolicitation</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6RouterSolicitation</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6RouterSolicitation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6RouterSolicitation</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6RouterSolicitation &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6RouterSolicitation &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>sourceLinkLayerAddress</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>sourceLinkLayerAddress</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceLinkLayerAddress</name>
      <anchor>a9</anchor>
      <arglist>(const MACAddress &amp;sourceLinkLayerAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6RouterSolicitation &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>sourceLinkLayerAddress_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPv6RoutingHeader</name>
    <filename>class_i_pv6_routing_header.html</filename>
    <base>IPv6ExtensionHeader</base>
    <member kind="function">
      <type></type>
      <name>IPv6RoutingHeader</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6RoutingHeader</name>
      <anchor>a1</anchor>
      <arglist>(const IPv6RoutingHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPv6RoutingHeader</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPv6RoutingHeader &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const IPv6RoutingHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>routingType</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoutingType</name>
      <anchor>a7</anchor>
      <arglist>(unsigned char routingType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>segmentsLeft</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSegmentsLeft</name>
      <anchor>a9</anchor>
      <arglist>(unsigned char segmentsLeft_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddressArraySize</name>
      <anchor>a10</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>addressArraySize</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv6Address &amp;</type>
      <name>address</name>
      <anchor>a12</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv6Address &amp;</type>
      <name>address</name>
      <anchor>a13</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchor>a14</anchor>
      <arglist>(unsigned int k, const IPv6Address &amp;address_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const IPv6RoutingHeader &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>routingType_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>segmentsLeft_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6Address *</type>
      <name>address_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>address_arraysize</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPvXAddress</name>
    <filename>class_i_pv_x_address.html</filename>
    <member kind="function">
      <type></type>
      <name>IPvXAddress</name>
      <anchor>z34_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPvXAddress</name>
      <anchor>z34_1</anchor>
      <arglist>(const IPAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPvXAddress</name>
      <anchor>z34_2</anchor>
      <arglist>(const IPv6Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPvXAddress</name>
      <anchor>z34_3</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPvXAddress</name>
      <anchor>z34_4</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IPvXAddress</name>
      <anchor>z34_5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIPv6</name>
      <anchor>z35_0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>get4</name>
      <anchor>z35_1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPv6Address</type>
      <name>get6</name>
      <anchor>z35_2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>z35_3</anchor>
      <arglist>(const IPAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>z35_4</anchor>
      <arglist>(const IPv6Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>z35_5</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchor>z35_6</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress &amp;</type>
      <name>operator=</name>
      <anchor>z35_7</anchor>
      <arglist>(const IPAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress &amp;</type>
      <name>operator=</name>
      <anchor>z35_8</anchor>
      <arglist>(const IPv6Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress &amp;</type>
      <name>operator=</name>
      <anchor>z35_9</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryParse</name>
      <anchor>z35_10</anchor>
      <arglist>(const char *addr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchor>z35_11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchor>z36_0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchor>z36_1</anchor>
      <arglist>(const IPAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchor>z36_2</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchor>z36_3</anchor>
      <arglist>(const IPvXAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>z36_4</anchor>
      <arglist>(const IPAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>z36_5</anchor>
      <arglist>(const IPAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>z36_6</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>z36_7</anchor>
      <arglist>(const IPv6Address &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>z36_8</anchor>
      <arglist>(const IPvXAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>z36_9</anchor>
      <arglist>(const IPvXAddress &amp;addr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>z36_10</anchor>
      <arglist>(const IPvXAddress &amp;addr) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>d</name>
      <anchor>p0</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isv6</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IQoSClassifier</name>
    <filename>class_i_qo_s_classifier.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numQueues</name>
      <anchor>a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>classifyPacket</name>
      <anchor>a1</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRadioModel</name>
    <filename>class_i_radio_model.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchor>a0</anchor>
      <arglist>(cModule *radioModule)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IRadioModel</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>calculateDuration</name>
      <anchor>a2</anchor>
      <arglist>(AirFrame *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isReceivedCorrectly</name>
      <anchor>a3</anchor>
      <arglist>(AirFrame *airframe, const SnrList &amp;receivedList)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IReceptionModel</name>
    <filename>class_i_reception_model.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchor>a0</anchor>
      <arglist>(cModule *radioModule)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>calculateReceivedPower</name>
      <anchor>a1</anchor>
      <arglist>(double pSend, double carrierFrequency, double distance)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IReceptionModel</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRSVPClassifier</name>
    <filename>class_i_r_s_v_p_classifier.html</filename>
    <base>IClassifier</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IRSVPClassifier</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bind</name>
      <anchor>a1</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender, int inLabel)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IScriptable</name>
    <filename>class_i_scriptable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IScriptable</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processCommand</name>
      <anchor>a1</anchor>
      <arglist>(const cXMLElement &amp;node)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Join</name>
    <filename>class_join.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>outg</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LabelOp</name>
    <filename>struct_label_op.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>label</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>optcode</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LabelRequestObj_t</name>
    <filename>struct_label_request_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>LabelRequestObj_t</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>prot</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDP</name>
    <filename>class_l_d_p.html</filename>
    <base>TCPSocket::CallbackInterface</base>
    <base>IClassifier</base>
    <base>INotifiable</base>
    <member kind="typedef">
      <type>std::vector&lt; fec_t &gt;</type>
      <name>FecVector</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; fec_bind_t &gt;</type>
      <name>FecBindVector</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; pending_req_t &gt;</type>
      <name>PendingVector</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; peer_info &gt;</type>
      <name>PeerVector</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDP</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDP</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendHelloTo</name>
      <anchor>b3</anchor>
      <arglist>(IPAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>openTCPConnectionToPeer</name>
      <anchor>b4</anchor>
      <arglist>(int peerIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processLDPHello</name>
      <anchor>b5</anchor>
      <arglist>(LDPHello *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processHelloTimeout</name>
      <anchor>b6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processMessageFromTCP</name>
      <anchor>b7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processLDPPacketFromTCP</name>
      <anchor>b8</anchor>
      <arglist>(LDPPacket *ldpPacket)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processLABEL_MAPPING</name>
      <anchor>b9</anchor>
      <arglist>(LDPLabelMapping *packet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processLABEL_REQUEST</name>
      <anchor>b10</anchor>
      <arglist>(LDPLabelRequest *packet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processLABEL_RELEASE</name>
      <anchor>b11</anchor>
      <arglist>(LDPLabelMapping *packet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processLABEL_WITHDRAW</name>
      <anchor>b12</anchor>
      <arglist>(LDPLabelMapping *packet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processNOTIFICATION</name>
      <anchor>b13</anchor>
      <arglist>(LDPNotify *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>lookupLabel</name>
      <anchor>b14</anchor>
      <arglist>(IPDatagram *ipdatagram, LabelOpVector &amp;outLabel, std::string &amp;outInterface, int &amp;color)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b15</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchor>z59_0</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchor>z59_1</anchor>
      <arglist>(int connId, void *yourPtr, cMessage *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchor>z59_2</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchor>z59_3</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchor>z59_4</anchor>
      <arglist>(int connId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketStatusArrived</name>
      <anchor>z59_5</anchor>
      <arglist>(int connId, void *yourPtr, TCPStatusInfo *status)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IPAddress</type>
      <name>locateNextHop</name>
      <anchor>d0</anchor>
      <arglist>(IPAddress dest)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IPAddress</type>
      <name>findPeerAddrFromInterface</name>
      <anchor>d1</anchor>
      <arglist>(std::string interfaceName)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>findInterfaceFromPeerAddr</name>
      <anchor>d2</anchor>
      <arglist>(IPAddress peerIP)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>findPeer</name>
      <anchor>d3</anchor>
      <arglist>(IPAddress peerAddr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TCPSocket *</type>
      <name>peerSocket</name>
      <anchor>d4</anchor>
      <arglist>(IPAddress peerAddr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TCPSocket *</type>
      <name>peerSocketSoft</name>
      <anchor>d5</anchor>
      <arglist>(IPAddress peerAddr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendToPeer</name>
      <anchor>d6</anchor>
      <arglist>(IPAddress dest, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>FecVector::iterator</type>
      <name>findFecEntry</name>
      <anchor>d7</anchor>
      <arglist>(FecVector &amp;fecs, IPAddress addr, int length)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>FecBindVector::iterator</type>
      <name>findFecEntry</name>
      <anchor>d8</anchor>
      <arglist>(FecBindVector &amp;fecs, int fecid, IPAddress peer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendMappingRequest</name>
      <anchor>d9</anchor>
      <arglist>(IPAddress dest, IPAddress addr, int length)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendMapping</name>
      <anchor>d10</anchor>
      <arglist>(int type, IPAddress dest, int label, IPAddress addr, int length)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendNotify</name>
      <anchor>d11</anchor>
      <arglist>(int status, IPAddress dest, IPAddress addr, int length)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>rebuildFecList</name>
      <anchor>d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateFecList</name>
      <anchor>d13</anchor>
      <arglist>(IPAddress nextHop)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateFecListEntry</name>
      <anchor>d14</anchor>
      <arglist>(fec_t oldItem)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>announceLinkChange</name>
      <anchor>d15</anchor>
      <arglist>(int tedlinkindex)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>holdTime</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>helloInterval</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FecVector</type>
      <name>fecList</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FecBindVector</type>
      <name>fecUp</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FecBindVector</type>
      <name>fecDown</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PendingVector</type>
      <name>pending</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PeerVector</type>
      <name>myPeers</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingTable *</type>
      <name>rt</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LIBTable *</type>
      <name>lt</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TED *</type>
      <name>tedmod</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UDPSocket</type>
      <name>udpSocket</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TCPSocket</type>
      <name>serverSocket</name>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TCPSocketMap</type>
      <name>socketMap</name>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>sendHelloMsg</name>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxFecid</name>
      <anchor>r16</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">LDP::fec_bind_t</class>
    <class kind="struct">LDP::fec_t</class>
    <class kind="struct">LDP::peer_info</class>
    <class kind="struct">LDP::pending_req_t</class>
  </compound>
  <compound kind="struct">
    <name>LDP::fec_bind_t</name>
    <filename>struct_l_d_p_1_1fec__bind__t.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>fecid</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>peer</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>label</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LDP::fec_t</name>
    <filename>struct_l_d_p_1_1fec__t.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>fecid</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>addr</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>length</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>nextHop</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LDP::peer_info</name>
    <filename>struct_l_d_p_1_1peer__info.html</filename>
    <member kind="variable">
      <type>IPAddress</type>
      <name>peerIP</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>activeRole</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TCPSocket *</type>
      <name>socket</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>linkInterface</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>timeout</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LDP::pending_req_t</name>
    <filename>struct_l_d_p_1_1pending__req__t.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>fecid</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>peer</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPAddress</name>
    <filename>class_l_d_p_address.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPAddress</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPAddress</name>
      <anchor>a1</anchor>
      <arglist>(const LDPAddress &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPAddress</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPAddress &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const LDPAddress &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsWithdraw</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsWithdraw</name>
      <anchor>a8</anchor>
      <arglist>(bool isWithdraw_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFamily</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFamily</name>
      <anchor>a10</anchor>
      <arglist>(const char *family_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddressesArraySize</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAddressesArraySize</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAddresses</name>
      <anchor>a13</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddresses</name>
      <anchor>a14</anchor>
      <arglist>(unsigned int k, const char *addresses_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const LDPAddress &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isWithdraw_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>family_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string *</type>
      <name>addresses_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>addresses_arraysize</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPHello</name>
    <filename>class_l_d_p_hello.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPHello</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPHello</name>
      <anchor>a1</anchor>
      <arglist>(const LDPHello &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPHello</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPHello &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const LDPHello &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getHoldTime</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHoldTime</name>
      <anchor>a8</anchor>
      <arglist>(double holdTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getTbit</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTbit</name>
      <anchor>a10</anchor>
      <arglist>(bool tbit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRbit</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRbit</name>
      <anchor>a12</anchor>
      <arglist>(bool rbit_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const LDPHello &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>holdTime_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>tbit_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rbit_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPIni</name>
    <filename>class_l_d_p_ini.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPIni</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPIni</name>
      <anchor>a1</anchor>
      <arglist>(const LDPIni &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPIni</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPIni &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const LDPIni &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getKeepAliveTime</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKeepAliveTime</name>
      <anchor>a8</anchor>
      <arglist>(double keepAliveTime_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAbit</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAbit</name>
      <anchor>a10</anchor>
      <arglist>(bool abit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDbit</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDbit</name>
      <anchor>a12</anchor>
      <arglist>(bool dbit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPvLim</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPvLim</name>
      <anchor>a14</anchor>
      <arglist>(int pvLim_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getReceiverLDPIdentifier</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiverLDPIdentifier</name>
      <anchor>a16</anchor>
      <arglist>(const char *receiverLDPIdentifier_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const LDPIni &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>keepAliveTime_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>abit_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dbit_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pvLim_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>receiverLDPIdentifier_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPLabelMapping</name>
    <filename>class_l_d_p_label_mapping.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPLabelMapping</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPLabelMapping</name>
      <anchor>a1</anchor>
      <arglist>(const LDPLabelMapping &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPLabelMapping</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPLabelMapping &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const LDPLabelMapping &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFec</name>
      <anchor>a9</anchor>
      <arglist>(const FEC_TLV &amp;fec_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLabel</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLabel</name>
      <anchor>a11</anchor>
      <arglist>(int label_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const LDPLabelMapping &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FEC_TLV</type>
      <name>fec_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>label_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPLabelRequest</name>
    <filename>class_l_d_p_label_request.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPLabelRequest</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPLabelRequest</name>
      <anchor>a1</anchor>
      <arglist>(const LDPLabelRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPLabelRequest</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPLabelRequest &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const LDPLabelRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFec</name>
      <anchor>a9</anchor>
      <arglist>(const FEC_TLV &amp;fec_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const LDPLabelRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FEC_TLV</type>
      <name>fec_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPNotify</name>
    <filename>class_l_d_p_notify.html</filename>
    <base>LDPPacket</base>
    <member kind="function">
      <type></type>
      <name>LDPNotify</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPNotify</name>
      <anchor>a1</anchor>
      <arglist>(const LDPNotify &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPNotify</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPNotify &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const LDPNotify &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatus</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatus</name>
      <anchor>a8</anchor>
      <arglist>(int status_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FEC_TLV &amp;</type>
      <name>getFec</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFec</name>
      <anchor>a11</anchor>
      <arglist>(const FEC_TLV &amp;fec_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const LDPNotify &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>status_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FEC_TLV</type>
      <name>fec_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LDPPacket</name>
    <filename>class_l_d_p_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>LDPPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDPPacket</name>
      <anchor>a1</anchor>
      <arglist>(const LDPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDPPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LDPPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const LDPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>type</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchor>a8</anchor>
      <arglist>(int type_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>senderAddress</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>senderAddress</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderAddress</name>
      <anchor>a11</anchor>
      <arglist>(const IPAddress &amp;senderAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>receiverAddress</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>receiverAddress</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiverAddress</name>
      <anchor>a14</anchor>
      <arglist>(const IPAddress &amp;receiverAddress_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const LDPPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>senderAddress_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>receiverAddress_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LIBTable</name>
    <filename>class_l_i_b_table.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>resolveLabel</name>
      <anchor>a0</anchor>
      <arglist>(std::string inInterface, int inLabel, LabelOpVector &amp;outLabel, std::string &amp;outInterface, int &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>installLibEntry</name>
      <anchor>a1</anchor>
      <arglist>(int inLabel, std::string inInterface, const LabelOpVector &amp;outLabel, std::string outInterface, int color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLibEntry</name>
      <anchor>a2</anchor>
      <arglist>(int inLabel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelOpVector</type>
      <name>pushLabel</name>
      <anchor>e0</anchor>
      <arglist>(int label)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelOpVector</type>
      <name>swapLabel</name>
      <anchor>e1</anchor>
      <arglist>(int label)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelOpVector</type>
      <name>popLabel</name>
      <anchor>e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readTableFromXML</name>
      <anchor>b3</anchor>
      <arglist>(const cXMLElement *libtable)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxLabel</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; LIBEntry &gt;</type>
      <name>lib</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">LIBTable::LIBEntry</class>
  </compound>
  <compound kind="struct">
    <name>LIBTable::LIBEntry</name>
    <filename>struct_l_i_b_table_1_1_l_i_b_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>inLabel</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>inInterface</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LabelOpVector</type>
      <name>outLabel</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>outInterface</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>color</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LIBTableAccess</name>
    <filename>class_l_i_b_table_access.html</filename>
    <base>ModuleAccess&lt; LIBTable &gt;</base>
    <member kind="function">
      <type></type>
      <name>LIBTableAccess</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearMobility</name>
    <filename>class_linear_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>move</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>acceleration</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LineSegmentsMobilityBase</name>
    <filename>class_line_segments_mobility_base.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginNextMove</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchor>b3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchor>b4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>targetTime</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>step</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Link</name>
    <filename>class_link.html</filename>
    <member kind="function">
      <type></type>
      <name>Link</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Link</name>
      <anchor>a1</anchor>
      <arglist>(const Link &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Link</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Link &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Link &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getLinkID</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getLinkID</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkID</name>
      <anchor>a8</anchor>
      <arglist>(const IPAddress &amp;linkID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getLinkData</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkData</name>
      <anchor>a10</anchor>
      <arglist>(unsigned long linkData_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getType</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchor>a12</anchor>
      <arglist>(unsigned char type_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getNumberOfTOS</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfTOS</name>
      <anchor>a14</anchor>
      <arglist>(unsigned char numberOfTOS_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getLinkCost</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkCost</name>
      <anchor>a16</anchor>
      <arglist>(unsigned long linkCost_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTosDataArraySize</name>
      <anchor>a17</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getTosDataArraySize</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TOSData &amp;</type>
      <name>getTosData</name>
      <anchor>a19</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TOSData &amp;</type>
      <name>getTosData</name>
      <anchor>a20</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTosData</name>
      <anchor>a21</anchor>
      <arglist>(unsigned int k, const TOSData &amp;tosData_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Link &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>linkID_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>linkData_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>type_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>numberOfTOS_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>linkCost_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TOSData *</type>
      <name>tosData_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tosData_arraysize</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinkStateMsg</name>
    <filename>class_link_state_msg.html</filename>
    <member kind="function">
      <type></type>
      <name>LinkStateMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkStateMsg</name>
      <anchor>a1</anchor>
      <arglist>(const LinkStateMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinkStateMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LinkStateMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const LinkStateMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkInfoArraySize</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLinkInfoArraySize</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TELinkStateInfo &amp;</type>
      <name>getLinkInfo</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TELinkStateInfo &amp;</type>
      <name>getLinkInfo</name>
      <anchor>a10</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkInfo</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int k, const TELinkStateInfo &amp;linkInfo_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRequest</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequest</name>
      <anchor>a13</anchor>
      <arglist>(bool request_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a15</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const LinkStateMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TELinkStateInfo *</type>
      <name>linkInfo_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>linkInfo_arraysize</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>request_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinkStateRouting</name>
    <filename>class_link_state_routing.html</filename>
    <base>INotifiable</base>
    <member kind="function">
      <type></type>
      <name>LinkStateRouting</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinkStateRouting</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processLINK_STATE_MESSAGE</name>
      <anchor>b3</anchor>
      <arglist>(LinkStateMsg *msg, IPAddress sender)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b4</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToPeers</name>
      <anchor>b5</anchor>
      <arglist>(const std::vector&lt; TELinkStateInfo &gt; &amp;list, bool req, IPAddress exceptPeer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToPeer</name>
      <anchor>b6</anchor>
      <arglist>(IPAddress peer, const std::vector&lt; TELinkStateInfo &gt; &amp;list, bool req)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToIP</name>
      <anchor>b7</anchor>
      <arglist>(LinkStateMsg *msg, IPAddress destAddr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TED *</type>
      <name>tedmod</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>announceMsg</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddressVector</type>
      <name>peerIfAddrs</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LSAProcessingMarker</name>
    <filename>class_l_s_a_processing_marker.html</filename>
    <member kind="function">
      <type></type>
      <name>LSAProcessingMarker</name>
      <anchor>a0</anchor>
      <arglist>(unsigned int counter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LSAProcessingMarker</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>index</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LSARequest</name>
    <filename>struct_l_s_a_request.html</filename>
    <member kind="function">
      <type></type>
      <name>LSARequest</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>lsType</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>linkStateID</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>advertisingRouter</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211</name>
    <filename>class_mac80211.html</filename>
    <base>WirelessMacBase</base>
    <base>INotifiable</base>
    <member kind="function">
      <type></type>
      <name>Mac80211</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mac80211</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerInterface</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b3</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchor>b6</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndContentionTimer</name>
      <anchor>b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMsgNotForMe</name>
      <anchor>b8</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMsgForMe</name>
      <anchor>b9</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBroadcastMsg</name>
      <anchor>b10</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleEndTransmissionTimer</name>
      <anchor>b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleEndSifsTimer</name>
      <anchor>b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimeoutTimer</name>
      <anchor>b13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleNavTimer</name>
      <anchor>b14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRTSframe</name>
      <anchor>b15</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleDATAframe</name>
      <anchor>b16</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleACKframe</name>
      <anchor>b17</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleCTSframe</name>
      <anchor>b18</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDATAframe</name>
      <anchor>b19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendACKframe</name>
      <anchor>b20</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendCTSframe</name>
      <anchor>b21</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRTSframe</name>
      <anchor>b22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBROADCASTframe</name>
      <anchor>b23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mac80211Pkt *</type>
      <name>encapsMsg</name>
      <anchor>b24</anchor>
      <arglist>(cMessage *netw)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decapsulateAndSendUp</name>
      <anchor>b25</anchor>
      <arglist>(Mac80211Pkt *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mac80211Pkt *</type>
      <name>buildDATAframe</name>
      <anchor>b26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mac80211Pkt *</type>
      <name>buildACKframe</name>
      <anchor>b27</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mac80211Pkt *</type>
      <name>buildCTSframe</name>
      <anchor>b28</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mac80211Pkt *</type>
      <name>buildRTSframe</name>
      <anchor>b29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mac80211Pkt *</type>
      <name>buildBROADCASTframe</name>
      <anchor>b30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginNewCycle</name>
      <anchor>b31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>backoff</name>
      <anchor>b32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>contentionWindow</name>
      <anchor>b33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>testMaxAttempts</name>
      <anchor>b34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>timeOut</name>
      <anchor>b35</anchor>
      <arglist>(_802_11frameType type, double last_frame_duration)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>packetDuration</name>
      <anchor>b36</anchor>
      <arglist>(int bits)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>stateName</name>
      <anchor>b37</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>timerTypeName</name>
      <anchor>b38</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>pktTypeName</name>
      <anchor>b39</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setState</name>
      <anchor>b40</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>myMacAddr</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeout</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>nav</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>contention</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endTransmission</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endSifs</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>EIFS</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>BW</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>state</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState::State</type>
      <name>radioState</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxQueueSize</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nextIsBroadcast</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacPktList</type>
      <name>fromUpperLayer</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>retryCounter</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>tryWithoutBackoff</name>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rtsCts</name>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>delta</name>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>broadcastBackoff</name>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Mac80211Pkt * &gt;</type>
      <name>MacPktList</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>timerType</name>
      <anchor>y13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchor>y13y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAV</name>
      <anchor>y13y2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTENTION</name>
      <anchor>y13y3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_TRANSMISSION</name>
      <anchor>y13y4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_SIFS</name>
      <anchor>y13y5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchor>y14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WFDATA</name>
      <anchor>y14y6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUIET</name>
      <anchor>y14y7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE</name>
      <anchor>y14y8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTEND</name>
      <anchor>y14y9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WFCTS</name>
      <anchor>y14y10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WFACK</name>
      <anchor>y14y11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUSY</name>
      <anchor>y14y12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211Pkt</name>
    <filename>class_mac80211_pkt.html</filename>
    <base>MacPkt</base>
    <member kind="function">
      <type></type>
      <name>Mac80211Pkt</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mac80211Pkt</name>
      <anchor>a1</anchor>
      <arglist>(const Mac80211Pkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mac80211Pkt</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Mac80211Pkt &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Mac80211Pkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAddress3</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress3</name>
      <anchor>a8</anchor>
      <arglist>(int address3_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAddress4</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress4</name>
      <anchor>a10</anchor>
      <arglist>(int address4_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDuration</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDuration</name>
      <anchor>a12</anchor>
      <arglist>(double duration_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFragmentation</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFragmentation</name>
      <anchor>a14</anchor>
      <arglist>(int fragmentation_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInformationDS</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInformationDS</name>
      <anchor>a16</anchor>
      <arglist>(int informationDS_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSequenceControl</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceControl</name>
      <anchor>a18</anchor>
      <arglist>(int sequenceControl_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const Mac80211Pkt &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>address3_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>address4_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fragmentation_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>informationDS_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sequenceControl_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MACAddress</name>
    <filename>class_m_a_c_address.html</filename>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchor>a1</anchor>
      <arglist>(const char *hexstr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchor>a2</anchor>
      <arglist>(const MACAddress &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MACAddress &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const MACAddress &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAddressArraySize</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getAddress</name>
      <anchor>a5</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddress</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int k, unsigned char addrbyte)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddress</name>
      <anchor>a7</anchor>
      <arglist>(const char *hexstr)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>getAddressBytes</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddressBytes</name>
      <anchor>a9</anchor>
      <arglist>(unsigned char *addrbytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBroadcast</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBroadcast</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMulticast</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchor>a15</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a16</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a17</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareTo</name>
      <anchor>a18</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>InterfaceToken</type>
      <name>formInterfaceIdentifier</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MACAddress</type>
      <name>generateAutoAddress</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MACAddress</type>
      <name>UNSPECIFIED_ADDRESS</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MACAddress</type>
      <name>BROADCAST_ADDRESS</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char</type>
      <name>address</name>
      <anchor>r0</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static unsigned int</type>
      <name>autoAddressCtr</name>
      <anchor>v0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacPkt</name>
    <filename>class_mac_pkt.html</filename>
    <member kind="function">
      <type></type>
      <name>MacPkt</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MacPkt</name>
      <anchor>a1</anchor>
      <arglist>(const MacPkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacPkt</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MacPkt &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const MacPkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getDestAddr</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getDestAddr</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchor>a9</anchor>
      <arglist>(const MACAddress &amp;destAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getSrcAddr</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getSrcAddr</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddr</name>
      <anchor>a12</anchor>
      <arglist>(const MACAddress &amp;srcAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelId</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelId</name>
      <anchor>a14</anchor>
      <arglist>(int channelId_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const MacPkt &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>destAddr_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>srcAddr_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelId_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MACRelayUnitBase</name>
    <filename>class_m_a_c_relay_unit_base.html</filename>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; MACAddress, AddressEntry, MAC_compare &gt;</type>
      <name>AddressTable</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAndDispatchFrame</name>
      <anchor>b1</anchor>
      <arglist>(EtherFrame *frame, int inputport)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>broadcastFrame</name>
      <anchor>b2</anchor>
      <arglist>(EtherFrame *frame, int inputport)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readAddressTable</name>
      <anchor>b3</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateTableWithAddress</name>
      <anchor>b4</anchor>
      <arglist>(MACAddress &amp;address, int portno)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getPortForAddress</name>
      <anchor>b5</anchor>
      <arglist>(MACAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printAddressTable</name>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeAgedEntriesFromTable</name>
      <anchor>b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeOldestTableEntry</name>
      <anchor>b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPauseFrame</name>
      <anchor>b9</anchor>
      <arglist>(int portno, int pauseUnits)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPorts</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>addressTableSize</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>agingTime</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AddressTable</type>
      <name>addresstable</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seqNum</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">MACRelayUnitBase::AddressEntry</class>
    <class kind="struct">MACRelayUnitBase::MAC_compare</class>
  </compound>
  <compound kind="struct">
    <name>MACRelayUnitBase::AddressEntry</name>
    <filename>struct_m_a_c_relay_unit_base_1_1_address_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>portno</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>insertionTime</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MACRelayUnitBase::MAC_compare</name>
    <filename>struct_m_a_c_relay_unit_base_1_1_m_a_c__compare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const MACAddress &amp;u1, const MACAddress &amp;u2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MACRelayUnitNP</name>
    <filename>class_m_a_c_relay_unit_n_p.html</filename>
    <base>MACRelayUnitBase</base>
    <member kind="function">
      <type></type>
      <name>MACRelayUnitNP</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MACRelayUnitNP</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleIncomingFrame</name>
      <anchor>b0</anchor>
      <arglist>(EtherFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processFrame</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>z63_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>z63_1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>z63_2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>queue</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numCPUs</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>processingTime</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bufferSize</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>highWatermark</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pauseUnits</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>pauseInterval</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bufferUsed</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage **</type>
      <name>endProcEvents</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>pauseLastSent</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numProcessedFrames</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numDroppedFrames</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>bufferLevel</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MACRelayUnitPP</name>
    <filename>class_m_a_c_relay_unit_p_p.html</filename>
    <base>MACRelayUnitBase</base>
    <member kind="function">
      <type></type>
      <name>MACRelayUnitPP</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MACRelayUnitPP</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleIncomingFrame</name>
      <anchor>b0</anchor>
      <arglist>(EtherFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processFrame</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>z65_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>z65_1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>z65_2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>processingTime</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bufferSize</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>highWatermark</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pauseUnits</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>pauseInterval</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bufferUsed</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PortBuffer *</type>
      <name>buffer</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>pauseLastSent</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numProcessedFrames</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numDroppedFrames</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>bufferLevel</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">MACRelayUnitPP::PortBuffer</class>
  </compound>
  <compound kind="struct">
    <name>MACRelayUnitPP::PortBuffer</name>
    <filename>struct_m_a_c_relay_unit_p_p_1_1_port_buffer.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>port</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>cpuBusy</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cQueue</type>
      <name>queue</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MassMobility</name>
    <filename>class_mass_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>move</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>changeInterval</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>changeAngleBy</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>speed</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentSpeed</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentAngle</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>step</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageId</name>
    <filename>class_message_id.html</filename>
    <member kind="function">
      <type></type>
      <name>MessageId</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageId</name>
      <anchor>a1</anchor>
      <arglist>(const MessageId &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MessageId</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MessageId &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const MessageId &amp;m)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>treeId</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>parentId</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned int</type>
      <name>nextId</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned int</type>
      <name>nextTreeId</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageTracer</name>
    <filename>class_message_tracer.html</filename>
    <member kind="function">
      <type></type>
      <name>MessageTracer</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MessageTracer</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>created</name>
      <anchor>a2</anchor>
      <arglist>(MessageId *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cloned</name>
      <anchor>a3</anchor>
      <arglist>(MessageId *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assigned</name>
      <anchor>a4</anchor>
      <arglist>(MessageId *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleted</name>
      <anchor>a5</anchor>
      <arglist>(MessageId *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MessageTracer *</type>
      <name>instance</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>open</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>f</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MessageId *</type>
      <name>lastId</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static MessageTracer</type>
      <name>trc</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModuleAccess</name>
    <filename>class_module_access.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ModuleAccess</name>
      <anchor>a0</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getIfExists</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>name</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>p</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPLS</name>
    <filename>class_m_p_l_s.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processPacketFromL3</name>
      <anchor>d0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processPacketFromL2</name>
      <anchor>d1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processMPLSPacketFromL2</name>
      <anchor>d2</anchor>
      <arglist>(MPLSPacket *mplsPacket)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>tryLabelAndForwardIPDatagram</name>
      <anchor>d3</anchor>
      <arglist>(IPDatagram *ipdatagram)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>labelAndForwardIPDatagram</name>
      <anchor>d4</anchor>
      <arglist>(IPDatagram *ipdatagram)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendToL2</name>
      <anchor>d5</anchor>
      <arglist>(cMessage *msg, int gateIndex)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doStackOps</name>
      <anchor>d6</anchor>
      <arglist>(MPLSPacket *mplsPacket, const LabelOpVector &amp;outLabel)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>delay1</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LIBTable *</type>
      <name>lt</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IClassifier *</type>
      <name>pct</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MPLSPacket</name>
    <filename>class_m_p_l_s_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>MPLSPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPLSPacket</name>
      <anchor>a1</anchor>
      <arglist>(const MPLSPacket &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MPLSPacket &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const MPLSPacket &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapLabel</name>
      <anchor>a4</anchor>
      <arglist>(int newLabel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushLabel</name>
      <anchor>a5</anchor>
      <arglist>(int newLabel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popLabel</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLabel</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>topLabel</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::stack&lt; int &gt;</type>
      <name>LabelStack</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LabelStack</type>
      <name>labels</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MulticastRoute</name>
    <filename>struct_multicast_route.html</filename>
    <member kind="variable">
      <type>InterfaceEntry *</type>
      <name>interf</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>gateway</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NAMTrace</name>
    <filename>class_n_a_m_trace.html</filename>
    <member kind="function">
      <type></type>
      <name>NAMTrace</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NAMTrace</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>assignNamId</name>
      <anchor>a2</anchor>
      <arglist>(cModule *node, int namid=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNamId</name>
      <anchor>a3</anchor>
      <arglist>(cModule *node) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enabled</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>out</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::ofstream *</type>
      <name>nams</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lastnamid</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, int &gt;</type>
      <name>modid2namid</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NAMTraceWriter</name>
    <filename>class_n_a_m_trace_writer.html</filename>
    <base>INotifiable</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordNodeEvent</name>
      <anchor>b0</anchor>
      <arglist>(char *state, char *shape)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordLinkEvent</name>
      <anchor>b1</anchor>
      <arglist>(int peernamid, double datarate, double delay, char *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordLinkEvent</name>
      <anchor>b2</anchor>
      <arglist>(InterfaceEntry *ie, char *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordPacketEvent</name>
      <anchor>b3</anchor>
      <arglist>(const char event, int peernamid, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b5</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>b7</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>namid</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NAMTrace *</type>
      <name>nt</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetworkConfigurator</name>
    <filename>class_network_configurator.html</filename>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NodeInfo &gt;</type>
      <name>NodeInfoVector</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>StringVector</name>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractTopology</name>
      <anchor>b3</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assignAddresses</name>
      <anchor>b4</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPointToPointPeerRoutes</name>
      <anchor>b5</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDefaultRoutes</name>
      <anchor>b6</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPeersParameter</name>
      <anchor>b7</anchor>
      <arglist>(const char *submodName, cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillRoutingTables</name>
      <anchor>b8</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDisplayString</name>
      <anchor>b9</anchor>
      <arglist>(cTopology &amp;topo, NodeInfoVector &amp;nodeInfo)</arglist>
    </member>
    <class kind="struct">NetworkConfigurator::NodeInfo</class>
  </compound>
  <compound kind="struct">
    <name>NetworkConfigurator::NodeInfo</name>
    <filename>struct_network_configurator_1_1_node_info.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isIPNode</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingTable *</type>
      <name>rt</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usesDefaultRoute</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NotificationBoard</name>
    <filename>class_notification_board.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; INotifiable * &gt;</type>
      <name>NotifiableVector</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, NotifiableVector &gt;</type>
      <name>ClientMap</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subscribe</name>
      <anchor>z22_0</anchor>
      <arglist>(INotifiable *client, int category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsubscribe</name>
      <anchor>z22_1</anchor>
      <arglist>(INotifiable *client, int category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireChangeNotification</name>
      <anchor>z24_0</anchor>
      <arglist>(int category, cPolymorphic *details=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClientMap</type>
      <name>clientMap</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;, const NotifiableVector &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NotificationBoardAccess</name>
    <filename>class_notification_board_access.html</filename>
    <base>ModuleAccess&lt; NotificationBoard &gt;</base>
    <member kind="function">
      <type></type>
      <name>NotificationBoardAccess</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NullMobility</name>
    <filename>class_null_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NullModulation</name>
    <filename>class_null_modulation.html</filename>
    <base>IModulation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>bitErrorRate</name>
      <anchor>a1</anchor>
      <arglist>(double snir, double bandwidth, double bitrate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFASExternalLSA</name>
    <filename>class_o_s_p_f_a_s_external_l_s_a.html</filename>
    <base>OSPFLSA</base>
    <member kind="function">
      <type></type>
      <name>OSPFASExternalLSA</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFASExternalLSA</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFASExternalLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFASExternalLSA</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFASExternalLSA &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFASExternalLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFASExternalLSAContents &amp;</type>
      <name>getContents</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFASExternalLSAContents &amp;</type>
      <name>getContents</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContents</name>
      <anchor>a8</anchor>
      <arglist>(const OSPFASExternalLSAContents &amp;contents_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFASExternalLSA &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFASExternalLSAContents</type>
      <name>contents_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFASExternalLSAContents</name>
    <filename>class_o_s_p_f_a_s_external_l_s_a_contents.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFASExternalLSAContents</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFASExternalLSAContents</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFASExternalLSAContents &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFASExternalLSAContents</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFASExternalLSAContents &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFASExternalLSAContents &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkMask</name>
      <anchor>a8</anchor>
      <arglist>(const IPAddress &amp;networkMask_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getE_ExternalMetricType</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setE_ExternalMetricType</name>
      <anchor>a10</anchor>
      <arglist>(bool E_ExternalMetricType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getRouteCost</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouteCost</name>
      <anchor>a12</anchor>
      <arglist>(unsigned long routeCost_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getForwardingAddress</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getForwardingAddress</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setForwardingAddress</name>
      <anchor>a15</anchor>
      <arglist>(const IPAddress &amp;forwardingAddress_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getExternalRouteTag</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalRouteTag</name>
      <anchor>a17</anchor>
      <arglist>(long externalRouteTag_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalTOSInfoArraySize</name>
      <anchor>a18</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getExternalTOSInfoArraySize</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExternalTOSInfo &amp;</type>
      <name>getExternalTOSInfo</name>
      <anchor>a20</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ExternalTOSInfo &amp;</type>
      <name>getExternalTOSInfo</name>
      <anchor>a21</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalTOSInfo</name>
      <anchor>a22</anchor>
      <arglist>(unsigned int k, const ExternalTOSInfo &amp;externalTOSInfo_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFASExternalLSAContents &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>networkMask_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>E_ExternalMetricType_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>routeCost_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>forwardingAddress_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>externalRouteTag_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExternalTOSInfo *</type>
      <name>externalTOSInfo_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>externalTOSInfo_arraysize</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFDatabaseDescriptionPacket</name>
    <filename>class_o_s_p_f_database_description_packet.html</filename>
    <base>OSPFPacket</base>
    <member kind="function">
      <type></type>
      <name>OSPFDatabaseDescriptionPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFDatabaseDescriptionPacket</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFDatabaseDescriptionPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFDatabaseDescriptionPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFDatabaseDescriptionPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFDatabaseDescriptionPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getInterfaceMTU</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceMTU</name>
      <anchor>a8</anchor>
      <arglist>(unsigned short interfaceMTU_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFOptions &amp;</type>
      <name>getOptions</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFOptions &amp;</type>
      <name>getOptions</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptions</name>
      <anchor>a11</anchor>
      <arglist>(const OSPFOptions &amp;options_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFDDOptions &amp;</type>
      <name>getDdOptions</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFDDOptions &amp;</type>
      <name>getDdOptions</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDdOptions</name>
      <anchor>a14</anchor>
      <arglist>(const OSPFDDOptions &amp;ddOptions_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getDdSequenceNumber</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDdSequenceNumber</name>
      <anchor>a16</anchor>
      <arglist>(unsigned long ddSequenceNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsaHeadersArraySize</name>
      <anchor>a17</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLsaHeadersArraySize</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFLSAHeader &amp;</type>
      <name>getLsaHeaders</name>
      <anchor>a19</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFLSAHeader &amp;</type>
      <name>getLsaHeaders</name>
      <anchor>a20</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsaHeaders</name>
      <anchor>a21</anchor>
      <arglist>(unsigned int k, const OSPFLSAHeader &amp;lsaHeaders_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFDatabaseDescriptionPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>interfaceMTU_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFOptions</type>
      <name>options_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFDDOptions</type>
      <name>ddOptions_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>ddSequenceNumber_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFLSAHeader *</type>
      <name>lsaHeaders_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>lsaHeaders_arraysize</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPFDDOptions</name>
    <filename>struct_o_s_p_f_d_d_options.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFDDOptions</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_1</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_2</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_3</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_4</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_5</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>I_Init</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>M_More</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>MS_MasterSlave</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFHelloPacket</name>
    <filename>class_o_s_p_f_hello_packet.html</filename>
    <base>OSPFPacket</base>
    <member kind="function">
      <type></type>
      <name>OSPFHelloPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFHelloPacket</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFHelloPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFHelloPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFHelloPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFHelloPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkMask</name>
      <anchor>a9</anchor>
      <arglist>(const IPAddress &amp;networkMask_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getHelloInterval</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHelloInterval</name>
      <anchor>a11</anchor>
      <arglist>(short helloInterval_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFOptions &amp;</type>
      <name>getOptions</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFOptions &amp;</type>
      <name>getOptions</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptions</name>
      <anchor>a14</anchor>
      <arglist>(const OSPFOptions &amp;options_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getRouterPriority</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterPriority</name>
      <anchor>a16</anchor>
      <arglist>(char routerPriority_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getRouterDeadInterval</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterDeadInterval</name>
      <anchor>a18</anchor>
      <arglist>(long routerDeadInterval_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getDesignatedRouter</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getDesignatedRouter</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDesignatedRouter</name>
      <anchor>a21</anchor>
      <arglist>(const IPAddress &amp;designatedRouter_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getBackupDesignatedRouter</name>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getBackupDesignatedRouter</name>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBackupDesignatedRouter</name>
      <anchor>a24</anchor>
      <arglist>(const IPAddress &amp;backupDesignatedRouter_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborArraySize</name>
      <anchor>a25</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNeighborArraySize</name>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getNeighbor</name>
      <anchor>a27</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getNeighbor</name>
      <anchor>a28</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighbor</name>
      <anchor>a29</anchor>
      <arglist>(unsigned int k, const IPAddress &amp;neighbor_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFHelloPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>networkMask_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>helloInterval_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFOptions</type>
      <name>options_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>routerPriority_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>routerDeadInterval_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>designatedRouter_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>backupDesignatedRouter_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress *</type>
      <name>neighbor_var</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>neighbor_arraysize</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFLinkStateAcknowledgementPacket</name>
    <filename>class_o_s_p_f_link_state_acknowledgement_packet.html</filename>
    <base>OSPFPacket</base>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateAcknowledgementPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateAcknowledgementPacket</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFLinkStateAcknowledgementPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFLinkStateAcknowledgementPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFLinkStateAcknowledgementPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFLinkStateAcknowledgementPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsaHeadersArraySize</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLsaHeadersArraySize</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFLSAHeader &amp;</type>
      <name>getLsaHeaders</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFLSAHeader &amp;</type>
      <name>getLsaHeaders</name>
      <anchor>a10</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsaHeaders</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int k, const OSPFLSAHeader &amp;lsaHeaders_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFLinkStateAcknowledgementPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFLSAHeader *</type>
      <name>lsaHeaders_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>lsaHeaders_arraysize</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFLinkStateRequestPacket</name>
    <filename>class_o_s_p_f_link_state_request_packet.html</filename>
    <base>OSPFPacket</base>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateRequestPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateRequestPacket</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFLinkStateRequestPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFLinkStateRequestPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFLinkStateRequestPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFLinkStateRequestPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequestsArraySize</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRequestsArraySize</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LSARequest &amp;</type>
      <name>getRequests</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LSARequest &amp;</type>
      <name>getRequests</name>
      <anchor>a10</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequests</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int k, const LSARequest &amp;requests_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFLinkStateRequestPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LSARequest *</type>
      <name>requests_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>requests_arraysize</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFLinkStateUpdatePacket</name>
    <filename>class_o_s_p_f_link_state_update_packet.html</filename>
    <base>OSPFPacket</base>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateUpdatePacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFLinkStateUpdatePacket</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFLinkStateUpdatePacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFLinkStateUpdatePacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFLinkStateUpdatePacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFLinkStateUpdatePacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getNumberOfLSAs</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfLSAs</name>
      <anchor>a8</anchor>
      <arglist>(unsigned long numberOfLSAs_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterLSAsArraySize</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRouterLSAsArraySize</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFRouterLSA &amp;</type>
      <name>getRouterLSAs</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFRouterLSA &amp;</type>
      <name>getRouterLSAs</name>
      <anchor>a12</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterLSAs</name>
      <anchor>a13</anchor>
      <arglist>(unsigned int k, const OSPFRouterLSA &amp;routerLSAs_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkLSAsArraySize</name>
      <anchor>a14</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNetworkLSAsArraySize</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFNetworkLSA &amp;</type>
      <name>getNetworkLSAs</name>
      <anchor>a16</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFNetworkLSA &amp;</type>
      <name>getNetworkLSAs</name>
      <anchor>a17</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkLSAs</name>
      <anchor>a18</anchor>
      <arglist>(unsigned int k, const OSPFNetworkLSA &amp;networkLSAs_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSummaryLSAsArraySize</name>
      <anchor>a19</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSummaryLSAsArraySize</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFSummaryLSA &amp;</type>
      <name>getSummaryLSAs</name>
      <anchor>a21</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFSummaryLSA &amp;</type>
      <name>getSummaryLSAs</name>
      <anchor>a22</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSummaryLSAs</name>
      <anchor>a23</anchor>
      <arglist>(unsigned int k, const OSPFSummaryLSA &amp;summaryLSAs_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAsExternalLSAsArraySize</name>
      <anchor>a24</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAsExternalLSAsArraySize</name>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFASExternalLSA &amp;</type>
      <name>getAsExternalLSAs</name>
      <anchor>a26</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFASExternalLSA &amp;</type>
      <name>getAsExternalLSAs</name>
      <anchor>a27</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAsExternalLSAs</name>
      <anchor>a28</anchor>
      <arglist>(unsigned int k, const OSPFASExternalLSA &amp;asExternalLSAs_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFLinkStateUpdatePacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numberOfLSAs_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFRouterLSA *</type>
      <name>routerLSAs_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>routerLSAs_arraysize</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFNetworkLSA *</type>
      <name>networkLSAs_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>networkLSAs_arraysize</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFSummaryLSA *</type>
      <name>summaryLSAs_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>summaryLSAs_arraysize</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFASExternalLSA *</type>
      <name>asExternalLSAs_var</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>asExternalLSAs_arraysize</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFLSA</name>
    <filename>class_o_s_p_f_l_s_a.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFLSA</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFLSA</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFLSA</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFLSA &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFLSAHeader &amp;</type>
      <name>getHeader</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFLSAHeader &amp;</type>
      <name>getHeader</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHeader</name>
      <anchor>a8</anchor>
      <arglist>(const OSPFLSAHeader &amp;header_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFLSA &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFLSAHeader</type>
      <name>header_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFLSAHeader</name>
    <filename>class_o_s_p_f_l_s_a_header.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFLSAHeader</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFLSAHeader</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFLSAHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFLSAHeader</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFLSAHeader &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFLSAHeader &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getLsAge</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsAge</name>
      <anchor>a7</anchor>
      <arglist>(unsigned short lsAge_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OSPFOptions &amp;</type>
      <name>getLsOptions</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OSPFOptions &amp;</type>
      <name>getLsOptions</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsOptions</name>
      <anchor>a10</anchor>
      <arglist>(const OSPFOptions &amp;lsOptions_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getLsType</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsType</name>
      <anchor>a12</anchor>
      <arglist>(char lsType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getLinkStateID</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinkStateID</name>
      <anchor>a14</anchor>
      <arglist>(unsigned long linkStateID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getAdvertisingRouter</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getAdvertisingRouter</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvertisingRouter</name>
      <anchor>a17</anchor>
      <arglist>(const IPAddress &amp;advertisingRouter_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getLsSequenceNumber</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsSequenceNumber</name>
      <anchor>a19</anchor>
      <arglist>(long lsSequenceNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getLsChecksum</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLsChecksum</name>
      <anchor>a21</anchor>
      <arglist>(short lsChecksum_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getLength</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLength</name>
      <anchor>a23</anchor>
      <arglist>(unsigned short length_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFLSAHeader &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>lsAge_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OSPFOptions</type>
      <name>lsOptions_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>lsType_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>linkStateID_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>advertisingRouter_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>lsSequenceNumber_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>lsChecksum_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>length_var</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFNetworkLSA</name>
    <filename>class_o_s_p_f_network_l_s_a.html</filename>
    <base>OSPFLSA</base>
    <member kind="function">
      <type></type>
      <name>OSPFNetworkLSA</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFNetworkLSA</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFNetworkLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFNetworkLSA</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFNetworkLSA &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFNetworkLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkMask</name>
      <anchor>a8</anchor>
      <arglist>(const IPAddress &amp;networkMask_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttachedRoutersArraySize</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAttachedRoutersArraySize</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getAttachedRouters</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getAttachedRouters</name>
      <anchor>a12</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttachedRouters</name>
      <anchor>a13</anchor>
      <arglist>(unsigned int k, const IPAddress &amp;attachedRouters_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFNetworkLSA &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>networkMask_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress *</type>
      <name>attachedRouters_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>attachedRouters_arraysize</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPFOptions</name>
    <filename>struct_o_s_p_f_options.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFOptions</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_1</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>E_ExternalRoutingCapability</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>MC_MulticastForwarding</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>NP_Type7LSA</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>EA_ForwardExternalLSAs</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>DC_DemandCircuits</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_2</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unused_3</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFPacket</name>
    <filename>class_o_s_p_f_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFPacket</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getVersion</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVersion</name>
      <anchor>a8</anchor>
      <arglist>(char version_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getType</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchor>a10</anchor>
      <arglist>(char type_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getPacketLength</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketLength</name>
      <anchor>a12</anchor>
      <arglist>(short packetLength_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getRouterID</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getRouterID</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouterID</name>
      <anchor>a15</anchor>
      <arglist>(const IPAddress &amp;routerID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getAreaID</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getAreaID</name>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAreaID</name>
      <anchor>a18</anchor>
      <arglist>(const IPAddress &amp;areaID_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getChecksum</name>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChecksum</name>
      <anchor>a20</anchor>
      <arglist>(short checksum_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getAuthenticationType</name>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAuthenticationType</name>
      <anchor>a22</anchor>
      <arglist>(short authenticationType_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAuthenticationArraySize</name>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getAuthentication</name>
      <anchor>a24</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAuthentication</name>
      <anchor>a25</anchor>
      <arglist>(unsigned int k, char authentication_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>version_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>type_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>packetLength_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>routerID_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>areaID_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>checksum_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>authenticationType_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>authentication_var</name>
      <anchor>p7</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFRouterLSA</name>
    <filename>class_o_s_p_f_router_l_s_a.html</filename>
    <base>OSPFLSA</base>
    <member kind="function">
      <type></type>
      <name>OSPFRouterLSA</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFRouterLSA</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFRouterLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFRouterLSA</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFRouterLSA &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFRouterLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getV_VirtualLinkEndpoint</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setV_VirtualLinkEndpoint</name>
      <anchor>a7</anchor>
      <arglist>(bool V_VirtualLinkEndpoint_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getE_ASBoundaryRouter</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setE_ASBoundaryRouter</name>
      <anchor>a9</anchor>
      <arglist>(bool E_ASBoundaryRouter_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getB_AreaBorderRouter</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setB_AreaBorderRouter</name>
      <anchor>a11</anchor>
      <arglist>(bool B_AreaBorderRouter_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getNumberOfLinks</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfLinks</name>
      <anchor>a13</anchor>
      <arglist>(unsigned short numberOfLinks_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinksArraySize</name>
      <anchor>a14</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLinksArraySize</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Link &amp;</type>
      <name>getLinks</name>
      <anchor>a16</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Link &amp;</type>
      <name>getLinks</name>
      <anchor>a17</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinks</name>
      <anchor>a18</anchor>
      <arglist>(unsigned int k, const Link &amp;links_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFRouterLSA &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>V_VirtualLinkEndpoint_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>E_ASBoundaryRouter_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>B_AreaBorderRouter_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>numberOfLinks_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Link *</type>
      <name>links_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>links_arraysize</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFRouting</name>
    <filename>class_o_s_p_f_routing.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFRouting</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFRouting</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ResolveInterfaceName</name>
      <anchor>d0</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>GetAreaListFromXML</name>
      <anchor>d1</anchor>
      <arglist>(const cXMLElement &amp;routerNode, std::map&lt; std::string, int &gt; &amp;areaList) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LoadAreaFromXML</name>
      <anchor>d2</anchor>
      <arglist>(const cXMLElement &amp;asConfig, const std::string &amp;areaID)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LoadInterfaceParameters</name>
      <anchor>d3</anchor>
      <arglist>(const cXMLElement &amp;ifConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LoadExternalRoute</name>
      <anchor>d4</anchor>
      <arglist>(const cXMLElement &amp;externalRouteConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LoadHostRoute</name>
      <anchor>d5</anchor>
      <arglist>(const cXMLElement &amp;hostRouteConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LoadVirtualLink</name>
      <anchor>d6</anchor>
      <arglist>(const cXMLElement &amp;virtualLinkConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>LoadConfigFromXML</name>
      <anchor>d7</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingTable *</type>
      <name>rt</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPF::Router *</type>
      <name>ospfRouter</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFSummaryLSA</name>
    <filename>class_o_s_p_f_summary_l_s_a.html</filename>
    <base>OSPFLSA</base>
    <member kind="function">
      <type></type>
      <name>OSPFSummaryLSA</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFSummaryLSA</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFSummaryLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFSummaryLSA</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFSummaryLSA &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFSummaryLSA &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getNetworkMask</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkMask</name>
      <anchor>a8</anchor>
      <arglist>(const IPAddress &amp;networkMask_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getRouteCost</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouteCost</name>
      <anchor>a10</anchor>
      <arglist>(unsigned long routeCost_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTosDataArraySize</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getTosDataArraySize</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TOSData &amp;</type>
      <name>getTosData</name>
      <anchor>a13</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TOSData &amp;</type>
      <name>getTosData</name>
      <anchor>a14</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTosData</name>
      <anchor>a15</anchor>
      <arglist>(unsigned int k, const TOSData &amp;tosData_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFSummaryLSA &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>networkMask_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>routeCost_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TOSData *</type>
      <name>tosData_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tosData_arraysize</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPFTimer</name>
    <filename>class_o_s_p_f_timer.html</filename>
    <member kind="function">
      <type></type>
      <name>OSPFTimer</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OSPFTimer</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OSPFTimer</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const OSPFTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getTimerKind</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimerKind</name>
      <anchor>a8</anchor>
      <arglist>(char timerKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const OSPFTimer &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>timerKind_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PassiveQueueBase</name>
    <filename>class_passive_queue_base.html</filename>
    <base>IPassiveQueue</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>requestPacket</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>enqueue</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cMessage *</type>
      <name>dequeue</name>
      <anchor>b4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>sendOut</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetRequested</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numQueueReceived</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numQueueDropped</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PathLossReceptionModel</name>
    <filename>class_path_loss_reception_model.html</filename>
    <base>IReceptionModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchor>a0</anchor>
      <arglist>(cModule *radioModule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calculateReceivedPower</name>
      <anchor>a1</anchor>
      <arglist>(double pSend, double carrierFrequency, double distance)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>pathLossAlpha</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PathNotifyMsg</name>
    <filename>class_path_notify_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>PathNotifyMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathNotifyMsg</name>
      <anchor>a1</anchor>
      <arglist>(const PathNotifyMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathNotifyMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PathNotifyMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const PathNotifyMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SessionObj_t &amp;</type>
      <name>getSession</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SessionObj_t &amp;</type>
      <name>getSession</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSession</name>
      <anchor>a9</anchor>
      <arglist>(const SessionObj_t &amp;session_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderTemplateObj_t &amp;</type>
      <name>getSender</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SenderTemplateObj_t &amp;</type>
      <name>getSender</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSender</name>
      <anchor>a12</anchor>
      <arglist>(const SenderTemplateObj_t &amp;sender_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatus</name>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatus</name>
      <anchor>a14</anchor>
      <arglist>(int status_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a16</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const PathNotifyMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SessionObj_t</type>
      <name>session_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SenderTemplateObj_t</type>
      <name>sender_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>status_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PCB</name>
    <filename>class_p_c_b.html</filename>
    <member kind="function">
      <type></type>
      <name>PCB</name>
      <anchor>a0</anchor>
      <arglist>(const PCB &amp;pcb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PCB</name>
      <anchor>a1</anchor>
      <arglist>(IN_Addr laddr, IN_Port lport, IN_Addr faddr, IN_Port fport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PCB</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PCB</name>
      <anchor>a3</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PCB</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>PCB &amp;</type>
      <name>operator=</name>
      <anchor>a8</anchor>
      <arglist>(const PCB &amp;pcb)</arglist>
    </member>
    <member kind="function">
      <type>const IN_Addr &amp;</type>
      <name>fAddr</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IN_Addr &amp;</type>
      <name>lAddr</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IN_Port &amp;</type>
      <name>fPort</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IN_Port &amp;</type>
      <name>lPort</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFAddr</name>
      <anchor>a13</anchor>
      <arglist>(const IN_Addr &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLAddr</name>
      <anchor>a14</anchor>
      <arglist>(const IN_Addr &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFPort</name>
      <anchor>a15</anchor>
      <arglist>(const IN_Port &amp;port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLPort</name>
      <anchor>a16</anchor>
      <arglist>(const IN_Port &amp;port)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>_init</name>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Addr</type>
      <name>_faddr</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Port</type>
      <name>_fport</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Addr</type>
      <name>_laddr</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Port</type>
      <name>_lport</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyControlInfo</name>
    <filename>class_phy_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>PhyControlInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhyControlInfo</name>
      <anchor>a1</anchor>
      <arglist>(const PhyControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PhyControlInfo</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhyControlInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const PhyControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>channelNumber</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelNumber</name>
      <anchor>a7</anchor>
      <arglist>(int channelNumber_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>bitrate</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitrate</name>
      <anchor>a9</anchor>
      <arglist>(double bitrate_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const PhyControlInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PingApp</name>
    <filename>class_ping_app.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPing</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleNextPing</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *timer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToICMP</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *payload, const IPvXAddress &amp;destAddr, const IPvXAddress &amp;srcAddr, int hopLimit)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPingResponse</name>
      <anchor>b6</anchor>
      <arglist>(PingPayload *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>countPingResponse</name>
      <anchor>b7</anchor>
      <arglist>(int bytes, long seqNo, simtime_t rtt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>destAddr</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>srcAddr</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetSize</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>intervalp</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hopLimit</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>count</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>stopTime</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>printPing</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>sendSeqNo</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>expectedReplySeqNo</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cStdDev</type>
      <name>delayStat</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>delayVector</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>dropVector</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>dropCount</name>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>outOfOrderArrivalCount</name>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PingPayload</name>
    <filename>class_ping_payload.html</filename>
    <member kind="function">
      <type></type>
      <name>PingPayload</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PingPayload</name>
      <anchor>a1</anchor>
      <arglist>(const PingPayload &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PingPayload</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PingPayload &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const PingPayload &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>originatorId</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginatorId</name>
      <anchor>a8</anchor>
      <arglist>(long originatorId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>seqNo</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeqNo</name>
      <anchor>a10</anchor>
      <arglist>(long seqNo_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDataArraySize</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dataArraySize</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>data</name>
      <anchor>a13</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchor>a14</anchor>
      <arglist>(unsigned int k, unsigned char data_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const PingPayload &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>originatorId_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>seqNo_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>data_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>data_arraysize</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PPP</name>
    <filename>class_p_p_p.html</filename>
    <member kind="function">
      <type></type>
      <name>PPP</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PPP</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InterfaceEntry *</type>
      <name>registerInterface</name>
      <anchor>b0</anchor>
      <arglist>(double datarate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startTransmitting</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PPPFrame *</type>
      <name>encapsulate</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cMessage *</type>
      <name>decapsulate</name>
      <anchor>b3</anchor>
      <arglist>(PPPFrame *pppFrame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>displayBusy</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>displayIdle</name>
      <anchor>b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b8</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>connected</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>txQueueLimit</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>gateToWatch</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>txQueue</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endTransmissionEvent</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPassiveQueue *</type>
      <name>queueModule</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry *</type>
      <name>interfaceEntry</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>datarate</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TxNotifDetails</type>
      <name>notifDetails</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>oldConnColor</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSent</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numRcvdOK</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numBitErr</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numDroppedIfaceDown</name>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PPPFrame</name>
    <filename>class_p_p_p_frame.html</filename>
    <member kind="function">
      <type></type>
      <name>PPPFrame</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PPPFrame</name>
      <anchor>a1</anchor>
      <arglist>(const PPPFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PPPFrame</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PPPFrame &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const PPPFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const PPPFrame &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProtocolMapping</name>
    <filename>class_protocol_mapping.html</filename>
    <member kind="function">
      <type></type>
      <name>ProtocolMapping</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProtocolMapping</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseProtocolMapping</name>
      <anchor>a2</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>outputGateForProtocol</name>
      <anchor>a3</anchor>
      <arglist>(int protocol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Entry &gt;</type>
      <name>Entries</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Entries</type>
      <name>entries</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ProtocolMapping::Entry</class>
  </compound>
  <compound kind="struct">
    <name>ProtocolMapping::Entry</name>
    <filename>struct_protocol_mapping_1_1_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>protocolNumber</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>outGateIndex</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PsbTimeoutMsg</name>
    <filename>class_psb_timeout_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>PsbTimeoutMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PsbTimeoutMsg</name>
      <anchor>a1</anchor>
      <arglist>(const PsbTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PsbTimeoutMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PsbTimeoutMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const PsbTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getId</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchor>a8</anchor>
      <arglist>(int id_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a10</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const PsbTimeoutMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PsbTimerMsg</name>
    <filename>class_psb_timer_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>PsbTimerMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PsbTimerMsg</name>
      <anchor>a1</anchor>
      <arglist>(const PsbTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PsbTimerMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PsbTimerMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const PsbTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getId</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchor>a8</anchor>
      <arglist>(int id_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a10</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const PsbTimerMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAM16Modulation</name>
    <filename>class_q_a_m16_modulation.html</filename>
    <base>IModulation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>bitErrorRate</name>
      <anchor>a1</anchor>
      <arglist>(double snir, double bandwidth, double bitrate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QAM256Modulation</name>
    <filename>class_q_a_m256_modulation.html</filename>
    <base>IModulation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>name</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>bitErrorRate</name>
      <anchor>a1</anchor>
      <arglist>(double snir, double bandwidth, double bitrate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QueueBase</name>
    <filename>class_queue_base.html</filename>
    <base>AbstractQueue</base>
    <member kind="function">
      <type></type>
      <name>QueueBase</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>arrival</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>arrivalWhenIdle</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>startService</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>delay</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QueueWithQoS</name>
    <filename>class_queue_with_qo_s.html</filename>
    <base>AbstractQueue</base>
    <member kind="function">
      <type></type>
      <name>QueueWithQoS</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>arrival</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>arrivalWhenIdle</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>startService</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EnqueueHook *</type>
      <name>qosHook</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioState</name>
    <filename>class_radio_state.html</filename>
    <member kind="enumeration">
      <name>State</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE</name>
      <anchor>w4w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RECV</name>
      <anchor>w4w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSMIT</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP</name>
      <anchor>w4w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadioState</name>
      <anchor>a0</anchor>
      <arglist>(int radioModuleId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRadioId</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>getState</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchor>a3</anchor>
      <arglist>(State s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannelNumber</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannelNumber</name>
      <anchor>a5</anchor>
      <arglist>(int chan)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitrate</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitrate</name>
      <anchor>a7</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchor>e0</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>radioId</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State</type>
      <name>state</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>channelNumber</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>bitrate</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomWPMobility</name>
    <filename>class_random_w_p_mobility.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nextMoveIsWait</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReassemblyBuffer</name>
    <filename>class_reassembly_buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>ReassemblyBuffer</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReassemblyBuffer</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFragment</name>
      <anchor>a2</anchor>
      <arglist>(ushort beg, ushort end, bool islast)</arglist>
    </member>
    <member kind="function">
      <type>ushort</type>
      <name>totalLength</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Region &gt;</type>
      <name>RegionVector</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>merge</name>
      <anchor>b0</anchor>
      <arglist>(ushort beg, ushort end, bool islast)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mergeFragments</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Region</type>
      <name>main</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegionVector *</type>
      <name>fragments</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ReassemblyBuffer::Region</class>
  </compound>
  <compound kind="struct">
    <name>ReassemblyBuffer::Region</name>
    <filename>struct_reassembly_buffer_1_1_region.html</filename>
    <member kind="variable">
      <type>ushort</type>
      <name>beg</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ushort</type>
      <name>end</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>islast</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReceptionReport</name>
    <filename>class_reception_report.html</filename>
    <member kind="function">
      <type></type>
      <name>ReceptionReport</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReceptionReport</name>
      <anchor>a1</anchor>
      <arglist>(const ReceptionReport &amp;receptionReport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReceptionReport</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReceptionReport &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ReceptionReport &amp;receptionReport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>ssrc</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchor>a9</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int8</type>
      <name>fractionLost</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFractionLost</name>
      <anchor>a11</anchor>
      <arglist>(u_int8 fractionLost)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>packetsLostCumulative</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketsLostCumulative</name>
      <anchor>a13</anchor>
      <arglist>(int packetLostCumulative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>sequenceNumber</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNumber</name>
      <anchor>a15</anchor>
      <arglist>(u_int32 sequenceNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>jitter</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJitter</name>
      <anchor>a17</anchor>
      <arglist>(int jitter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lastSR</name>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastSR</name>
      <anchor>a19</anchor>
      <arglist>(int lastSR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>delaySinceLastSR</name>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelaySinceLastSR</name>
      <anchor>a21</anchor>
      <arglist>(int delaySinceLastSR)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_ssrc</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int8</type>
      <name>_fractionLost</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_packetsLostCumulative</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_extendedHighestSequenceNumber</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_jitter</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_lastSR</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_delaySinceLastSR</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleMobility</name>
    <filename>class_rectangle_mobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>move</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateXY</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x1</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y1</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x2</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y2</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner1</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner2</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner3</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner4</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>REDQueue</name>
    <filename>class_r_e_d_queue.html</filename>
    <base>PassiveQueueBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>enqueue</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dequeue</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendOut</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>wq</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minth</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxth</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxp</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pkrate</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue</type>
      <name>queue</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>avg</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>q_time</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>count</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>avgQlenVec</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>qlenVec</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>dropVec</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numEarlyDrops</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RoutingEntry</name>
    <filename>class_routing_entry.html</filename>
    <member kind="enumeration">
      <name>RouteType</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIRECT</name>
      <anchor>w8w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REMOTE</name>
      <anchor>w8w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>RouteSource</name>
      <anchor>w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MANUAL</name>
      <anchor>w9w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IFACENETMASK</name>
      <anchor>w9w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RIP</name>
      <anchor>w9w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OSPF</name>
      <anchor>w9w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BGP</name>
      <anchor>w9w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZEBRA</name>
      <anchor>w9w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingEntry</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingEntry</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>host</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>netmask</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>gateway</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>opp_string</type>
      <name>interfaceName</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterfaceEntry *</type>
      <name>interfacePtr</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RouteType</type>
      <name>type</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RouteSource</type>
      <name>source</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>metric</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RoutingEntry</name>
      <anchor>d0</anchor>
      <arglist>(const RoutingEntry &amp;obj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RoutingEntry &amp;</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const RoutingEntry &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RoutingTable</name>
    <filename>class_routing_table.html</filename>
    <base>INotifiable</base>
    <member kind="function">
      <type></type>
      <name>RoutingTable</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingTable</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchor>a2</anchor>
      <arglist>(int category, cPolymorphic *details)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ipForward</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRouterId</name>
      <anchor>a5</anchor>
      <arglist>(IPAddress a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printIfconfig</name>
      <anchor>z38_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printRoutingTable</name>
      <anchor>z38_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configureInterfaceForIPv4</name>
      <anchor>z40_0</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>interfaceByAddress</name>
      <anchor>z40_1</anchor>
      <arglist>(const IPAddress &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>localDeliver</name>
      <anchor>z42_0</anchor>
      <arglist>(const IPAddress &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>RoutingEntry *</type>
      <name>findBestMatchingRoute</name>
      <anchor>z42_1</anchor>
      <arglist>(const IPAddress &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>interfaceForDestAddr</name>
      <anchor>z42_2</anchor>
      <arglist>(const IPAddress &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>gatewayForDestAddr</name>
      <anchor>z42_3</anchor>
      <arglist>(const IPAddress &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>multicastLocalDeliver</name>
      <anchor>z44_0</anchor>
      <arglist>(const IPAddress &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>MulticastRoutes</type>
      <name>multicastRoutesFor</name>
      <anchor>z44_1</anchor>
      <arglist>(const IPAddress &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numRoutingEntries</name>
      <anchor>z46_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RoutingEntry *</type>
      <name>routingEntry</name>
      <anchor>z46_1</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>RoutingEntry *</type>
      <name>findRoutingEntry</name>
      <anchor>z46_2</anchor>
      <arglist>(const IPAddress &amp;target, const IPAddress &amp;netmask, const IPAddress &amp;gw, int metric=0, char *dev=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoutingEntry</name>
      <anchor>z46_3</anchor>
      <arglist>(RoutingEntry *entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteRoutingEntry</name>
      <anchor>z46_4</anchor>
      <arglist>(RoutingEntry *entry)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; IPAddress &gt;</type>
      <name>gatherAddresses</name>
      <anchor>z46_5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configureLoopbackForIPv4</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>routingEntryMatches</name>
      <anchor>b1</anchor>
      <arglist>(RoutingEntry *entry, const IPAddress &amp;target, const IPAddress &amp;nmask, const IPAddress &amp;gw, int metric, const char *dev)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>autoconfigRouterId</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNetmaskRoutes</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numInitStages</name>
      <anchor>b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchor>b6</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>b7</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; RoutingEntry * &gt;</type>
      <name>RouteVector</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPAddress</type>
      <name>_routerId</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IPForward</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouteVector</type>
      <name>routes</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouteVector</type>
      <name>multicastRoutes</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RoutingTable6</name>
    <filename>class_routing_table6.html</filename>
    <member kind="function">
      <type></type>
      <name>RoutingTable6</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingTable6</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRouter</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>interfaceByAddress</name>
      <anchor>z52_0</anchor>
      <arglist>(const IPv6Address &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>localDeliver</name>
      <anchor>z54_0</anchor>
      <arglist>(const IPv6Address &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>const IPv6Address &amp;</type>
      <name>lookupDestCache</name>
      <anchor>z54_1</anchor>
      <arglist>(const IPv6Address &amp;dest, int &amp;outInterfaceId)</arglist>
    </member>
    <member kind="function">
      <type>const IPv6Route *</type>
      <name>doLongestPrefixMatch</name>
      <anchor>z54_2</anchor>
      <arglist>(const IPv6Address &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPrefixPresent</name>
      <anchor>z54_3</anchor>
      <arglist>(const IPv6Address &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDestCache</name>
      <anchor>z55_0</anchor>
      <arglist>(const IPv6Address &amp;dest, const IPv6Address &amp;nextHopAddr, int interfaceId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purgeDestCache</name>
      <anchor>z55_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purgeDestCacheEntriesToNeighbour</name>
      <anchor>z55_2</anchor>
      <arglist>(const IPv6Address &amp;nextHopAddr, int interfaceId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOrUpdateOnLinkPrefix</name>
      <anchor>z57_0</anchor>
      <arglist>(const IPv6Address &amp;destPrefix, int prefixLength, int interfaceId, simtime_t expiryTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOnLinkPrefix</name>
      <anchor>z57_1</anchor>
      <arglist>(const IPv6Address &amp;destPrefix, int prefixLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOrUpdateOwnAdvPrefix</name>
      <anchor>z57_2</anchor>
      <arglist>(const IPv6Address &amp;destPrefix, int prefixLength, int interfaceId, simtime_t expiryTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStaticRoute</name>
      <anchor>z57_3</anchor>
      <arglist>(const IPv6Address &amp;destPrefix, int prefixLength, unsigned int interfaceId, const IPv6Address &amp;nextHop, int metric=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDefaultRoute</name>
      <anchor>z57_4</anchor>
      <arglist>(const IPv6Address &amp;raSrcAddr, unsigned int ifID, simtime_t routerLifetime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoutingProtocolRoute</name>
      <anchor>z57_5</anchor>
      <arglist>(IPv6Route *route)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRoute</name>
      <anchor>z57_6</anchor>
      <arglist>(IPv6Route *route)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numRoutes</name>
      <anchor>z57_7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPv6Route *</type>
      <name>route</name>
      <anchor>z57_8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numInitStages</name>
      <anchor>b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchor>b2</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parseXMLConfigFile</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; IPv6Address, DestCacheEntry &gt;</type>
      <name>DestCache</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; IPv6Route * &gt;</type>
      <name>RouteList</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addRoute</name>
      <anchor>d0</anchor>
      <arglist>(IPv6Route *route)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>configureInterfaceForIPv6</name>
      <anchor>d1</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assignRequiredNodeAddresses</name>
      <anchor>d2</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>configureInterfaceFromXML</name>
      <anchor>d3</anchor>
      <arglist>(InterfaceEntry *ie, cXMLElement *cfg)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>routeLessThan</name>
      <anchor>h0</anchor>
      <arglist>(const IPv6Route *a, const IPv6Route *b)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isrouter</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DestCache</type>
      <name>destCache</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouteList</type>
      <name>routeList</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;os, const DestCacheEntry &amp;e)</arglist>
    </member>
    <class kind="struct">RoutingTable6::DestCacheEntry</class>
  </compound>
  <compound kind="struct">
    <name>RoutingTable6::DestCacheEntry</name>
    <filename>struct_routing_table6_1_1_dest_cache_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>interfaceId</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Address</type>
      <name>nextHopAddr</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RoutingTable6Access</name>
    <filename>class_routing_table6_access.html</filename>
    <base>ModuleAccess&lt; RoutingTable6 &gt;</base>
    <member kind="function">
      <type></type>
      <name>RoutingTable6Access</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RoutingTableAccess</name>
    <filename>class_routing_table_access.html</filename>
    <base>ModuleAccess&lt; RoutingTable &gt;</base>
    <member kind="function">
      <type></type>
      <name>RoutingTableAccess</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RoutingTableParser</name>
    <filename>class_routing_table_parser.html</filename>
    <member kind="function">
      <type></type>
      <name>RoutingTableParser</name>
      <anchor>a0</anchor>
      <arglist>(InterfaceTable *ift, RoutingTable *rt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readRoutingTableFromFile</name>
      <anchor>a1</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>createFilteredFile</name>
      <anchor>d0</anchor>
      <arglist>(char *file, int &amp;charpointer, const char *endtoken)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>parseInterfaces</name>
      <anchor>d1</anchor>
      <arglist>(char *ifconfigFile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>parseRouting</name>
      <anchor>d2</anchor>
      <arglist>(char *routeFile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>parseEntry</name>
      <anchor>d3</anchor>
      <arglist>(char *ifconfigFile, const char *tokenStr, int &amp;charpointer, char *destStr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>parseMulticastGroups</name>
      <anchor>d4</anchor>
      <arglist>(char *groupStr, InterfaceEntry *)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>streq</name>
      <anchor>h0</anchor>
      <arglist>(const char *str1, const char *str2)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>skipBlanks</name>
      <anchor>h1</anchor>
      <arglist>(char *str, int &amp;charptr)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>strcpyword</name>
      <anchor>h2</anchor>
      <arglist>(char *dest, const char *src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingTable *</type>
      <name>rt</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RsbCommitTimerMsg</name>
    <filename>class_rsb_commit_timer_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>RsbCommitTimerMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RsbCommitTimerMsg</name>
      <anchor>a1</anchor>
      <arglist>(const RsbCommitTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RsbCommitTimerMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RsbCommitTimerMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RsbCommitTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getId</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchor>a8</anchor>
      <arglist>(int id_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a10</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RsbCommitTimerMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RsbRefreshTimerMsg</name>
    <filename>class_rsb_refresh_timer_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>RsbRefreshTimerMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RsbRefreshTimerMsg</name>
      <anchor>a1</anchor>
      <arglist>(const RsbRefreshTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RsbRefreshTimerMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RsbRefreshTimerMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RsbRefreshTimerMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getId</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchor>a8</anchor>
      <arglist>(int id_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a10</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RsbRefreshTimerMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RsbTimeoutMsg</name>
    <filename>class_rsb_timeout_msg.html</filename>
    <base>SignallingMsg</base>
    <member kind="function">
      <type></type>
      <name>RsbTimeoutMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RsbTimeoutMsg</name>
      <anchor>a1</anchor>
      <arglist>(const RsbTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RsbTimeoutMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RsbTimeoutMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RsbTimeoutMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getId</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchor>a8</anchor>
      <arglist>(int id_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a10</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RsbTimeoutMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVP</name>
    <filename>class_r_s_v_p.html</filename>
    <base>IScriptable</base>
    <member kind="function">
      <type></type>
      <name>RSVP</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVP</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSignallingMessage</name>
      <anchor>b0</anchor>
      <arglist>(SignallingMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processPSB_TIMER</name>
      <anchor>b1</anchor>
      <arglist>(PsbTimerMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processPSB_TIMEOUT</name>
      <anchor>b2</anchor>
      <arglist>(PsbTimeoutMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processRSB_REFRESH_TIMER</name>
      <anchor>b3</anchor>
      <arglist>(RsbRefreshTimerMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processRSB_COMMIT_TIMER</name>
      <anchor>b4</anchor>
      <arglist>(RsbCommitTimerMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processRSB_TIMEOUT</name>
      <anchor>b5</anchor>
      <arglist>(RsbTimeoutMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processHELLO_TIMER</name>
      <anchor>b6</anchor>
      <arglist>(HelloTimerMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processHELLO_TIMEOUT</name>
      <anchor>b7</anchor>
      <arglist>(HelloTimeoutMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processPATH_NOTIFY</name>
      <anchor>b8</anchor>
      <arglist>(PathNotifyMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processRSVPMessage</name>
      <anchor>b9</anchor>
      <arglist>(RSVPMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processHelloMsg</name>
      <anchor>b10</anchor>
      <arglist>(RSVPHelloMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processPathMsg</name>
      <anchor>b11</anchor>
      <arglist>(RSVPPathMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processResvMsg</name>
      <anchor>b12</anchor>
      <arglist>(RSVPResvMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processPathTearMsg</name>
      <anchor>b13</anchor>
      <arglist>(RSVPPathTear *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processPathErrMsg</name>
      <anchor>b14</anchor>
      <arglist>(RSVPPathError *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathStateBlock_t *</type>
      <name>createPSB</name>
      <anchor>b15</anchor>
      <arglist>(RSVPPathMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathStateBlock_t *</type>
      <name>createIngressPSB</name>
      <anchor>b16</anchor>
      <arglist>(const traffic_session_t &amp;session, const traffic_path_t &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removePSB</name>
      <anchor>b17</anchor>
      <arglist>(PathStateBlock_t *psb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ResvStateBlock_t *</type>
      <name>createRSB</name>
      <anchor>b18</anchor>
      <arglist>(RSVPResvMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ResvStateBlock_t *</type>
      <name>createEgressRSB</name>
      <anchor>b19</anchor>
      <arglist>(PathStateBlock_t *psb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateRSB</name>
      <anchor>b20</anchor>
      <arglist>(ResvStateBlock_t *rsb, RSVPResvMsg *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeRSB</name>
      <anchor>b21</anchor>
      <arglist>(ResvStateBlock_t *rsb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeRsbFilter</name>
      <anchor>b22</anchor>
      <arglist>(ResvStateBlock_t *rsb, unsigned int index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refreshPath</name>
      <anchor>b23</anchor>
      <arglist>(PathStateBlock_t *psbEle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refreshResv</name>
      <anchor>b24</anchor>
      <arglist>(ResvStateBlock_t *rsbEle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refreshResv</name>
      <anchor>b25</anchor>
      <arglist>(ResvStateBlock_t *rsbEle, IPAddress PHOP)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>commitResv</name>
      <anchor>b26</anchor>
      <arglist>(ResvStateBlock_t *rsb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleRefreshTimer</name>
      <anchor>b27</anchor>
      <arglist>(PathStateBlock_t *psbEle, double delay)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleTimeout</name>
      <anchor>b28</anchor>
      <arglist>(PathStateBlock_t *psbEle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleRefreshTimer</name>
      <anchor>b29</anchor>
      <arglist>(ResvStateBlock_t *rsbEle, double delay)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleCommitTimer</name>
      <anchor>b30</anchor>
      <arglist>(ResvStateBlock_t *rsbEle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleTimeout</name>
      <anchor>b31</anchor>
      <arglist>(ResvStateBlock_t *rsbEle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPathErrorMessage</name>
      <anchor>b32</anchor>
      <arglist>(PathStateBlock_t *psb, int errCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPathErrorMessage</name>
      <anchor>b33</anchor>
      <arglist>(SessionObj_t session, SenderTemplateObj_t sender, SenderTspecObj_t tspec, IPAddress nextHop, int errCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPathTearMessage</name>
      <anchor>b34</anchor>
      <arglist>(IPAddress peerIP, const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender, IPAddress LIH, IPAddress NHOP, bool force)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPathNotify</name>
      <anchor>b35</anchor>
      <arglist>(int handler, const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender, int status, double delay)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupHello</name>
      <anchor>b36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startHello</name>
      <anchor>b37</anchor>
      <arglist>(IPAddress peer, double delay)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recoveryEvent</name>
      <anchor>b38</anchor>
      <arglist>(IPAddress peer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>allocateResource</name>
      <anchor>b39</anchor>
      <arglist>(IPAddress OI, const SessionObj_t &amp;session, double bandwidth)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>preempt</name>
      <anchor>b40</anchor>
      <arglist>(IPAddress OI, int priority, double bandwidth)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>doCACCheck</name>
      <anchor>b41</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTspecObj_t &amp;tspec, IPAddress OI)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>announceLinkChange</name>
      <anchor>b42</anchor>
      <arglist>(int tedlinkindex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToIP</name>
      <anchor>b43</anchor>
      <arglist>(cMessage *msg, IPAddress destAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>evalNextHopInterface</name>
      <anchor>b44</anchor>
      <arglist>(IPAddress destAddr, const EroVector &amp;ERO, IPAddress &amp;OI)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathStateBlock_t *</type>
      <name>findPSB</name>
      <anchor>b45</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ResvStateBlock_t *</type>
      <name>findRSB</name>
      <anchor>b46</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender, unsigned int &amp;index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathStateBlock_t *</type>
      <name>findPsbById</name>
      <anchor>b47</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ResvStateBlock_t *</type>
      <name>findRsbById</name>
      <anchor>b48</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; traffic_session_t &gt;::iterator</type>
      <name>findSession</name>
      <anchor>b49</anchor>
      <arglist>(const SessionObj_t &amp;session)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; traffic_path_t &gt;::iterator</type>
      <name>findPath</name>
      <anchor>b50</anchor>
      <arglist>(traffic_session_t *session, const SenderTemplateObj_t &amp;sender)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HelloState_t *</type>
      <name>findHello</name>
      <anchor>b51</anchor>
      <arglist>(IPAddress peer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchor>b52</anchor>
      <arglist>(RSVPPathMsg *p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchor>b53</anchor>
      <arglist>(RSVPResvMsg *r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readTrafficFromXML</name>
      <anchor>b54</anchor>
      <arglist>(const cXMLElement *traffic)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readTrafficSessionFromXML</name>
      <anchor>b55</anchor>
      <arglist>(const cXMLElement *session)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EroVector</type>
      <name>readTrafficRouteFromXML</name>
      <anchor>b56</anchor>
      <arglist>(const cXMLElement *route)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createPath</name>
      <anchor>b57</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pathProblem</name>
      <anchor>b58</anchor>
      <arglist>(PathStateBlock_t *psb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addSession</name>
      <anchor>b59</anchor>
      <arglist>(const cXMLElement &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>delSession</name>
      <anchor>b60</anchor>
      <arglist>(const cXMLElement &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b62</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b63</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processCommand</name>
      <anchor>b64</anchor>
      <arglist>(const cXMLElement &amp;node)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; PathStateBlock_t &gt;</type>
      <name>PSBVector</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; ResvStateBlock_t &gt;</type>
      <name>RSBVector</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; HelloState_t &gt;</type>
      <name>HelloVector</name>
      <anchor>y2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getInLabel</name>
      <anchor>d0</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; traffic_session_t &gt;</type>
      <name>traffic</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>helloInterval</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>helloTimeout</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>retryInterval</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TED *</type>
      <name>tedmod</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingTable *</type>
      <name>rt</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LIBTable *</type>
      <name>lt</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IRSVPClassifier *</type>
      <name>rpct</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxPsbId</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxRsbId</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxSrcInstance</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PSBVector</type>
      <name>PSBList</name>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RSBVector</type>
      <name>RSBList</name>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HelloVector</type>
      <name>HelloList</name>
      <anchor>r16</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SimpleClassifier</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">RSVP::HelloState_t</class>
    <class kind="struct">RSVP::PathStateBlock_t</class>
    <class kind="struct">RSVP::ResvStateBlock_t</class>
    <class kind="struct">RSVP::traffic_path_t</class>
    <class kind="struct">RSVP::traffic_session_t</class>
  </compound>
  <compound kind="struct">
    <name>RSVP::HelloState_t</name>
    <filename>struct_r_s_v_p_1_1_hello_state__t.html</filename>
    <member kind="variable">
      <type>IPAddress</type>
      <name>peer</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>srcInstance</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dstInstance</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HelloTimerMsg *</type>
      <name>timer</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HelloTimeoutMsg *</type>
      <name>timeout</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>request</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ack</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ok</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RSVP::PathStateBlock_t</name>
    <filename>struct_r_s_v_p_1_1_path_state_block__t.html</filename>
    <member kind="variable">
      <type>SessionObj_t</type>
      <name>Session_Object</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SenderTemplateObj_t</type>
      <name>Sender_Template_Object</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SenderTspecObj_t</type>
      <name>Sender_Tspec_Object</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>Previous_Hop_Address</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>OutInterface</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EroVector</type>
      <name>ERO</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>color</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PsbTimerMsg *</type>
      <name>timerMsg</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PsbTimeoutMsg *</type>
      <name>timeoutMsg</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>handler</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RSVP::ResvStateBlock_t</name>
    <filename>struct_r_s_v_p_1_1_resv_state_block__t.html</filename>
    <member kind="variable">
      <type>SessionObj_t</type>
      <name>Session_Object</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>Next_Hop_Address</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>OI</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FlowDescriptorVector</type>
      <name>FlowDescriptor</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>inLabelVector</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FlowSpecObj_t</type>
      <name>Flowspec_Object</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RsbRefreshTimerMsg *</type>
      <name>refreshTimerMsg</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RsbCommitTimerMsg *</type>
      <name>commitTimerMsg</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RsbTimeoutMsg *</type>
      <name>timeoutMsg</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RSVP::traffic_path_t</name>
    <filename>struct_r_s_v_p_1_1traffic__path__t.html</filename>
    <member kind="variable">
      <type>SenderTemplateObj_t</type>
      <name>sender</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SenderTspecObj_t</type>
      <name>tspec</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EroVector</type>
      <name>ERO</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_delay</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>owner</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>permanent</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>color</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RSVP::traffic_session_t</name>
    <filename>struct_r_s_v_p_1_1traffic__session__t.html</filename>
    <member kind="variable">
      <type>SessionObj_t</type>
      <name>sobj</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; traffic_path_t &gt;</type>
      <name>paths</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPAccess</name>
    <filename>class_r_s_v_p_access.html</filename>
    <base>ModuleAccess&lt; RSVP &gt;</base>
    <member kind="function">
      <type></type>
      <name>RSVPAccess</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPHelloMsg</name>
    <filename>class_r_s_v_p_hello_msg.html</filename>
    <base>RSVPHelloMsg_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPHelloMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=RSVP_TRAFFIC)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPHelloMsg</name>
      <anchor>a1</anchor>
      <arglist>(const RSVPHelloMsg &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPHelloMsg &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const RSVPHelloMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPHelloMsg_Base</name>
    <filename>class_r_s_v_p_hello_msg___base.html</filename>
    <base>RSVPMessage</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPHelloMsg_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRequest</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequest</name>
      <anchor>a5</anchor>
      <arglist>(bool request_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAck</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAck</name>
      <anchor>a7</anchor>
      <arglist>(bool ack_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSrcInstance</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcInstance</name>
      <anchor>a9</anchor>
      <arglist>(int srcInstance_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDstInstance</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDstInstance</name>
      <anchor>a11</anchor>
      <arglist>(int dstInstance_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchor>a13</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RSVPHelloMsg_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPHelloMsg_Base</name>
      <anchor>b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPHelloMsg_Base</name>
      <anchor>b2</anchor>
      <arglist>(const RSVPHelloMsg_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPHelloMsg_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const RSVPHelloMsg_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>request_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ack_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>srcInstance_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dstInstance_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RsvpHopObj_t</name>
    <filename>struct_rsvp_hop_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>RsvpHopObj_t</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>Next_Hop_Address</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>Logical_Interface_Handle</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPMessage</name>
    <filename>class_r_s_v_p_message.html</filename>
    <member kind="function">
      <type></type>
      <name>RSVPMessage</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPMessage</name>
      <anchor>a1</anchor>
      <arglist>(const RSVPMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPMessage</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RSVPMessage &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RSVPMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchor>a8</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RSVPMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPacket</name>
    <filename>class_r_s_v_p_packet.html</filename>
    <base>RSVPPacket_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPPacket</name>
      <anchor>a1</anchor>
      <arglist>(const RSVPPacket &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPPacket &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const RSVPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getDestAddress</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTunnelId</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getExTunnelId</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSetupPri</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHoldingPri</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSession</name>
      <anchor>a9</anchor>
      <arglist>(SessionObj_t *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPacket_Base</name>
    <filename>class_r_s_v_p_packet___base.html</filename>
    <base>RSVPMessage</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPPacket_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SessionObj_t &amp;</type>
      <name>getSession</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SessionObj_t &amp;</type>
      <name>getSession</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSession</name>
      <anchor>a6</anchor>
      <arglist>(const SessionObj_t &amp;session_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getChecksumValid</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChecksumValid</name>
      <anchor>a8</anchor>
      <arglist>(bool checksumValid_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RSVPPacket_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPacket_Base</name>
      <anchor>b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPacket_Base</name>
      <anchor>b2</anchor>
      <arglist>(const RSVPPacket_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPPacket_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const RSVPPacket_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SessionObj_t</type>
      <name>session_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>checksumValid_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathError</name>
    <filename>class_r_s_v_p_path_error.html</filename>
    <base>RSVPPathError_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPPathError</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=PERROR_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPPathError</name>
      <anchor>a1</anchor>
      <arglist>(const RSVPPathError &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPPathError &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const RSVPPathError &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getSrcAddress</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLspId</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBW</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SenderTemplateObj_t &amp;</type>
      <name>getSenderTemplate</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenderTemplate</name>
      <anchor>a8</anchor>
      <arglist>(const SenderTemplateObj_t &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SenderTspecObj_t &amp;</type>
      <name>getSenderTspec</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenderTspec</name>
      <anchor>a10</anchor>
      <arglist>(const SenderTspecObj_t &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathError_Base</name>
    <filename>class_r_s_v_p_path_error___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPPathError_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getErrorNode</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getErrorNode</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorNode</name>
      <anchor>a6</anchor>
      <arglist>(const IPAddress &amp;errorNode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCode</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorCode</name>
      <anchor>a8</anchor>
      <arglist>(int errorCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderDescriptor_t &amp;</type>
      <name>getSender_descriptor</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SenderDescriptor_t &amp;</type>
      <name>getSender_descriptor</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSender_descriptor</name>
      <anchor>a11</anchor>
      <arglist>(const SenderDescriptor_t &amp;sender_descriptor_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchor>a13</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RSVPPathError_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathError_Base</name>
      <anchor>b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathError_Base</name>
      <anchor>b2</anchor>
      <arglist>(const RSVPPathError_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPPathError_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const RSVPPathError_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>errorNode_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>errorCode_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SenderDescriptor_t</type>
      <name>sender_descriptor_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathMsg</name>
    <filename>class_r_s_v_p_path_msg.html</filename>
    <base>RSVPPathMsg_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPPathMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=PATH_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPPathMsg</name>
      <anchor>a1</anchor>
      <arglist>(const RSVPPathMsg &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPPathMsg &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const RSVPPathMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getSrcAddress</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLspId</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNHOP</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getLIH</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBW</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SenderTemplateObj_t &amp;</type>
      <name>getSenderTemplate</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenderTemplate</name>
      <anchor>a10</anchor>
      <arglist>(const SenderTemplateObj_t &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SenderTspecObj_t &amp;</type>
      <name>getSenderTspec</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenderTspec</name>
      <anchor>a12</anchor>
      <arglist>(const SenderTspecObj_t &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathMsg_Base</name>
    <filename>class_r_s_v_p_path_msg___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPPathMsg_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHop</name>
      <anchor>a6</anchor>
      <arglist>(const RsvpHopObj_t &amp;hop_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LabelRequestObj_t &amp;</type>
      <name>getLabel_request</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LabelRequestObj_t &amp;</type>
      <name>getLabel_request</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLabel_request</name>
      <anchor>a9</anchor>
      <arglist>(const LabelRequestObj_t &amp;label_request_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderDescriptor_t &amp;</type>
      <name>getSender_descriptor</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SenderDescriptor_t &amp;</type>
      <name>getSender_descriptor</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSender_descriptor</name>
      <anchor>a12</anchor>
      <arglist>(const SenderDescriptor_t &amp;sender_descriptor_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EroVector &amp;</type>
      <name>getERO</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const EroVector &amp;</type>
      <name>getERO</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setERO</name>
      <anchor>a15</anchor>
      <arglist>(const EroVector &amp;ERO_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getColor</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchor>a17</anchor>
      <arglist>(int color_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchor>a19</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RSVPPathMsg_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathMsg_Base</name>
      <anchor>b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathMsg_Base</name>
      <anchor>b2</anchor>
      <arglist>(const RSVPPathMsg_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPPathMsg_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const RSVPPathMsg_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RsvpHopObj_t</type>
      <name>hop_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LabelRequestObj_t</type>
      <name>label_request_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SenderDescriptor_t</type>
      <name>sender_descriptor_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EroVector</type>
      <name>ERO_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>color_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathTear</name>
    <filename>class_r_s_v_p_path_tear.html</filename>
    <base>RSVPPathTear_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPPathTear</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=PTEAR_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPPathTear</name>
      <anchor>a1</anchor>
      <arglist>(const RSVPPathTear &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPPathTear &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const RSVPPathTear &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNHOP</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getLIH</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getSrcAddress</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLspId</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPPathTear_Base</name>
    <filename>class_r_s_v_p_path_tear___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPPathTear_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHop</name>
      <anchor>a6</anchor>
      <arglist>(const RsvpHopObj_t &amp;hop_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderTemplateObj_t &amp;</type>
      <name>getSenderTemplate</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SenderTemplateObj_t &amp;</type>
      <name>getSenderTemplate</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderTemplate</name>
      <anchor>a9</anchor>
      <arglist>(const SenderTemplateObj_t &amp;senderTemplate_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getForce</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setForce</name>
      <anchor>a11</anchor>
      <arglist>(bool force_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchor>a13</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RSVPPathTear_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathTear_Base</name>
      <anchor>b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPPathTear_Base</name>
      <anchor>b2</anchor>
      <arglist>(const RSVPPathTear_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPPathTear_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const RSVPPathTear_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RsvpHopObj_t</type>
      <name>hop_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SenderTemplateObj_t</type>
      <name>senderTemplate_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>force_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvError</name>
    <filename>class_r_s_v_p_resv_error.html</filename>
    <base>RSVPResvError_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPResvError</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=RERROR_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPResvError</name>
      <anchor>a1</anchor>
      <arglist>(const RSVPResvError &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPResvError &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const RSVPResvError &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNHOP</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getLIH</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvError_Base</name>
    <filename>class_r_s_v_p_resv_error___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPResvError_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHop</name>
      <anchor>a6</anchor>
      <arglist>(const RsvpHopObj_t &amp;hop_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPAddress &amp;</type>
      <name>getErrorNode</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPAddress &amp;</type>
      <name>getErrorNode</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorNode</name>
      <anchor>a9</anchor>
      <arglist>(const IPAddress &amp;errorNode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCode</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorCode</name>
      <anchor>a11</anchor>
      <arglist>(int errorCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchor>a13</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RSVPResvError_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvError_Base</name>
      <anchor>b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvError_Base</name>
      <anchor>b2</anchor>
      <arglist>(const RSVPResvError_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPResvError_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const RSVPResvError_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RsvpHopObj_t</type>
      <name>hop_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPAddress</type>
      <name>errorNode_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>errorCode_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvMsg</name>
    <filename>class_r_s_v_p_resv_msg.html</filename>
    <base>RSVPResvMsg_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPResvMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=RESV_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPResvMsg</name>
      <anchor>a1</anchor>
      <arglist>(const RSVPResvMsg &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPResvMsg &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const RSVPResvMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNHOP</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getLIH</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvMsg_Base</name>
    <filename>class_r_s_v_p_resv_msg___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPResvMsg_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHop</name>
      <anchor>a6</anchor>
      <arglist>(const RsvpHopObj_t &amp;hop_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FlowDescriptorVector &amp;</type>
      <name>getFlowDescriptor</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FlowDescriptorVector &amp;</type>
      <name>getFlowDescriptor</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlowDescriptor</name>
      <anchor>a9</anchor>
      <arglist>(const FlowDescriptorVector &amp;flowDescriptor_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchor>a11</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RSVPResvMsg_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvMsg_Base</name>
      <anchor>b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvMsg_Base</name>
      <anchor>b2</anchor>
      <arglist>(const RSVPResvMsg_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPResvMsg_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const RSVPResvMsg_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RsvpHopObj_t</type>
      <name>hop_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FlowDescriptorVector</type>
      <name>flowDescriptor_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvTear</name>
    <filename>class_r_s_v_p_resv_tear.html</filename>
    <base>RSVPResvTear_Base</base>
    <member kind="function">
      <type></type>
      <name>RSVPResvTear</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=RTEAR_MESSAGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSVPResvTear</name>
      <anchor>a1</anchor>
      <arglist>(const RSVPResvTear &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSVPResvTear &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const RSVPResvTear &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getNHOP</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>getLIH</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSVPResvTear_Base</name>
    <filename>class_r_s_v_p_resv_tear___base.html</filename>
    <base>RSVPPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSVPResvTear_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RsvpHopObj_t &amp;</type>
      <name>getHop</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHop</name>
      <anchor>a6</anchor>
      <arglist>(const RsvpHopObj_t &amp;hop_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FlowDescriptorVector &amp;</type>
      <name>getFlowDescriptor</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FlowDescriptorVector &amp;</type>
      <name>getFlowDescriptor</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlowDescriptor</name>
      <anchor>a9</anchor>
      <arglist>(const FlowDescriptorVector &amp;flowDescriptor_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRsvpKind</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRsvpKind</name>
      <anchor>a11</anchor>
      <arglist>(int rsvpKind_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const RSVPResvTear_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvTear_Base</name>
      <anchor>b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RSVPResvTear_Base</name>
      <anchor>b2</anchor>
      <arglist>(const RSVPResvTear_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RSVPResvTear_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const RSVPResvTear_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RsvpHopObj_t</type>
      <name>hop_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FlowDescriptorVector</type>
      <name>flowDescriptor_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rsvpKind_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPByePacket</name>
    <filename>class_r_t_c_p_bye_packet.html</filename>
    <base>RTCPPacket</base>
    <member kind="function">
      <type></type>
      <name>RTCPByePacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPByePacket</name>
      <anchor>a1</anchor>
      <arglist>(const RTCPByePacket &amp;rtcpByePacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPByePacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPByePacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTCPByePacket &amp;rtcpByePacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>ssrc</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchor>a7</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_ssrc</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPCompoundPacket</name>
    <filename>class_r_t_c_p_compound_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>RTCPCompoundPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPCompoundPacket</name>
      <anchor>a1</anchor>
      <arglist>(const RTCPCompoundPacket &amp;rtcpCompoundPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPCompoundPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPCompoundPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTCPCompoundPacket &amp;rtcpCompoundPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addRTCPPacket</name>
      <anchor>a8</anchor>
      <arglist>(RTCPPacket *rtcpPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray *</type>
      <name>rtcpPackets</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cArray *</type>
      <name>_rtcpPackets</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPEndsystemModule</name>
    <filename>class_r_t_c_p_endsystem_module.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromRTP</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromSocketLayer</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeRTCP</name>
      <anchor>b5</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleInitialized</name>
      <anchor>b6</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dataOut</name>
      <anchor>b7</anchor>
      <arglist>(RTPInnerPacket *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dataIn</name>
      <anchor>b8</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>leaveSession</name>
      <anchor>b9</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketRet</name>
      <anchor>b10</anchor>
      <arglist>(SocketInterfacePacket *sifpIn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>connectRet</name>
      <anchor>b11</anchor>
      <arglist>(SocketInterfacePacket *sifpIn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>readRet</name>
      <anchor>b12</anchor>
      <arglist>(SocketInterfacePacket *sifpIn)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>createServerSocket</name>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>createClientSocket</name>
      <anchor>d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>chooseSSRC</name>
      <anchor>d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleInterval</name>
      <anchor>d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>createPacket</name>
      <anchor>d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>processOutgoingRTPPacket</name>
      <anchor>d5</anchor>
      <arglist>(RTPPacket *packet)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>processIncomingRTPPacket</name>
      <anchor>d6</anchor>
      <arglist>(RTPPacket *packet, IN_Addr address, IN_Port port)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>processIncomingRTCPPacket</name>
      <anchor>d7</anchor>
      <arglist>(RTCPCompoundPacket *packet, IN_Addr address, IN_Port port)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual RTPParticipantInfo *</type>
      <name>findParticipantInfo</name>
      <anchor>d8</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateAveragePacketSize</name>
      <anchor>d9</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_mtu</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_bandwidth</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_rtcpPercentage</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Addr</type>
      <name>_destinationAddress</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Port</type>
      <name>_port</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_ssrcChosen</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_leaveSession</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RTPSenderInfo *</type>
      <name>_senderInfo</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cArray *</type>
      <name>_participantInfos</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Filedesc</type>
      <name>_socketFdIn</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Filedesc</type>
      <name>_socketFdOut</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_packetsCalculated</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>_averagePacketSize</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector *</type>
      <name>_rtcpIntervalOutVector</name>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPPacket</name>
    <filename>class_r_t_c_p_packet.html</filename>
    <member kind="enumeration">
      <name>RTCP_PACKET_TYPE</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTCP_PT_UNDEF</name>
      <anchor>w5w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTCP_PT_SR</name>
      <anchor>w5w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTCP_PT_RR</name>
      <anchor>w5w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTCP_PT_SDES</name>
      <anchor>w5w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTCP_PT_BYE</name>
      <anchor>w5w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPPacket</name>
      <anchor>a1</anchor>
      <arglist>(const RTCPPacket &amp;rtcpPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTCPPacket &amp;rtcpPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>version</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>padding</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>count</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTCP_PACKET_TYPE</type>
      <name>packetType</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rtcpLength</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_version</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_padding</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_count</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RTCP_PACKET_TYPE</type>
      <name>_packetType</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPReceiverReportPacket</name>
    <filename>class_r_t_c_p_receiver_report_packet.html</filename>
    <base>RTCPPacket</base>
    <member kind="function">
      <type></type>
      <name>RTCPReceiverReportPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPReceiverReportPacket</name>
      <anchor>a1</anchor>
      <arglist>(const RTCPReceiverReportPacket &amp;rtcpReceiverReportPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPReceiverReportPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPReceiverReportPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTCPReceiverReportPacket &amp;rtcpReceiverReportPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>ssrc</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchor>a9</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addReceptionReport</name>
      <anchor>a10</anchor>
      <arglist>(ReceptionReport *report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray *</type>
      <name>receptionReports</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_ssrc</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cArray *</type>
      <name>_receptionReports</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPSDESPacket</name>
    <filename>class_r_t_c_p_s_d_e_s_packet.html</filename>
    <base>RTCPPacket</base>
    <member kind="function">
      <type></type>
      <name>RTCPSDESPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPSDESPacket</name>
      <anchor>a1</anchor>
      <arglist>(const RTCPSDESPacket &amp;rtcpSDESPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPSDESPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPSDESPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTCPSDESPacket &amp;rtcpSDESPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray *</type>
      <name>sdesChunks</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSDESChunk</name>
      <anchor>a9</anchor>
      <arglist>(SDESChunk *sdesChunk)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cArray *</type>
      <name>_sdesChunks</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTCPSenderReportPacket</name>
    <filename>class_r_t_c_p_sender_report_packet.html</filename>
    <base>RTCPReceiverReportPacket</base>
    <member kind="function">
      <type></type>
      <name>RTCPSenderReportPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTCPSenderReportPacket</name>
      <anchor>a1</anchor>
      <arglist>(const RTCPSenderReportPacket &amp;rtcpSenderReportPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTCPSenderReportPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTCPSenderReportPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTCPSenderReportPacket &amp;rtcpSenderReportPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderReport *</type>
      <name>senderReport</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderReport</name>
      <anchor>a9</anchor>
      <arglist>(SenderReport *senderReport)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SenderReport *</type>
      <name>_senderReport</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPApplication</name>
    <filename>class_r_t_p_application.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>RTPApplication</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_commonName</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_profileName</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_bandwidth</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Addr</type>
      <name>_destinationAddress</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Port</type>
      <name>_port</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_fileName</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_payloadType</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>_sessionEnterDelay</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>_transmissionStartDelay</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>_transmissionStopDelay</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>_sessionLeaveDelay</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPAVProfile</name>
    <filename>class_r_t_p_a_v_profile.html</filename>
    <base>RTPProfile</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPAVProfilePayload10Receiver</name>
    <filename>class_r_t_p_a_v_profile_payload10_receiver.html</filename>
    <base>RTPAVProfileSampleBasedAudioReceiver</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>insertSilence</name>
      <anchor>b1</anchor>
      <arglist>(simtime_t duration)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPAVProfilePayload10Sender</name>
    <filename>class_r_t_p_a_v_profile_payload10_sender.html</filename>
    <base>RTPAVProfileSampleBasedAudioSender</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPAVProfilePayload32Receiver</name>
    <filename>class_r_t_p_a_v_profile_payload32_receiver.html</filename>
    <base>RTPPayloadReceiver</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPAVProfilePayload32Receiver</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchor>b2</anchor>
      <arglist>(RTPPacket *packet)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cQueue *</type>
      <name>_queue</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_lowestAllowedTimeStamp</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPAVProfilePayload32Sender</name>
    <filename>class_r_t_p_a_v_profile_payload32_sender.html</filename>
    <base>RTPPayloadSender</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeSenderModule</name>
      <anchor>b1</anchor>
      <arglist>(RTPInnerPacket *rinpIn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendPacket</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_initialDelay</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_framesPerSecond</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_frameNumber</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPAVProfileSampleBasedAudioReceiver</name>
    <filename>class_r_t_p_a_v_profile_sample_based_audio_receiver.html</filename>
    <base>RTPPayloadReceiver</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchor>b0</anchor>
      <arglist>(RTPPacket *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>openOutputFile</name>
      <anchor>b1</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>closeOutputFile</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>insertSilence</name>
      <anchor>b3</anchor>
      <arglist>(simtime_t duration)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AFfilehandle</type>
      <name>_audioFile</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AFfilesetup</type>
      <name>_fileSetup</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_samplingRate</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_sampleWidth</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_numberOfChannels</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Module_Class_Members</name>
      <anchor>d0</anchor>
      <arglist>(RTPAVProfileSampleBasedAudioReceiver, RTPPayloadReceiver, 0) virtual ~RTPAVProfileSampleBasedAudioReceiver()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPAVProfileSampleBasedAudioSender</name>
    <filename>class_r_t_p_a_v_profile_sample_based_audio_sender.html</filename>
    <base>RTPPayloadSender</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeSenderModule</name>
      <anchor>b0</anchor>
      <arglist>(RTPInnerPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>openSourceFile</name>
      <anchor>b1</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>closeSourceFile</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>play</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>seekTime</name>
      <anchor>b5</anchor>
      <arglist>(simtime_t moment)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>seekByte</name>
      <anchor>b6</anchor>
      <arglist>(int position)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendPacket</name>
      <anchor>b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AFfilehandle</type>
      <name>_audioFile</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>_startTime</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_samplingRate</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_sampleWidth</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_numberOfChannels</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPEndsystemModule</name>
    <filename>class_r_t_p_endsystem_module.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromApp</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromProfile</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromRTCP</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromSocketLayer</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>enterSession</name>
      <anchor>b6</anchor>
      <arglist>(RTPInterfacePacket *rifp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>leaveSession</name>
      <anchor>b7</anchor>
      <arglist>(RTPInterfacePacket *rifp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createSenderModule</name>
      <anchor>b8</anchor>
      <arglist>(RTPInterfacePacket *rifp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteSenderModule</name>
      <anchor>b9</anchor>
      <arglist>(RTPInterfacePacket *rifp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleControl</name>
      <anchor>b10</anchor>
      <arglist>(RTPInterfacePacket *rifp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>profileInitialized</name>
      <anchor>b11</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleCreated</name>
      <anchor>b12</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleDeleted</name>
      <anchor>b13</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleInitialized</name>
      <anchor>b14</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleStatus</name>
      <anchor>b15</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dataOut</name>
      <anchor>b16</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rtcpInitialized</name>
      <anchor>b17</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sessionLeft</name>
      <anchor>b18</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>createProfile</name>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>createServerSocket</name>
      <anchor>d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>createClientSocket</name>
      <anchor>d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>socketRet</name>
      <anchor>d3</anchor>
      <arglist>(SocketInterfacePacket *sifp)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>connectRet</name>
      <anchor>d4</anchor>
      <arglist>(SocketInterfacePacket *sifp)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>readRet</name>
      <anchor>d5</anchor>
      <arglist>(SocketInterfacePacket *sifp)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeProfile</name>
      <anchor>d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeRTCP</name>
      <anchor>d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>resolveMTU</name>
      <anchor>d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_commonName</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_profileName</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_bandwidth</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Addr</type>
      <name>_destinationAddress</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Port</type>
      <name>_port</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_mtu</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_rtcpPercentage</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Filedesc</type>
      <name>_socketFdIn</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Filedesc</type>
      <name>_socketFdOut</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPInnerPacket</name>
    <filename>class_r_t_p_inner_packet.html</filename>
    <member kind="enumeration">
      <name>RTP_INP_TYPE</name>
      <anchor>w17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_UNDEF</name>
      <anchor>w17w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_INITIALIZE_PROFILE</name>
      <anchor>w17w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_PROFILE_INITIALIZED</name>
      <anchor>w17w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_INITIALIZE_RTCP</name>
      <anchor>w17w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_RTCP_INITIALIZED</name>
      <anchor>w17w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_CREATE_SENDER_MODULE</name>
      <anchor>w17w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SENDER_MODULE_CREATED</name>
      <anchor>w17w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_DELETE_SENDER_MODULE</name>
      <anchor>w17w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SENDER_MODULE_DELETED</name>
      <anchor>w17w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_INITIALIZE_SENDER_MODULE</name>
      <anchor>w17w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SENDER_MODULE_INITIALIZED</name>
      <anchor>w17w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SENDER_MODULE_CONTROL</name>
      <anchor>w17w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SENDER_MODULE_STATUS</name>
      <anchor>w17w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_LEAVE_SESSION</name>
      <anchor>w17w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_SESSION_LEFT</name>
      <anchor>w17w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_DATA_OUT</name>
      <anchor>w17w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_INP_DATA_IN</name>
      <anchor>w17w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPInnerPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPInnerPacket</name>
      <anchor>a1</anchor>
      <arglist>(const RTPInnerPacket &amp;rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPInnerPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPInnerPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTPInnerPacket &amp;rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeProfile</name>
      <anchor>a8</anchor>
      <arglist>(int mtu)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>profileInitialized</name>
      <anchor>a9</anchor>
      <arglist>(int rtcpPercentage, IN_Port port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeRTCP</name>
      <anchor>a10</anchor>
      <arglist>(const char *commonName, int mtu, int bandwidth, int rtcpPercentage, IN_Addr address, IN_Port port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rtcpInitialized</name>
      <anchor>a11</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createSenderModule</name>
      <anchor>a12</anchor>
      <arglist>(u_int32 ssrc, int payloadType, const char *fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleCreated</name>
      <anchor>a13</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteSenderModule</name>
      <anchor>a14</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleDeleted</name>
      <anchor>a15</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeSenderModule</name>
      <anchor>a16</anchor>
      <arglist>(u_int32 ssrc, const char *fileName, int mtu)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleInitialized</name>
      <anchor>a17</anchor>
      <arglist>(u_int32 ssrc, int payloadType, int clockRate, int timeStampBase, int sequenceNumberBase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleControl</name>
      <anchor>a18</anchor>
      <arglist>(u_int32 ssrc, RTPSenderControlMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleStatus</name>
      <anchor>a19</anchor>
      <arglist>(u_int32 ssrc, RTPSenderStatusMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>leaveSession</name>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sessionLeft</name>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataOut</name>
      <anchor>a22</anchor>
      <arglist>(RTPPacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataIn</name>
      <anchor>a23</anchor>
      <arglist>(RTPPacket *packet, IN_Addr address, IN_Port port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTP_INP_TYPE</type>
      <name>type</name>
      <anchor>a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>commonName</name>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mtu</name>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bandwidth</name>
      <anchor>a27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>rtcpPercentage</name>
      <anchor>a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IN_Addr</type>
      <name>address</name>
      <anchor>a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IN_Port</type>
      <name>port</name>
      <anchor>a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>ssrc</name>
      <anchor>a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>payloadType</name>
      <anchor>a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>fileName</name>
      <anchor>a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>clockRate</name>
      <anchor>a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>timeStampBase</name>
      <anchor>a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sequenceNumberBase</name>
      <anchor>a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RTP_INP_TYPE</type>
      <name>_type</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_commonName</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_mtu</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_bandwidth</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_rtcpPercentage</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Addr</type>
      <name>_address</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Port</type>
      <name>_port</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_ssrc</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_payloadType</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_fileName</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_clockRate</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_timeStampBase</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_sequenceNumberBase</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPInterfacePacket</name>
    <filename>class_r_t_p_interface_packet.html</filename>
    <member kind="enumeration">
      <name>RTP_IFP_TYPE</name>
      <anchor>w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_UNDEF</name>
      <anchor>w11w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_ENTER_SESSION</name>
      <anchor>w11w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SESSION_ENTERED</name>
      <anchor>w11w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_CREATE_SENDER_MODULE</name>
      <anchor>w11w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SENDER_MODULE_CREATED</name>
      <anchor>w11w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_DELETE_SENDER_MODULE</name>
      <anchor>w11w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SENDER_MODULE_DELETED</name>
      <anchor>w11w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SENDER_CONTROL</name>
      <anchor>w11w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SENDER_STATUS</name>
      <anchor>w11w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_LEAVE_SESSION</name>
      <anchor>w11w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTP_IFP_SESSION_LEFT</name>
      <anchor>w11w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPInterfacePacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPInterfacePacket</name>
      <anchor>a1</anchor>
      <arglist>(const RTPInterfacePacket &amp;rifp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPInterfacePacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPInterfacePacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTPInterfacePacket &amp;rifp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enterSession</name>
      <anchor>a8</anchor>
      <arglist>(const char *commonName, const char *profileName, int bandwidth, IN_Addr destinationAddress, IN_Port port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sessionEntered</name>
      <anchor>a9</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createSenderModule</name>
      <anchor>a10</anchor>
      <arglist>(u_int32 ssrc, int payloadType, const char *fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleCreated</name>
      <anchor>a11</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteSenderModule</name>
      <anchor>a12</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleDeleted</name>
      <anchor>a13</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleControl</name>
      <anchor>a14</anchor>
      <arglist>(u_int32 ssrc, RTPSenderControlMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleStatus</name>
      <anchor>a15</anchor>
      <arglist>(u_int32 ssrc, RTPSenderStatusMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>leaveSession</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sessionLeft</name>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTP_IFP_TYPE</type>
      <name>type</name>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>commonName</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>profileName</name>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bandwidth</name>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IN_Addr</type>
      <name>destinationAddress</name>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IN_Port</type>
      <name>port</name>
      <anchor>a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>ssrc</name>
      <anchor>a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>payloadType</name>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>fileName</name>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RTP_IFP_TYPE</type>
      <name>_type</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_commonName</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_profileName</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_bandwidth</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Addr</type>
      <name>_destinationAddress</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Port</type>
      <name>_port</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_ssrc</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_payloadType</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_fileName</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPMpegPacket</name>
    <filename>class_r_t_p_mpeg_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPMpegPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPMpegPacket</name>
      <anchor>a1</anchor>
      <arglist>(const RTPMpegPacket &amp;packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPMpegPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPMpegPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTPMpegPacket &amp;packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>payloadLength</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>pictureType</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPictureType</name>
      <anchor>a8</anchor>
      <arglist>(int pictureType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>headerLength</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_mzb</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_two</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_temporalReference</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_activeN</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_newPictureHeader</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_sequenceHeaderPresent</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_beginningOfSlice</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_endOfSlice</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_pictureType</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_fbv</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_bfc</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_ffv</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_ffc</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPPacket</name>
    <filename>class_r_t_p_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPPacket</name>
      <anchor>a1</anchor>
      <arglist>(const RTPPacket &amp;packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTPPacket &amp;packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>marker</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMarker</name>
      <anchor>a9</anchor>
      <arglist>(int marker)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>payloadType</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPayloadType</name>
      <anchor>a11</anchor>
      <arglist>(int payloadType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int16</type>
      <name>sequenceNumber</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNumber</name>
      <anchor>a13</anchor>
      <arglist>(u_int16 sequenceNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>timeStamp</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeStamp</name>
      <anchor>a15</anchor>
      <arglist>(u_int32 timeStamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>ssrc</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchor>a17</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>headerLength</name>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>payloadLength</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>fixedHeaderLength</name>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareFunction</name>
      <anchor>e1</anchor>
      <arglist>(cObject *packet1, cObject *packet2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_version</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_padding</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_extension</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_csrcCount</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_marker</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_payloadType</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int16</type>
      <name>_sequenceNumber</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_timeStamp</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_ssrc</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPParticipantInfo</name>
    <filename>class_r_t_p_participant_info.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPParticipantInfo</name>
      <anchor>a0</anchor>
      <arglist>(u_int32 ssrc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPParticipantInfo</name>
      <anchor>a1</anchor>
      <arglist>(const RTPParticipantInfo &amp;participantInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPParticipantInfo</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPParticipantInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTPParticipantInfo &amp;participantInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processRTPPacket</name>
      <anchor>a6</anchor>
      <arglist>(RTPPacket *packet, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processSenderReport</name>
      <anchor>a7</anchor>
      <arglist>(SenderReport *report, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processReceptionReport</name>
      <anchor>a8</anchor>
      <arglist>(ReceptionReport *report, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processSDESChunk</name>
      <anchor>a9</anchor>
      <arglist>(SDESChunk *sdesChunk, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SDESChunk *</type>
      <name>sdesChunk</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSDESItem</name>
      <anchor>a11</anchor>
      <arglist>(SDESItem *sdesItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ReceptionReport *</type>
      <name>receptionReport</name>
      <anchor>a12</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderReport *</type>
      <name>senderReport</name>
      <anchor>a13</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextInterval</name>
      <anchor>a14</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>toBeDeleted</name>
      <anchor>a15</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSender</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>ssrc</name>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchor>a18</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IN_Addr</type>
      <name>address</name>
      <anchor>a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchor>a20</anchor>
      <arglist>(IN_Addr address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IN_Port</type>
      <name>rtpPort</name>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRTPPort</name>
      <anchor>a22</anchor>
      <arglist>(IN_Port rtpPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IN_Port</type>
      <name>rtcpPort</name>
      <anchor>a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRTCPPort</name>
      <anchor>a24</anchor>
      <arglist>(IN_Port rtpPort)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>ssrcToName</name>
      <anchor>e0</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addSDESItem</name>
      <anchor>b0</anchor>
      <arglist>(SDESItem::SDES_ITEM_TYPE type, const char *content)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SDESChunk *</type>
      <name>_sdesChunk</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IN_Addr</type>
      <name>_address</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IN_Port</type>
      <name>_rtpPort</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IN_Port</type>
      <name>_rtcpPort</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_silentIntervals</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPPayloadReceiver</name>
    <filename>class_r_t_p_payload_receiver.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPPayloadReceiver</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchor>b3</anchor>
      <arglist>(RTPPacket *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>openOutputFile</name>
      <anchor>b4</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>closeOutputFile</name>
      <anchor>b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ofstream</type>
      <name>_outputFileStream</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_payloadType</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>_packetArrival</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPPayloadSender</name>
    <filename>class_r_t_p_payload_sender.html</filename>
    <member kind="enumeration">
      <name>SenderStatus</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STOPPED</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLAYING</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPPayloadSender</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPPayloadSender</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeSenderModule</name>
      <anchor>b0</anchor>
      <arglist>(RTPInnerPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>openSourceFile</name>
      <anchor>b1</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>closeSourceFile</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>play</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>playUntilTime</name>
      <anchor>b4</anchor>
      <arglist>(simtime_t moment)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>playUntilByte</name>
      <anchor>b5</anchor>
      <arglist>(int position)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pause</name>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>seekTime</name>
      <anchor>b7</anchor>
      <arglist>(simtime_t moment)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>seekByte</name>
      <anchor>b8</anchor>
      <arglist>(int position)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchor>b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>endOfFile</name>
      <anchor>b10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendPacket</name>
      <anchor>b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ifstream</type>
      <name>_inputFileStream</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_mtu</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_ssrc</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_payloadType</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_clockRate</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_timeStampBase</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_timeStamp</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int16</type>
      <name>_sequenceNumberBase</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int16</type>
      <name>_sequenceNumber</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SenderStatus</type>
      <name>_status</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>_reminderMessage</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPProfile</name>
    <filename>class_r_t_p_profile.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>a1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromRTP</name>
      <anchor>a2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromPayloadSender</name>
      <anchor>a3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessageFromPayloadReceiver</name>
      <anchor>a4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeProfile</name>
      <anchor>a5</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createSenderModule</name>
      <anchor>a6</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteSenderModule</name>
      <anchor>a7</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleControl</name>
      <anchor>a8</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataIn</name>
      <anchor>a9</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleInitialized</name>
      <anchor>a10</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>senderModuleStatus</name>
      <anchor>a11</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataOut</name>
      <anchor>a12</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processIncomingPacket</name>
      <anchor>a13</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processOutgoingPacket</name>
      <anchor>a14</anchor>
      <arglist>(RTPInnerPacket *rinp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTPSSRCGate *</type>
      <name>findSSRCGate</name>
      <anchor>a15</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RTPSSRCGate *</type>
      <name>newSSRCGate</name>
      <anchor>a16</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>_profileName</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_maxReceivers</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cArray *</type>
      <name>_ssrcGates</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_rtcpPercentage</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IN_Port</type>
      <name>_preferredPort</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_mtu</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_autoOutputFileNames</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPReceiverInfo</name>
    <filename>class_r_t_p_receiver_info.html</filename>
    <base>RTPParticipantInfo</base>
    <member kind="function">
      <type></type>
      <name>RTPReceiverInfo</name>
      <anchor>a0</anchor>
      <arglist>(u_int32 ssrc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPReceiverInfo</name>
      <anchor>a1</anchor>
      <arglist>(const RTPReceiverInfo &amp;receiverInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPReceiverInfo</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPReceiverInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTPReceiverInfo &amp;receiverInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processRTPPacket</name>
      <anchor>a6</anchor>
      <arglist>(RTPPacket *packet, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processSenderReport</name>
      <anchor>a7</anchor>
      <arglist>(SenderReport *report, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processSDESChunk</name>
      <anchor>a8</anchor>
      <arglist>(SDESChunk *sdesChunk, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ReceptionReport *</type>
      <name>receptionReport</name>
      <anchor>a9</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextInterval</name>
      <anchor>a10</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>active</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valid</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>toBeDeleted</name>
      <anchor>a13</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int16</type>
      <name>_sequenceNumberBase</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int16</type>
      <name>_highestSequenceNumber</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_highestSequenceNumberPrior</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_sequenceNumberCycles</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_packetsReceived</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_packetsReceivedPrior</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>_jitter</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_clockRate</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_lastSenderReportRTPTimeStamp</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int64</type>
      <name>_lastSenderReportNTPTimeStamp</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_lastPacketRTPTimeStamp</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>_lastPacketArrivalTime</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>_lastSenderReportArrivalTime</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_inactiveIntervals</name>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>_startOfInactivity</name>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_itemsReceived</name>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPSenderControlMessage</name>
    <filename>class_r_t_p_sender_control_message.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPSenderControlMessage</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPSenderControlMessage</name>
      <anchor>a1</anchor>
      <arglist>(const RTPSenderControlMessage &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPSenderControlMessage</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPSenderControlMessage &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTPSenderControlMessage &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>command</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a7</anchor>
      <arglist>(const char *command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a8</anchor>
      <arglist>(const char *command, float commandParameter1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a9</anchor>
      <arglist>(const char *command, float commandParameter1, float commandParameter2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>commandParameter1</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>commandParameter2</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_command</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>_commandParameter1</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>_commandParameter2</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPSenderInfo</name>
    <filename>class_r_t_p_sender_info.html</filename>
    <base>RTPParticipantInfo</base>
    <member kind="function">
      <type></type>
      <name>RTPSenderInfo</name>
      <anchor>a0</anchor>
      <arglist>(u_int32 ssrc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPSenderInfo</name>
      <anchor>a1</anchor>
      <arglist>(const RTPSenderInfo &amp;senderInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPSenderInfo</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPSenderInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTPSenderInfo &amp;senderInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processRTPPacket</name>
      <anchor>a6</anchor>
      <arglist>(RTPPacket *packet, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processReceptionReport</name>
      <anchor>a7</anchor>
      <arglist>(ReceptionReport *report, simtime_t arrivalTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SenderReport *</type>
      <name>senderReport</name>
      <anchor>a8</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartTime</name>
      <anchor>a9</anchor>
      <arglist>(simtime_t startTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClockRate</name>
      <anchor>a10</anchor>
      <arglist>(int clockRate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeStampBase</name>
      <anchor>a11</anchor>
      <arglist>(u_int32 timeStampBase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNumberBase</name>
      <anchor>a12</anchor>
      <arglist>(u_int16 sequenceNumberBase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>toBeDeleted</name>
      <anchor>a13</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>_startTime</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_clockRate</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_timeStampBase</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int16</type>
      <name>_sequenceNumberBase</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_packetsSent</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_bytesSent</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPSenderStatusMessage</name>
    <filename>class_r_t_p_sender_status_message.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPSenderStatusMessage</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPSenderStatusMessage</name>
      <anchor>a1</anchor>
      <arglist>(const RTPSenderStatusMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RTPSenderStatusMessage</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RTPSenderStatusMessage &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const RTPSenderStatusMessage &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>status</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatus</name>
      <anchor>a7</anchor>
      <arglist>(const char *status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeStamp</name>
      <anchor>a8</anchor>
      <arglist>(const u_int32 timestamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const u_int32</type>
      <name>timeStamp</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>_status</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u_int32</type>
      <name>_timeStamp</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTPSSRCGate</name>
    <filename>class_r_t_p_s_s_r_c_gate.html</filename>
    <member kind="function">
      <type></type>
      <name>RTPSSRCGate</name>
      <anchor>a0</anchor>
      <arglist>(u_int ssrc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTPSSRCGate</name>
      <anchor>a1</anchor>
      <arglist>(const RTPSSRCGate &amp;rtpSSRCGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTPSSRCGate</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>ssrc</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchor>a4</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gateId</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGateId</name>
      <anchor>a6</anchor>
      <arglist>(int gateId)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_ssrc</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_gateId</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScenarioManager</name>
    <filename>class_scenario_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>ScenarioManager</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>getRequiredAttribute</name>
      <anchor>b0</anchor>
      <arglist>(cXMLElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>getRequiredModule</name>
      <anchor>b1</anchor>
      <arglist>(cXMLElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>getRequiredGate</name>
      <anchor>b2</anchor>
      <arglist>(cXMLElement *node, const char *modattr, const char *gateattr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processCommand</name>
      <anchor>b3</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processAtCommand</name>
      <anchor>b4</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSetParamCommand</name>
      <anchor>b5</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSetChannelAttrCommand</name>
      <anchor>b6</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processCreateModuleCommand</name>
      <anchor>b7</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processDeleteModuleCommand</name>
      <anchor>b8</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processConnectCommand</name>
      <anchor>b9</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processDisconnectCommand</name>
      <anchor>b10</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processModuleSpecificCommand</name>
      <anchor>b11</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b13</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numChanges</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDone</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SDESChunk</name>
    <filename>class_s_d_e_s_chunk.html</filename>
    <member kind="function">
      <type></type>
      <name>SDESChunk</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, u_int32 ssrc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SDESChunk</name>
      <anchor>a1</anchor>
      <arglist>(const SDESChunk &amp;sdesChunk)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SDESChunk</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SDESChunk &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const SDESChunk &amp;sdesChunk)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSDESItem</name>
      <anchor>a8</anchor>
      <arglist>(SDESItem *item)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>ssrc</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSRC</name>
      <anchor>a10</anchor>
      <arglist>(u_int32 ssrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>length</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_ssrc</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_length</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SDESItem</name>
    <filename>class_s_d_e_s_item.html</filename>
    <member kind="enumeration">
      <name>SDES_ITEM_TYPE</name>
      <anchor>w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_UNDEF</name>
      <anchor>w9w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_CNAME</name>
      <anchor>w9w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_NAME</name>
      <anchor>w9w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_EMAIL</name>
      <anchor>w9w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_PHONE</name>
      <anchor>w9w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_LOC</name>
      <anchor>w9w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_TOOL</name>
      <anchor>w9w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_NOTE</name>
      <anchor>w9w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SDES_PRIV</name>
      <anchor>w9w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SDESItem</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SDESItem</name>
      <anchor>a1</anchor>
      <arglist>(SDES_ITEM_TYPE type, const char *content)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SDESItem</name>
      <anchor>a2</anchor>
      <arglist>(const SDESItem &amp;sdesItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SDESItem</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SDESItem &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const SDESItem &amp;sdesItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a8</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SDES_ITEM_TYPE</type>
      <name>type</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>content</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>length</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SDES_ITEM_TYPE</type>
      <name>_type</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_length</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_content</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SenderDescriptor_t</name>
    <filename>struct_sender_descriptor__t.html</filename>
    <member kind="function">
      <type></type>
      <name>SenderDescriptor_t</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SenderTemplateObj_t</type>
      <name>Sender_Template_Object</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SenderTspecObj_t</type>
      <name>Sender_Tspec_Object</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SenderReport</name>
    <filename>class_sender_report.html</filename>
    <member kind="function">
      <type></type>
      <name>SenderReport</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenderReport</name>
      <anchor>a1</anchor>
      <arglist>(const SenderReport &amp;senderReport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SenderReport</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SenderReport &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const SenderReport &amp;senderReport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int64</type>
      <name>ntpTimeStamp</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNTPTimeStamp</name>
      <anchor>a9</anchor>
      <arglist>(u_int64 ntpTimeStamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>rtpTimeStamp</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRTPTimeStamp</name>
      <anchor>a11</anchor>
      <arglist>(u_int32 timeStamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>packetCount</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketCount</name>
      <anchor>a13</anchor>
      <arglist>(u_int32 packetCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_int32</type>
      <name>byteCount</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteCount</name>
      <anchor>a15</anchor>
      <arglist>(u_int32 byteCount)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int64</type>
      <name>_ntpTimeStamp</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_rtpTimeStamp</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_packetCount</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_int32</type>
      <name>_byteCount</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SenderTemplateObj_t</name>
    <filename>struct_sender_template_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>SenderTemplateObj_t</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>SrcAddress</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Lsp_Id</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SenderTspecObj_t</name>
    <filename>struct_sender_tspec_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>SenderTspecObj_t</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>req_bandwidth</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SessionObj_t</name>
    <filename>struct_session_obj__t.html</filename>
    <member kind="function">
      <type></type>
      <name>SessionObj_t</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Tunnel_Id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Extended_Tunnel_Id</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>DestAddress</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>setupPri</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>holdingPri</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SignallingMsg</name>
    <filename>class_signalling_msg.html</filename>
    <member kind="function">
      <type></type>
      <name>SignallingMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignallingMsg</name>
      <anchor>a1</anchor>
      <arglist>(const SignallingMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SignallingMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignallingMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const SignallingMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchor>a8</anchor>
      <arglist>(int command_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const SignallingMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleClassifier</name>
    <filename>class_simple_classifier.html</filename>
    <base>IScriptable</base>
    <base>IRSVPClassifier</base>
    <member kind="function">
      <type></type>
      <name>SimpleClassifier</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processCommand</name>
      <anchor>b3</anchor>
      <arglist>(const cXMLElement &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>lookupLabel</name>
      <anchor>b4</anchor>
      <arglist>(IPDatagram *ipdatagram, LabelOpVector &amp;outLabel, std::string &amp;outInterface, int &amp;color)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchor>b5</anchor>
      <arglist>(const SessionObj_t &amp;session, const SenderTemplateObj_t &amp;sender, int inLabel)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>readTableFromXML</name>
      <anchor>d0</anchor>
      <arglist>(const cXMLElement *fectable)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>readItemFromXML</name>
      <anchor>d1</anchor>
      <arglist>(const cXMLElement *fec)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; FECEntry &gt;::iterator</type>
      <name>findFEC</name>
      <anchor>d2</anchor>
      <arglist>(int fecid)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxLabel</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; FECEntry &gt;</type>
      <name>bindings</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LIBTable *</type>
      <name>lt</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RSVP *</type>
      <name>rsvp</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">SimpleClassifier::FECEntry</class>
  </compound>
  <compound kind="struct">
    <name>SimpleClassifier::FECEntry</name>
    <filename>struct_simple_classifier_1_1_f_e_c_entry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>src</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>dest</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SessionObj_t</type>
      <name>session</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SenderTemplateObj_t</type>
      <name>sender</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>inLabel</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sink</name>
    <filename>class_sink.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPackets</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numBits</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>throughput</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>packetPerSec</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnrControlInfo</name>
    <filename>class_snr_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>SnrControlInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SnrControlInfo</name>
      <anchor>a1</anchor>
      <arglist>(const SnrControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SnrControlInfo</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SnrControlInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const SnrControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SnrList &amp;</type>
      <name>getSnrList</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SnrList &amp;</type>
      <name>getSnrList</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnrList</name>
      <anchor>a8</anchor>
      <arglist>(const SnrList &amp;snrList_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const SnrControlInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnrList</type>
      <name>snrList_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnrDecider</name>
    <filename>class_snr_decider.html</filename>
    <base>BasicDecider</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>snrOverThreshold</name>
      <anchor>b1</anchor>
      <arglist>(SnrList &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchor>b2</anchor>
      <arglist>(AirFrame *, SnrList &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThresholdLevel</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnrEval</name>
    <filename>class_snr_eval.html</filename>
    <base>BasicSnrEval</base>
    <member kind="function">
      <type></type>
      <name>SnrEval</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeChannel</name>
      <anchor>a1</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitrate</name>
      <anchor>a2</anchor>
      <arglist>(double bitrate)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AirFrame *, double &gt;</type>
      <name>RecvBuff</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSM_OVER</name>
      <anchor>x2x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SnrEval</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchor>b4</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCommand</name>
      <anchor>b6</anchor>
      <arglist>(int msgkind, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchor>b7</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgEnd</name>
      <anchor>b8</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calcRcvdPower</name>
      <anchor>b9</anchor>
      <arglist>(double pSend, double distance)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>channelNumber</name>
      <anchor>b10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addNewSnr</name>
      <anchor>b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnrStruct</type>
      <name>snrInfo</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RecvBuff</type>
      <name>recvBuff</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState</type>
      <name>rs</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>newChannel</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>newBitrate</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>noiseLevel</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>thermalNoise</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathLossAlpha</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">SnrEval::SnrStruct</class>
  </compound>
  <compound kind="struct">
    <name>SnrEval::SnrStruct</name>
    <filename>struct_snr_eval_1_1_snr_struct.html</filename>
    <member kind="variable">
      <type>AirFrame *</type>
      <name>ptr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rcvdPower</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SnrList</type>
      <name>sList</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnrEval80211</name>
    <filename>class_snr_eval80211.html</filename>
    <base>SnrEval</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcDuration</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SnrListEntry</name>
    <filename>struct_snr_list_entry.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>snr</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Socket</name>
    <filename>class_socket.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>Filedesc</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Domain</name>
      <anchor>w19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPSuite_AF_UNIX</name>
      <anchor>w19w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPSuite_AF_INET</name>
      <anchor>w19w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPSuite_AF_UNDEF</name>
      <anchor>w19w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchor>w20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPSuite_SOCK_STREAM</name>
      <anchor>w20w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPSuite_SOCK_DGRAM</name>
      <anchor>w20w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPSuite_SOCK_RAW</name>
      <anchor>w20w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPSuite_SOCK_SEQPACKET</name>
      <anchor>w20w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPSuite_SOCK_UNDEF</name>
      <anchor>w20w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Protocol</name>
      <anchor>w21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP</name>
      <anchor>w21w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCP</name>
      <anchor>w21w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICMP</name>
      <anchor>w21w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IGMP</name>
      <anchor>w21w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTE</name>
      <anchor>w21w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROTO_UNDEF</name>
      <anchor>w21w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ConnectionState</name>
      <anchor>w22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONN_LISTEN</name>
      <anchor>w22w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONN_HALFESTAB</name>
      <anchor>w22w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONN_ESTAB</name>
      <anchor>w22w17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONN_UNDEF</name>
      <anchor>w22w18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Socket</name>
      <anchor>a0</anchor>
      <arglist>(const Socket &amp;socket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Socket</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Socket</name>
      <anchor>a2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Socket</name>
      <anchor>a3</anchor>
      <arglist>(Socket::Domain domain, Socket::Type type, Socket::Protocol proto)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Socket</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>info</name>
      <anchor>a7</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a8</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>Socket &amp;</type>
      <name>operator=</name>
      <anchor>a9</anchor>
      <arglist>(const Socket &amp;socket)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>type</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Protocol</type>
      <name>protocol</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PCB *</type>
      <name>pcb</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPSuite_SO_ACCEPTCONN</name>
      <anchor>a13</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPSuite_SO_BROADCAST</name>
      <anchor>a14</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPSuite_SO_DEBUG</name>
      <anchor>a15</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPSuite_SO_DONTROUTE</name>
      <anchor>a16</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPSuite_SO_KEEPALIVE</name>
      <anchor>a17</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPSuite_SO_OOBINLINE</name>
      <anchor>a18</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPSuite_SO_REUSEADDR</name>
      <anchor>a19</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPSuite_SO_REUSEPORT</name>
      <anchor>a20</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPSuite_SO_USELOOPBACK</name>
      <anchor>a21</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IPSuite_SO_ACCEPTCONN</name>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IPSuite_SO_BROADCAST</name>
      <anchor>a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IPSuite_SO_DEBUG</name>
      <anchor>a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IPSuite_SO_DONTROUTE</name>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IPSuite_SO_KEEPALIVE</name>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IPSuite_SO_OOBINLINE</name>
      <anchor>a27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IPSuite_SO_REUSEADDR</name>
      <anchor>a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IPSuite_SO_REUSEPORT</name>
      <anchor>a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IPSuite_SO_USELOOPBACK</name>
      <anchor>a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSS_CANTRCVMORE</name>
      <anchor>a31</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSS_CANTSENDMORE</name>
      <anchor>a32</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSS_ISCONFIRMING</name>
      <anchor>a33</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSS_ISCONNECTED</name>
      <anchor>a34</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSS_ISCONNECTING</name>
      <anchor>a35</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSS_ISDISCONNECTING</name>
      <anchor>a36</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSS_NOFDREF</name>
      <anchor>a37</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSS_PRIV</name>
      <anchor>a38</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSS_RCVATMARK</name>
      <anchor>a39</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SS_CANTRCVMORE</name>
      <anchor>a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SS_CANTSENDMORE</name>
      <anchor>a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SS_ISCONFIRMING</name>
      <anchor>a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SS_ISCONNECTED</name>
      <anchor>a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SS_ISCONNECTING</name>
      <anchor>a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SS_ISDISCONNECTING</name>
      <anchor>a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SS_NOFDREF</name>
      <anchor>a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SS_PRIV</name>
      <anchor>a47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SS_RCVATMARK</name>
      <anchor>a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnState</name>
      <anchor>a49</anchor>
      <arglist>(enum ConnectionState state)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionState</type>
      <name>connState</name>
      <anchor>a50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPendingAccept</name>
      <anchor>a51</anchor>
      <arglist>(bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pendingAccept</name>
      <anchor>a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullySpecified</name>
      <anchor>a53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>domain_string</name>
      <anchor>s0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>type_string</name>
      <anchor>s1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>protocol_string</name>
      <anchor>s2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>connstate_string</name>
      <anchor>s3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Filedesc</type>
      <name>FILEDESC_UNDEF</name>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>_initOptions</name>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>_initState</name>
      <anchor>d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>_init</name>
      <anchor>d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Domain</type>
      <name>_domain</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Type</type>
      <name>_type</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Protocol</type>
      <name>_proto</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Options</type>
      <name>_options</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::State</type>
      <name>_state</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::ConnectionState</type>
      <name>_connstate</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_pending_accept</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PCB *</type>
      <name>_pcb</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cQueue</type>
      <name>_sockqueue</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">Socket::Options</class>
    <class kind="struct">Socket::State</class>
  </compound>
  <compound kind="struct">
    <name>Socket::Options</name>
    <filename>struct_socket_1_1_options.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>IPSuite_SO_ACCEPTCONN</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>IPSuite_SO_BROADCAST</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>IPSuite_SO_DEBUG</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>IPSuite_SO_DONTROUTE</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>IPSuite_SO_KEEPALIVE</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>IPSuite_SO_OOBINLINE</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>IPSuite_SO_REUSEADDR</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>IPSuite_SO_REUSEPORT</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>IPSuite_SO_USELOOPBACK</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Socket::State</name>
    <filename>struct_socket_1_1_state.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>SS_CANTRCVMORE</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>SS_CANTSENDMORE</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>SS_ISCONFIRMING</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>SS_ISCONNECTED</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>SS_ISCONNECTING</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>SS_ISDISCONNECTING</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>SS_NOFDREF</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>SS_PRIV</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>SS_RCVATMARK</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SocketInterfacePacket</name>
    <filename>class_socket_interface_packet.html</filename>
    <member kind="enumeration">
      <name>SockAction</name>
      <anchor>w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_SOCKET</name>
      <anchor>w15w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_SOCKET_RET</name>
      <anchor>w15w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_BIND</name>
      <anchor>w15w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_LISTEN</name>
      <anchor>w15w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_ACCEPT</name>
      <anchor>w15w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_ACCEPT_RET</name>
      <anchor>w15w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_CONNECT</name>
      <anchor>w15w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_CONNECT_RET</name>
      <anchor>w15w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_WRITE</name>
      <anchor>w15w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_WRITE_RET</name>
      <anchor>w15w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_READ</name>
      <anchor>w15w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_READ_RET</name>
      <anchor>w15w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_SHUTDOWN</name>
      <anchor>w15w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_CLOSE</name>
      <anchor>w15w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SA_UNDEF</name>
      <anchor>w15w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketInterfacePacket</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketInterfacePacket</name>
      <anchor>a1</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketInterfacePacket</name>
      <anchor>a2</anchor>
      <arglist>(const SocketInterfacePacket &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SocketInterfacePacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const SocketInterfacePacket &amp;ip)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SocketInterfacePacket *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>info</name>
      <anchor>a6</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchor>a7</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socket</name>
      <anchor>a8</anchor>
      <arglist>(Socket::Domain domain, Socket::Type type, Socket::Protocol proto)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchor>a9</anchor>
      <arglist>(Socket::Filedesc desc, IN_Addr addr, IN_Port port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listen</name>
      <anchor>a10</anchor>
      <arglist>(Socket::Filedesc desc, int backlog=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept</name>
      <anchor>a11</anchor>
      <arglist>(Socket::Filedesc desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchor>a12</anchor>
      <arglist>(Socket::Filedesc desc, IN_Addr faddr, IN_Port fport)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchor>a13</anchor>
      <arglist>(Socket::Filedesc desc, cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchor>a14</anchor>
      <arglist>(Socket::Filedesc desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchor>a15</anchor>
      <arglist>(Socket::Filedesc desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchor>a16</anchor>
      <arglist>(Socket::Filedesc desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSockPair</name>
      <anchor>a17</anchor>
      <arglist>(const IN_Addr &amp;laddr, IN_Port &amp;lport, const IN_Addr &amp;faddr, IN_Port &amp;fport)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFiledesc</name>
      <anchor>a18</anchor>
      <arglist>(Socket::Filedesc desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socket_ret</name>
      <anchor>a19</anchor>
      <arglist>(Socket::Filedesc desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept_ret</name>
      <anchor>a20</anchor>
      <arglist>(Socket::Filedesc desc, const IN_Addr &amp;fadd, IN_Port &amp;fport)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_ret</name>
      <anchor>a21</anchor>
      <arglist>(Socket::Filedesc desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_ret</name>
      <anchor>a22</anchor>
      <arglist>(Socket::Filedesc desc, cMessage *msg, IN_Addr faddr, IN_Port fport)</arglist>
    </member>
    <member kind="function">
      <type>SockAction</type>
      <name>action</name>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IN_Addr &amp;</type>
      <name>lAddr</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IN_Port &amp;</type>
      <name>lPort</name>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IN_Addr &amp;</type>
      <name>fAddr</name>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IN_Port &amp;</type>
      <name>fPort</name>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Socket::Domain</type>
      <name>domain</name>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Socket::Type</type>
      <name>type</name>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Socket::Protocol</type>
      <name>proto</name>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Socket::Filedesc</type>
      <name>filedesc</name>
      <anchor>a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>_init</name>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>_clear</name>
      <anchor>d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>_check</name>
      <anchor>d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SockAction</type>
      <name>_action</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Addr</type>
      <name>_laddr</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Port</type>
      <name>_lport</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Addr</type>
      <name>_faddr</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IN_Port</type>
      <name>_fport</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Domain</type>
      <name>_domain</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Type</type>
      <name>_type</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Protocol</type>
      <name>_proto</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Socket::Filedesc</type>
      <name>_filedesc</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCP</name>
    <filename>class_t_c_p.html</filename>
    <member kind="function">
      <type></type>
      <name>TCP</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCP</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSockPair</name>
      <anchor>a2</anchor>
      <arglist>(TCPConnection *conn, IPvXAddress localAddr, IPvXAddress remoteAddr, int localPort, int remotePort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSockPair</name>
      <anchor>a3</anchor>
      <arglist>(TCPConnection *conn, IPvXAddress localAddr, IPvXAddress remoteAddr, int localPort, int remotePort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addForkedConnection</name>
      <anchor>a4</anchor>
      <arglist>(TCPConnection *conn, TCPConnection *newConn, IPvXAddress localAddr, IPvXAddress remoteAddr, int localPort, int remotePort)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getEphemeralPort</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>recordStatistics</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>testing</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>logverbose</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AppConnKey, TCPConnection * &gt;</type>
      <name>TcpAppConnMap</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; SockPair, TCPConnection * &gt;</type>
      <name>TcpConnMap</name>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCPConnection *</type>
      <name>findConnForSegment</name>
      <anchor>b0</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress srcAddr, IPvXAddress destAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCPConnection *</type>
      <name>findConnForApp</name>
      <anchor>b1</anchor>
      <arglist>(int appGateIndex, int connId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeConnection</name>
      <anchor>b2</anchor>
      <arglist>(TCPConnection *conn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TcpAppConnMap</type>
      <name>tcpAppConnMap</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TcpConnMap</type>
      <name>tcpConnMap</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>lastEphemeralPort</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multiset&lt; short &gt;</type>
      <name>usedEphemeralPorts</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">TCP::AppConnKey</class>
    <class kind="struct">TCP::SockPair</class>
  </compound>
  <compound kind="struct">
    <name>TCP::AppConnKey</name>
    <filename>struct_t_c_p_1_1_app_conn_key.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a0</anchor>
      <arglist>(const AppConnKey &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>appGateIndex</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>connId</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TCP::SockPair</name>
    <filename>struct_t_c_p_1_1_sock_pair.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchor>a0</anchor>
      <arglist>(const SockPair &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>localPort</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>remotePort</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPAlgorithm</name>
    <filename>class_t_c_p_algorithm.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPAlgorithm</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPAlgorithm</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnection</name>
      <anchor>a2</anchor>
      <arglist>(TCPConnection *_conn)</arglist>
    </member>
    <member kind="function">
      <type>TCPStateVariables *</type>
      <name>stateVariables</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>established</name>
      <anchor>a5</anchor>
      <arglist>(bool active)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionClosed</name>
      <anchor>a6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processTimer</name>
      <anchor>a7</anchor>
      <arglist>(cMessage *timer, TCPEventCode &amp;event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendCommandInvoked</name>
      <anchor>a8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedOutOfOrderSegment</name>
      <anchor>a9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSeqChanged</name>
      <anchor>a10</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchor>a11</anchor>
      <arglist>(uint32 firstSeqAcked)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchor>a12</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receivedAckForDataNotYetSent</name>
      <anchor>a13</anchor>
      <arglist>(uint32 seq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ackSent</name>
      <anchor>a14</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dataSent</name>
      <anchor>a15</anchor>
      <arglist>(uint32 fromseq)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchor>b0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPConnection *</type>
      <name>conn</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPStateVariables *</type>
      <name>state</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPBaseAlg</name>
    <filename>class_t_c_p_base_alg.html</filename>
    <base>TCPAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>TCPBaseAlg</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPBaseAlg</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>established</name>
      <anchor>a3</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionClosed</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processTimer</name>
      <anchor>a5</anchor>
      <arglist>(cMessage *timer, TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendCommandInvoked</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedOutOfOrderSegment</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSeqChanged</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchor>a9</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedAckForDataNotYetSent</name>
      <anchor>a11</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ackSent</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataSent</name>
      <anchor>a13</anchor>
      <arglist>(uint32 fromseq)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startRexmitTimer</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rttMeasurementComplete</name>
      <anchor>b1</anchor>
      <arglist>(simtime_t tSent, simtime_t tAcked)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendData</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cMessage *</type>
      <name>cancelEvent</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchor>z144_0</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPersistTimer</name>
      <anchor>z144_1</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processDelayedAckTimer</name>
      <anchor>z144_2</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processKeepAliveTimer</name>
      <anchor>z144_3</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPBaseAlgStateVariables *&amp;</type>
      <name>state</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>rexmitTimer</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>persistTimer</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayedAckTimer</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>keepAliveTimer</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>cwndVector</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>ssthreshVector</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rttVector</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>srttVector</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rttvarVector</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rtoVector</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPBaseAlgStateVariables</name>
    <filename>class_t_c_p_base_alg_state_variables.html</filename>
    <base>TCPStateVariables</base>
    <member kind="function">
      <type></type>
      <name>TCPBaseAlgStateVariables</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>delayed_acks_enabled</name>
      <anchor>z138_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>nagle_enabled</name>
      <anchor>z138_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rexmit_count</name>
      <anchor>z139_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rexmit_timeout</name>
      <anchor>z139_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>snd_cwnd</name>
      <anchor>z140_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rtseq</name>
      <anchor>z141_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rtseq_sendtime</name>
      <anchor>z141_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>srtt</name>
      <anchor>z142_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rttvar</name>
      <anchor>z142_1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPBasicClientApp</name>
    <filename>class_t_c_p_basic_client_app.html</filename>
    <base>TCPGenericCliAppBase</base>
    <member kind="function">
      <type></type>
      <name>TCPBasicClientApp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPBasicClientApp</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendRequest</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchor>b3</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchor>b4</anchor>
      <arglist>(int connId, void *yourPtr, cMessage *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchor>b5</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchor>b6</anchor>
      <arglist>(int connId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>earlySend</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numRequestsToSend</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPCommand</name>
    <filename>class_t_c_p_command.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPCommand</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPCommand</name>
      <anchor>a1</anchor>
      <arglist>(const TCPCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPCommand</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPCommand &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TCPCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>connId</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnId</name>
      <anchor>a7</anchor>
      <arglist>(int connId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>userId</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUserId</name>
      <anchor>a9</anchor>
      <arglist>(int userId_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const TCPCommand &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>connId_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>userId_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPConnectInfo</name>
    <filename>class_t_c_p_connect_info.html</filename>
    <base>TCPCommand</base>
    <member kind="function">
      <type></type>
      <name>TCPConnectInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPConnectInfo</name>
      <anchor>a1</anchor>
      <arglist>(const TCPConnectInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPConnectInfo</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPConnectInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TCPConnectInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>localAddr</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>localAddr</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalAddr</name>
      <anchor>a8</anchor>
      <arglist>(const IPvXAddress &amp;localAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>remoteAddr</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>remoteAddr</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddr</name>
      <anchor>a11</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>localPort</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalPort</name>
      <anchor>a13</anchor>
      <arglist>(int localPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remotePort</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemotePort</name>
      <anchor>a15</anchor>
      <arglist>(int remotePort_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const TCPConnectInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>localAddr_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>remoteAddr_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePort_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPConnection</name>
    <filename>class_t_c_p_connection.html</filename>
    <member kind="function">
      <type>void</type>
      <name>sendAck</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendData</name>
      <anchor>a1</anchor>
      <arglist>(bool fullSegmentsOnly, int congestionWindow=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendProbe</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>retransmitOneSegment</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>retransmitData</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendRst</name>
      <anchor>a5</anchor>
      <arglist>(uint32 seqNo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendFin</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendSegment</name>
      <anchor>a7</anchor>
      <arglist>(int bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendToIP</name>
      <anchor>a8</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSynRexmitTimer</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signalConnectionTimeout</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleTimeout</name>
      <anchor>a11</anchor>
      <arglist>(cMessage *msg, simtime_t timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printConnBrief</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPConnection</name>
      <anchor>a13</anchor>
      <arglist>(TCP *mod, int appGateIndex, int connId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TCPConnection</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processTimer</name>
      <anchor>a15</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processTCPSegment</name>
      <anchor>a16</anchor>
      <arglist>(TCPSegment *tcpSeg, IPvXAddress srcAddr, IPvXAddress destAddr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processAppCommand</name>
      <anchor>a17</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFsmState</name>
      <anchor>z153_0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TCPStateVariables *</type>
      <name>getState</name>
      <anchor>z153_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPSendQueue *</type>
      <name>getSendQueue</name>
      <anchor>z153_2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPReceiveQueue *</type>
      <name>getReceiveQueue</name>
      <anchor>z153_3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPAlgorithm *</type>
      <name>getTcpAlgorithm</name>
      <anchor>z153_4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCP *</type>
      <name>getTcpMain</name>
      <anchor>z153_5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sendRst</name>
      <anchor>e0</anchor>
      <arglist>(uint32 seq, IPvXAddress src, IPvXAddress dest, int srcPort, int destPort)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sendRstAck</name>
      <anchor>e1</anchor>
      <arglist>(uint32 seq, uint32 ack, IPvXAddress src, IPvXAddress dest, int srcPort, int destPort)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printSegmentBrief</name>
      <anchor>e2</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchor>e3</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>eventName</name>
      <anchor>e4</anchor>
      <arglist>(int event)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>indicationName</name>
      <anchor>e5</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>segmentArrivalWhileClosed</name>
      <anchor>e6</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>appGateIndex</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>connId</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>localPort</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>remotePort</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCPConnection *</type>
      <name>cloneListeningConnection</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initConnection</name>
      <anchor>b1</anchor>
      <arglist>(TCPOpenCommand *openCmd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configureStateVariables</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>selectInitialSeqNum</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isSegmentAcceptable</name>
      <anchor>b4</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSyn</name>
      <anchor>b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSynAck</name>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cMessage *</type>
      <name>cancelEvent</name>
      <anchor>b7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToApp</name>
      <anchor>b8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendIndicationToApp</name>
      <anchor>b9</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendEstabIndicationToApp</name>
      <anchor>b10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCPEventCode</type>
      <name>preanalyseAppCommandEvent</name>
      <anchor>z146_0</anchor>
      <arglist>(int commandCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>performStateTransition</name>
      <anchor>z146_1</anchor>
      <arglist>(const TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stateEntered</name>
      <anchor>z146_2</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_OPEN_ACTIVE</name>
      <anchor>z148_0</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_OPEN_PASSIVE</name>
      <anchor>z148_1</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_SEND</name>
      <anchor>z148_2</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_CLOSE</name>
      <anchor>z148_3</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_ABORT</name>
      <anchor>z148_4</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_STATUS</name>
      <anchor>z148_5</anchor>
      <arglist>(TCPEventCode &amp;event, TCPCommand *tcpCommand, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>tryFastRoute</name>
      <anchor>z150_0</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCPEventCode</type>
      <name>process_RCV_SEGMENT</name>
      <anchor>z150_1</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCPEventCode</type>
      <name>processSegmentInListen</name>
      <anchor>z150_2</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCPEventCode</type>
      <name>processSegmentInSynSent</name>
      <anchor>z150_3</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCPEventCode</type>
      <name>processSegment1stThru8th</name>
      <anchor>z150_4</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCPEventCode</type>
      <name>processRstInSynReceived</name>
      <anchor>z150_5</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>processAckInEstabEtc</name>
      <anchor>z150_6</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_TIMEOUT_2MSL</name>
      <anchor>z152_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_TIMEOUT_CONN_ESTAB</name>
      <anchor>z152_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_TIMEOUT_FIN_WAIT_2</name>
      <anchor>z152_2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_TIMEOUT_SYN_REXMIT</name>
      <anchor>z152_3</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>sendToIP</name>
      <anchor>f0</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCP *</type>
      <name>tcpMain</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cFSM</type>
      <name>fsm</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPStateVariables *</type>
      <name>state</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSendQueue *</type>
      <name>sendQueue</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPReceiveQueue *</type>
      <name>receiveQueue</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPAlgorithm *</type>
      <name>tcpAlgorithm</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>the2MSLTimer</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>connEstabTimer</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>finWait2Timer</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>synRexmitTimer</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndWndVector</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndNxtVector</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>sndAckVector</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvSeqVector</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>rcvAckVector</name>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>unackedVector</name>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPDump</name>
    <filename>class_t_c_p_dump.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPDump</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, cModule *parent=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>a1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPDumper</type>
      <name>tcpdump</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPDumper</name>
    <filename>class_t_c_p_dumper.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPDumper</name>
      <anchor>a0</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a1</anchor>
      <arglist>(bool l2r, const char *label, IPDatagram *dgram, const char *comment=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpIPv6</name>
      <anchor>a2</anchor>
      <arglist>(bool l2r, const char *label, IPv6Datagram_Base *dgram, const char *comment=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a3</anchor>
      <arglist>(bool l2r, const char *label, TCPSegment *tcpseg, const std::string &amp;srcAddr, const std::string &amp;destAddr, const char *comment=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchor>a4</anchor>
      <arglist>(const char *label, const char *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seq</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>outp</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPEchoApp</name>
    <filename>class_t_c_p_echo_app.html</filename>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendOrSchedule</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>delay</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>echoFactor</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesRcvd</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesSent</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPErrorInfo</name>
    <filename>class_t_c_p_error_info.html</filename>
    <base>TCPCommand</base>
    <member kind="function">
      <type></type>
      <name>TCPErrorInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPErrorInfo</name>
      <anchor>a1</anchor>
      <arglist>(const TCPErrorInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPErrorInfo</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPErrorInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TCPErrorInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>errorCode</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorCode</name>
      <anchor>a7</anchor>
      <arglist>(int errorCode_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>messageText</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageText</name>
      <anchor>a9</anchor>
      <arglist>(const char *messageText_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const TCPErrorInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>errorCode_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>messageText_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPGenericCliAppBase</name>
    <filename>class_t_c_p_generic_cli_app_base.html</filename>
    <base>TCPSocket::CallbackInterface</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>connect</name>
      <anchor>z5_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchor>z5_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPacket</name>
      <anchor>z5_2</anchor>
      <arglist>(int numBytes, int expectedReplyBytes, bool serverClose=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatusString</name>
      <anchor>z5_3</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchor>z7_0</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchor>z7_1</anchor>
      <arglist>(int connId, void *yourPtr, cMessage *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchor>z7_2</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchor>z7_3</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchor>z7_4</anchor>
      <arglist>(int connId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketStatusArrived</name>
      <anchor>z7_5</anchor>
      <arglist>(int connId, void *yourPtr, TCPStatusInfo *status)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSocket</type>
      <name>socket</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSessions</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numBroken</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetsSent</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetsRcvd</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesSent</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesRcvd</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPGenericSrvApp</name>
    <filename>class_t_c_p_generic_srv_app.html</filename>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBack</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendOrSchedule</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg, simtime_t delay)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>maxMsgDelay</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>msgsRcvd</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>msgsSent</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesRcvd</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesSent</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPGenericSrvThread</name>
    <filename>class_t_c_p_generic_srv_thread.html</filename>
    <base>TCPServerThreadBase</base>
    <member kind="function">
      <type></type>
      <name>TCPGenericSrvThread</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>established</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dataArrived</name>
      <anchor>a2</anchor>
      <arglist>(cMessage *msg, bool urgent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>timerExpired</name>
      <anchor>a3</anchor>
      <arglist>(cMessage *timer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPMsgBasedRcvQueue</name>
    <filename>class_t_c_p_msg_based_rcv_queue.html</filename>
    <base>TCPVirtualDataRcvQueue</base>
    <member kind="function">
      <type></type>
      <name>TCPMsgBasedRcvQueue</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPMsgBasedRcvQueue</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>insertBytesFromSegment</name>
      <anchor>a4</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>extractBytesUpTo</name>
      <anchor>a5</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; uint32, cMessage * &gt;</type>
      <name>PayloadList</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PayloadList</type>
      <name>payloadList</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPMsgBasedSendQueue</name>
    <filename>class_t_c_p_msg_based_send_queue.html</filename>
    <base>TCPSendQueue</base>
    <member kind="function">
      <type></type>
      <name>TCPMsgBasedSendQueue</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPMsgBasedSendQueue</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueAppData</name>
      <anchor>a4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>bufferEndSeq</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSegment *</type>
      <name>createSegmentWithBytes</name>
      <anchor>a6</anchor>
      <arglist>(uint32 fromSeq, ulong numBytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchor>a7</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Payload &gt;</type>
      <name>PayloadQueue</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PayloadQueue</type>
      <name>payloadQueue</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>begin</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>end</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">TCPMsgBasedSendQueue::Payload</class>
  </compound>
  <compound kind="struct">
    <name>TCPMsgBasedSendQueue::Payload</name>
    <filename>struct_t_c_p_msg_based_send_queue_1_1_payload.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>endSequenceNo</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>msg</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPNoCongestionControl</name>
    <filename>class_t_c_p_no_congestion_control.html</filename>
    <base>TCPBaseAlg</base>
    <member kind="function">
      <type></type>
      <name>TCPNoCongestionControl</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchor>a2</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchor>b1</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPNoCongestionControlStateVariables *&amp;</type>
      <name>state</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPOpenCommand</name>
    <filename>class_t_c_p_open_command.html</filename>
    <base>TCPCommand</base>
    <member kind="function">
      <type></type>
      <name>TCPOpenCommand</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPOpenCommand</name>
      <anchor>a1</anchor>
      <arglist>(const TCPOpenCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPOpenCommand</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPOpenCommand &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TCPOpenCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>localAddr</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>localAddr</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalAddr</name>
      <anchor>a8</anchor>
      <arglist>(const IPvXAddress &amp;localAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>remoteAddr</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>remoteAddr</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddr</name>
      <anchor>a11</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>localPort</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalPort</name>
      <anchor>a13</anchor>
      <arglist>(int localPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remotePort</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemotePort</name>
      <anchor>a15</anchor>
      <arglist>(int remotePort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>fork</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFork</name>
      <anchor>a17</anchor>
      <arglist>(bool fork_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>sendQueueClass</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendQueueClass</name>
      <anchor>a19</anchor>
      <arglist>(const char *sendQueueClass_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>receiveQueueClass</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiveQueueClass</name>
      <anchor>a21</anchor>
      <arglist>(const char *receiveQueueClass_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>tcpAlgorithmClass</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTcpAlgorithmClass</name>
      <anchor>a23</anchor>
      <arglist>(const char *tcpAlgorithmClass_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const TCPOpenCommand &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>localAddr_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>remoteAddr_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePort_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fork_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>sendQueueClass_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>receiveQueueClass_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>tcpAlgorithmClass_var</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TCPPayloadMessage</name>
    <filename>struct_t_c_p_payload_message.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPPayloadMessage</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>endSequenceNo</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessagePtr</type>
      <name>msg</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPReceiveQueue</name>
    <filename>class_t_c_p_receive_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPReceiveQueue</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPReceiveQueue</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(uint32 startSeq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>insertBytesFromSegment</name>
      <anchor>a3</anchor>
      <arglist>(TCPSegment *tcpseg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cMessage *</type>
      <name>extractBytesUpTo</name>
      <anchor>a4</anchor>
      <arglist>(uint32 seq)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPConnection *</type>
      <name>conn</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPReno</name>
    <filename>class_t_c_p_reno.html</filename>
    <base>TCPTahoeRenoFamily</base>
    <member kind="function">
      <type></type>
      <name>TCPReno</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchor>a1</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recalculateSlowStartThreshold</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchor>b2</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPRenoStateVariables *&amp;</type>
      <name>state</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSegment</name>
    <filename>class_t_c_p_segment.html</filename>
    <base>TCPSegment_Base</base>
    <member kind="function">
      <type></type>
      <name>TCPSegment</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPSegment</name>
      <anchor>a1</anchor>
      <arglist>(const TCPSegment &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TCPSegment &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const TCPSegment &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPayloadArraySize</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPayload</name>
      <anchor>a5</anchor>
      <arglist>(unsigned int k, const TCPPayloadMessage &amp;payload_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>payloadArraySize</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPPayloadMessage &amp;</type>
      <name>payload</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPayloadMessage</name>
      <anchor>a8</anchor>
      <arglist>(cMessage *msg, uint32 endSequenceNo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>removeFirstPayloadMessage</name>
      <anchor>a9</anchor>
      <arglist>(uint32 &amp;outEndSequenceNo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; TCPPayloadMessage &gt;</type>
      <name>payloadList</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSegment_Base</name>
    <filename>class_t_c_p_segment___base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPSegment_Base</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>srcPort</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcPort</name>
      <anchor>a5</anchor>
      <arglist>(short srcPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>destPort</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestPort</name>
      <anchor>a7</anchor>
      <arglist>(short destPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>sequenceNo</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceNo</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int sequenceNo_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>ackNo</name>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAckNo</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int ackNo_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>urgBit</name>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUrgBit</name>
      <anchor>a13</anchor>
      <arglist>(bool urgBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ackBit</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAckBit</name>
      <anchor>a15</anchor>
      <arglist>(bool ackBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pshBit</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPshBit</name>
      <anchor>a17</anchor>
      <arglist>(bool pshBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>rstBit</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRstBit</name>
      <anchor>a19</anchor>
      <arglist>(bool rstBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>synBit</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSynBit</name>
      <anchor>a21</anchor>
      <arglist>(bool synBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>finBit</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFinBit</name>
      <anchor>a23</anchor>
      <arglist>(bool finBit_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>window</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWindow</name>
      <anchor>a25</anchor>
      <arglist>(unsigned long window_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>urgentPointer</name>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUrgentPointer</name>
      <anchor>a27</anchor>
      <arglist>(unsigned long urgentPointer_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>payloadLength</name>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPayloadLength</name>
      <anchor>a29</anchor>
      <arglist>(int payloadLength_var)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPayloadArraySize</name>
      <anchor>a30</anchor>
      <arglist>(unsigned int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>payloadArraySize</name>
      <anchor>a31</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TCPPayloadMessage &amp;</type>
      <name>payload</name>
      <anchor>a32</anchor>
      <arglist>(unsigned int k)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TCPPayloadMessage &amp;</type>
      <name>payload</name>
      <anchor>a33</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPayload</name>
      <anchor>a34</anchor>
      <arglist>(unsigned int k, const TCPPayloadMessage &amp;payload_var)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const TCPSegment_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TCPSegment_Base</name>
      <anchor>b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TCPSegment_Base</name>
      <anchor>b2</anchor>
      <arglist>(const TCPSegment_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TCPSegment_Base &amp;</type>
      <name>operator=</name>
      <anchor>b3</anchor>
      <arglist>(const TCPSegment_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>srcPort_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>destPort_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sequenceNo_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ackNo_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>urgBit_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ackBit_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>pshBit_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rstBit_var</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>synBit_var</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finBit_var</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>window_var</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>urgentPointer_var</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>payloadLength_var</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSendCommand</name>
    <filename>class_t_c_p_send_command.html</filename>
    <base>TCPCommand</base>
    <member kind="function">
      <type></type>
      <name>TCPSendCommand</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPSendCommand</name>
      <anchor>a1</anchor>
      <arglist>(const TCPSendCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPSendCommand</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPSendCommand &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TCPSendCommand &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const TCPSendCommand &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSendQueue</name>
    <filename>class_t_c_p_send_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPSendQueue</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPSendQueue</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(uint32 startSeq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enqueueAppData</name>
      <anchor>a3</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32</type>
      <name>bufferEndSeq</name>
      <anchor>a4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>ulong</type>
      <name>bytesAvailable</name>
      <anchor>a5</anchor>
      <arglist>(uint32 fromSeq)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TCPSegment *</type>
      <name>createSegmentWithBytes</name>
      <anchor>a6</anchor>
      <arglist>(uint32 fromSeq, ulong maxNumBytes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchor>a7</anchor>
      <arglist>(uint32 seqNum)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPServerThreadBase</name>
    <filename>class_t_c_p_server_thread_base.html</filename>
    <base>TCPSocket::CallbackInterface</base>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>(TCPSrvHostApp *hostmodule, TCPSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPServerThreadBase</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPServerThreadBase</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPSocket *</type>
      <name>socket</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPSrvHostApp *</type>
      <name>hostModule</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleAt</name>
      <anchor>a5</anchor>
      <arglist>(simtime_t t, cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelEvent</name>
      <anchor>a6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>simTime</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>established</name>
      <anchor>z9_0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dataArrived</name>
      <anchor>z9_1</anchor>
      <arglist>(cMessage *msg, bool urgent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>timerExpired</name>
      <anchor>z9_2</anchor>
      <arglist>(cMessage *timer)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>peerClosed</name>
      <anchor>z9_3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closed</name>
      <anchor>z9_4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>failure</name>
      <anchor>z9_5</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>statusArrived</name>
      <anchor>z9_6</anchor>
      <arglist>(TCPStatusInfo *status)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchor>b0</anchor>
      <arglist>(int, void *, cMessage *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchor>b1</anchor>
      <arglist>(int, void *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchor>b2</anchor>
      <arglist>(int, void *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchor>b3</anchor>
      <arglist>(int, void *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchor>b4</anchor>
      <arglist>(int, void *, int code)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketStatusArrived</name>
      <anchor>b5</anchor>
      <arglist>(int, void *, TCPStatusInfo *status)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TCPSrvHostApp *</type>
      <name>hostmod</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TCPSocket *</type>
      <name>sock</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSessionApp</name>
    <filename>class_t_c_p_session_app.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPSessionApp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Command &gt;</type>
      <name>CommandVector</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parseScript</name>
      <anchor>b0</anchor>
      <arglist>(const char *script)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>waitUntil</name>
      <anchor>b1</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>count</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CommandVector</type>
      <name>commands</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSocket</type>
      <name>socket</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetsRcvd</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesRcvd</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>indicationsRcvd</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">TCPSessionApp::Command</class>
  </compound>
  <compound kind="struct">
    <name>TCPSessionApp::Command</name>
    <filename>struct_t_c_p_session_app_1_1_command.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>tSend</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numBytes</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSinkApp</name>
    <filename>class_t_c_p_sink_app.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesRcvd</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSocket</name>
    <filename>class_t_c_p_socket.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>belongsToSocket</name>
      <anchor>z131_0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallbackObject</name>
      <anchor>z131_1</anchor>
      <arglist>(CallbackInterface *cb, void *yourPtr=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processMessage</name>
      <anchor>z131_2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>belongsToAnyTCPSocket</name>
      <anchor>z131_3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchor>w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_BOUND</name>
      <anchor>w9w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUND</name>
      <anchor>w9w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LISTENING</name>
      <anchor>w9w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTING</name>
      <anchor>w9w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTED</name>
      <anchor>w9w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PEER_CLOSED</name>
      <anchor>w9w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCALLY_CLOSED</name>
      <anchor>w9w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLOSED</name>
      <anchor>w9w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKERROR</name>
      <anchor>w9w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPSocket</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPSocket</name>
      <anchor>a1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TCPSocket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connectionId</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>state</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>localAddress</name>
      <anchor>z127_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>localPort</name>
      <anchor>z127_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>remoteAddress</name>
      <anchor>z127_2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remotePort</name>
      <anchor>z127_3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputGate</name>
      <anchor>z129_0</anchor>
      <arglist>(cGate *toTcp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchor>z129_1</anchor>
      <arglist>(int localPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchor>z129_2</anchor>
      <arglist>(IPvXAddress localAddr, int localPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listen</name>
      <anchor>z129_3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listenOnce</name>
      <anchor>z129_4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchor>z129_5</anchor>
      <arglist>(IPvXAddress remoteAddr, int remotePort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchor>z129_6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchor>z129_7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchor>z129_8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestStatus</name>
      <anchor>z129_9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renewSocket</name>
      <anchor>z129_10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchor>e0</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToTCP</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>listen</name>
      <anchor>b1</anchor>
      <arglist>(bool fork)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>connId</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sockstate</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPrt</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePrt</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CallbackInterface *</type>
      <name>cb</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>yourPtr</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>gateToTcp</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">TCPSocket::CallbackInterface</class>
  </compound>
  <compound kind="class">
    <name>TCPSocket::CallbackInterface</name>
    <filename>class_t_c_p_socket_1_1_callback_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CallbackInterface</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchor>a1</anchor>
      <arglist>(int connId, void *yourPtr, cMessage *msg, bool urgent)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchor>a2</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchor>a3</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchor>a4</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchor>a5</anchor>
      <arglist>(int connId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketStatusArrived</name>
      <anchor>a6</anchor>
      <arglist>(int connId, void *yourPtr, TCPStatusInfo *status)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSocketMap</name>
    <filename>class_t_c_p_socket_map.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPSocketMap</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TCPSocketMap</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPSocket *</type>
      <name>findSocketFor</name>
      <anchor>a2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSocket</name>
      <anchor>a3</anchor>
      <arglist>(TCPSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>TCPSocket *</type>
      <name>removeSocket</name>
      <anchor>a4</anchor>
      <arglist>(TCPSocket *socket)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteSockets</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, TCPSocket * &gt;</type>
      <name>SocketMap</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SocketMap</type>
      <name>socketMap</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSpoof</name>
    <filename>class_t_c_p_spoof.html</filename>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToIP</name>
      <anchor>b0</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned long</type>
      <name>initialSeqNum</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSpoofPacket</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPSrvHostApp</name>
    <filename>class_t_c_p_srv_host_app.html</filename>
    <member kind="function">
      <type>void</type>
      <name>removeThread</name>
      <anchor>a0</anchor>
      <arglist>(TCPServerThreadBase *thread)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplay</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSocket</type>
      <name>serverSocket</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPSocketMap</type>
      <name>socketMap</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPStateVariables</name>
    <filename>class_t_c_p_state_variables.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPStateVariables</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>active</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fork</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>snd_mss</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_una</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_nxt</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_max</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>snd_wnd</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_up</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_wl1</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_wl2</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>iss</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_nxt</name>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_wnd</name>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_up</name>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>irs</name>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>dupacks</name>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>syn_rexmit_count</name>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>syn_rexmit_timeout</name>
      <anchor>o17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fin_ack_rcvd</name>
      <anchor>o18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>send_fin</name>
      <anchor>o19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>snd_fin_seq</name>
      <anchor>o20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fin_rcvd</name>
      <anchor>o21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>rcv_fin_seq</name>
      <anchor>o22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPStatusInfo</name>
    <filename>class_t_c_p_status_info.html</filename>
    <base>TCPCommand</base>
    <member kind="function">
      <type></type>
      <name>TCPStatusInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPStatusInfo</name>
      <anchor>a1</anchor>
      <arglist>(const TCPStatusInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPStatusInfo</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPStatusInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TCPStatusInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>state</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchor>a7</anchor>
      <arglist>(int state_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stateName</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateName</name>
      <anchor>a9</anchor>
      <arglist>(const char *stateName_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>localAddr</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>localAddr</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalAddr</name>
      <anchor>a12</anchor>
      <arglist>(const IPvXAddress &amp;localAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>remoteAddr</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>remoteAddr</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoteAddr</name>
      <anchor>a15</anchor>
      <arglist>(const IPvXAddress &amp;remoteAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>localPort</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalPort</name>
      <anchor>a17</anchor>
      <arglist>(int localPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remotePort</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemotePort</name>
      <anchor>a19</anchor>
      <arglist>(int remotePort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>snd_mss</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_mss</name>
      <anchor>a21</anchor>
      <arglist>(int snd_mss_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>snd_una</name>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_una</name>
      <anchor>a23</anchor>
      <arglist>(unsigned int snd_una_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>snd_nxt</name>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_nxt</name>
      <anchor>a25</anchor>
      <arglist>(unsigned int snd_nxt_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>snd_max</name>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_max</name>
      <anchor>a27</anchor>
      <arglist>(unsigned int snd_max_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>snd_wnd</name>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_wnd</name>
      <anchor>a29</anchor>
      <arglist>(unsigned int snd_wnd_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>snd_up</name>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_up</name>
      <anchor>a31</anchor>
      <arglist>(unsigned int snd_up_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>snd_wl1</name>
      <anchor>a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_wl1</name>
      <anchor>a33</anchor>
      <arglist>(unsigned int snd_wl1_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>snd_wl2</name>
      <anchor>a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnd_wl2</name>
      <anchor>a35</anchor>
      <arglist>(unsigned int snd_wl2_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>iss</name>
      <anchor>a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIss</name>
      <anchor>a37</anchor>
      <arglist>(unsigned int iss_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>rcv_nxt</name>
      <anchor>a38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRcv_nxt</name>
      <anchor>a39</anchor>
      <arglist>(unsigned int rcv_nxt_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>rcv_wnd</name>
      <anchor>a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRcv_wnd</name>
      <anchor>a41</anchor>
      <arglist>(unsigned int rcv_wnd_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>rcv_up</name>
      <anchor>a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRcv_up</name>
      <anchor>a43</anchor>
      <arglist>(unsigned int rcv_up_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>irs</name>
      <anchor>a44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIrs</name>
      <anchor>a45</anchor>
      <arglist>(unsigned int irs_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>fin_ack_rcvd</name>
      <anchor>a46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFin_ack_rcvd</name>
      <anchor>a47</anchor>
      <arglist>(bool fin_ack_rcvd_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const TCPStatusInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>stateName_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>localAddr_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>remoteAddr_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePort_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>snd_mss_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_una_var</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_nxt_var</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_max_var</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_wnd_var</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_up_var</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_wl1_var</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>snd_wl2_var</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iss_var</name>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rcv_nxt_var</name>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rcv_wnd_var</name>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rcv_up_var</name>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>irs_var</name>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fin_ack_rcvd_var</name>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPTahoe</name>
    <filename>class_t_c_p_tahoe.html</filename>
    <base>TCPTahoeRenoFamily</base>
    <member kind="function">
      <type></type>
      <name>TCPTahoe</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDataAck</name>
      <anchor>a1</anchor>
      <arglist>(uint32 firstSeqAcked)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receivedDuplicateAck</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TCPStateVariables *</type>
      <name>createStateVariables</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recalculateSlowStartThreshold</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processRexmitTimer</name>
      <anchor>b2</anchor>
      <arglist>(TCPEventCode &amp;event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPTahoeStateVariables *&amp;</type>
      <name>state</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPTahoeRenoFamily</name>
    <filename>class_t_c_p_tahoe_reno_family.html</filename>
    <base>TCPBaseAlg</base>
    <member kind="function">
      <type></type>
      <name>TCPTahoeRenoFamily</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCPTahoeRenoFamilyStateVariables *&amp;</type>
      <name>state</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPTahoeRenoFamilyStateVariables</name>
    <filename>class_t_c_p_tahoe_reno_family_state_variables.html</filename>
    <base>TCPBaseAlgStateVariables</base>
    <member kind="function">
      <type></type>
      <name>TCPTahoeRenoFamilyStateVariables</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>ssthresh</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPVirtualDataRcvQueue</name>
    <filename>class_t_c_p_virtual_data_rcv_queue.html</filename>
    <base>TCPReceiveQueue</base>
    <member kind="function">
      <type></type>
      <name>TCPVirtualDataRcvQueue</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPVirtualDataRcvQueue</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>insertBytesFromSegment</name>
      <anchor>a4</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>extractBytesUpTo</name>
      <anchor>a5</anchor>
      <arglist>(uint32 seq)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Region &gt;</type>
      <name>RegionList</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>merge</name>
      <anchor>b0</anchor>
      <arglist>(uint32 segmentBegin, uint32 segmentEnd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ulong</type>
      <name>extractTo</name>
      <anchor>b1</anchor>
      <arglist>(uint32 toSeq)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>rcv_nxt</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegionList</type>
      <name>regionList</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">TCPVirtualDataRcvQueue::Region</class>
  </compound>
  <compound kind="struct">
    <name>TCPVirtualDataRcvQueue::Region</name>
    <filename>struct_t_c_p_virtual_data_rcv_queue_1_1_region.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>begin</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>end</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPVirtualDataSendQueue</name>
    <filename>class_t_c_p_virtual_data_send_queue.html</filename>
    <base>TCPSendQueue</base>
    <member kind="function">
      <type></type>
      <name>TCPVirtualDataSendQueue</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPVirtualDataSendQueue</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(uint32 startSeq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueAppData</name>
      <anchor>a4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32</type>
      <name>bufferEndSeq</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSegment *</type>
      <name>createSegmentWithBytes</name>
      <anchor>a6</anchor>
      <arglist>(uint32 fromSeq, ulong numBytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>discardUpTo</name>
      <anchor>a7</anchor>
      <arglist>(uint32 seqNum)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>begin</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>end</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TED</name>
    <filename>class_t_e_d.html</filename>
    <member kind="function">
      <type></type>
      <name>TED</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TED</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkLinkValidity</name>
      <anchor>a2</anchor>
      <arglist>(TELinkStateInfo link, TELinkStateInfo *&amp;match)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTimestamp</name>
      <anchor>a3</anchor>
      <arglist>(TELinkStateInfo *link)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>interfaceAddrByPeerAddress</name>
      <anchor>z61_0</anchor>
      <arglist>(IPAddress peerIP)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>peerRemoteInterface</name>
      <anchor>z61_1</anchor>
      <arglist>(IPAddress peerIP)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>peerByLocalAddress</name>
      <anchor>z61_2</anchor>
      <arglist>(IPAddress localInf)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>primaryAddress</name>
      <anchor>z61_3</anchor>
      <arglist>(IPAddress localInf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocalPeer</name>
      <anchor>z61_4</anchor>
      <arglist>(IPAddress inetAddr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocalAddress</name>
      <anchor>z61_5</anchor>
      <arglist>(IPAddress addr)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>linkIndex</name>
      <anchor>z61_6</anchor>
      <arglist>(IPAddress localInf)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>linkIndex</name>
      <anchor>z61_7</anchor>
      <arglist>(IPAddress advrouter, IPAddress linkid)</arglist>
    </member>
    <member kind="function">
      <type>IPAddressVector</type>
      <name>getLocalAddress</name>
      <anchor>z61_8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuildRoutingTable</name>
      <anchor>z61_9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>TELinkStateInfoVector</type>
      <name>ted</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPAddressVector</type>
      <name>calculateShortestPath</name>
      <anchor>b3</anchor>
      <arglist>(IPAddressVector dest, const TELinkStateInfoVector &amp;topology, double req_bandwidth, int priority)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>assignIndex</name>
      <anchor>d0</anchor>
      <arglist>(std::vector&lt; vertex_t &gt; &amp;vertices, IPAddress nodeAddr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; vertex_t &gt;</type>
      <name>calculateShortestPaths</name>
      <anchor>d1</anchor>
      <arglist>(const TELinkStateInfoVector &amp;topology, double req_bandwidth, int priority)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingTable *</type>
      <name>rt</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceTable *</type>
      <name>ift</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPAddress</type>
      <name>routerId</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPAddressVector</type>
      <name>interfaceAddrs</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxMessageId</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">TED::edge_t</class>
    <class kind="struct">TED::vertex_t</class>
  </compound>
  <compound kind="struct">
    <name>TED::edge_t</name>
    <filename>struct_t_e_d_1_1edge__t.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>src</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dest</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>metric</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TED::vertex_t</name>
    <filename>struct_t_e_d_1_1vertex__t.html</filename>
    <member kind="variable">
      <type>IPAddress</type>
      <name>node</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parent</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dist</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TEDAccess</name>
    <filename>class_t_e_d_access.html</filename>
    <base>ModuleAccess&lt; TED &gt;</base>
    <member kind="function">
      <type></type>
      <name>TEDAccess</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TEDChangeInfo</name>
    <filename>class_t_e_d_change_info.html</filename>
    <member kind="function">
      <type></type>
      <name>TEDChangeInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEDChangeInfo</name>
      <anchor>a1</anchor>
      <arglist>(const TEDChangeInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TEDChangeInfo</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TEDChangeInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TEDChangeInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTedLinkIndicesArraySize</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getTedLinkIndicesArraySize</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTedLinkIndices</name>
      <anchor>a8</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTedLinkIndices</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int k, int tedLinkIndices_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const TEDChangeInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>tedLinkIndices_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tedLinkIndices_arraysize</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TELinkStateInfo</name>
    <filename>struct_t_e_link_state_info.html</filename>
    <member kind="function">
      <type></type>
      <name>TELinkStateInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>advrouter</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>linkid</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>local</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>remote</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>metric</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MaxBandwidth</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>UnResvBandwidth</name>
      <anchor>o6</anchor>
      <arglist>[8]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timestamp</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>sourceId</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>messageId</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>state</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TelnetApp</name>
    <filename>class_telnet_app.html</filename>
    <base>TCPGenericCliAppBase</base>
    <member kind="function">
      <type></type>
      <name>TelnetApp</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TelnetApp</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchor>b2</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchor>b3</anchor>
      <arglist>(int connId, void *yourPtr, cMessage *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketClosed</name>
      <anchor>b4</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchor>b5</anchor>
      <arglist>(int connId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeoutMsg</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numLinesToType</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numCharsToType</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThruputMeter</name>
    <filename>class_thruput_meter.html</filename>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateStats</name>
      <anchor>b0</anchor>
      <arglist>(simtime_t now, unsigned long bits)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>beginNewInterval</name>
      <anchor>b1</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>batchSize</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxInterval</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>numPackets</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>numBits</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>intvlStartTime</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>intvlLastPkTime</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>intvlNumPackets</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>intvlNumBits</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>bitpersecVector</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>pkpersecVector</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThruputMeteringChannel</name>
    <filename>class_thruput_metering_channel.html</filename>
    <member kind="function">
      <type></type>
      <name>ThruputMeteringChannel</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThruputMeteringChannel</name>
      <anchor>a1</anchor>
      <arglist>(const ThruputMeteringChannel &amp;ch)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThruputMeteringChannel</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ThruputMeteringChannel &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ThruputMeteringChannel &amp;ch)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>addPar</name>
      <anchor>a5</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>addPar</name>
      <anchor>a6</anchor>
      <arglist>(cPar *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deliver</name>
      <anchor>a7</anchor>
      <arglist>(cMessage *msg, simtime_t at)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>beginNewInterval</name>
      <anchor>b0</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplay</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>fmtp</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>batchSize</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxInterval</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numPackets</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>numBits</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>intvlStartTime</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>intvlLastPkTime</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>intvlNumPackets</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>intvlNumBits</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentBitPerSec</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentPkPerSec</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TOSData</name>
    <filename>struct_t_o_s_data.html</filename>
    <member kind="function">
      <type></type>
      <name>TOSData</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>tos</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>tosMetric</name>
      <anchor>o1</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransmComplete</name>
    <filename>class_transm_complete.html</filename>
    <member kind="function">
      <type></type>
      <name>TransmComplete</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransmComplete</name>
      <anchor>a1</anchor>
      <arglist>(const TransmComplete &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransmComplete</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TransmComplete &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TransmComplete &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const TransmComplete &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TurtleMobility</name>
    <filename>class_turtle_mobility.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resumeScript</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>executeStatement</name>
      <anchor>b4</anchor>
      <arglist>(cXMLElement *nextStatement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getValue</name>
      <anchor>b5</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>gotoNextStatement</name>
      <anchor>b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>turtleScript</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>nextStatement</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BorderPolicy</type>
      <name>borderPolicy</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; long &gt;</type>
      <name>loopVars</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TxNotifDetails</name>
    <filename>class_tx_notif_details.html</filename>
    <member kind="function">
      <type></type>
      <name>TxNotifDetails</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>message</name>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>interfaceEntry</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMessage</name>
      <anchor>a3</anchor>
      <arglist>(cMessage *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterfaceEntry</name>
      <anchor>a4</anchor>
      <arglist>(InterfaceEntry *e)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>msg</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry *</type>
      <name>ie</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDP</name>
    <filename>class_u_d_p.html</filename>
    <member kind="typedef">
      <type>std::list&lt; SockDesc * &gt;</type>
      <name>SockDescList</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, SockDesc * &gt;</type>
      <name>SocketsByIdMap</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, SockDescList &gt;</type>
      <name>SocketsByPortMap</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UDP</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UDP</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bind</name>
      <anchor>b1</anchor>
      <arglist>(int gateIndex, UDPControlInfo *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connect</name>
      <anchor>b2</anchor>
      <arglist>(int sockId, IPvXAddress addr, int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unbind</name>
      <anchor>b3</anchor>
      <arglist>(int sockId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>short</type>
      <name>getEphemeralPort</name>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>matchesSocket</name>
      <anchor>b5</anchor>
      <arglist>(SockDesc *sd, UDPPacket *udp, IPControlInfo *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>matchesSocket</name>
      <anchor>b6</anchor>
      <arglist>(SockDesc *sd, UDPPacket *udp, IPv6ControlInfo *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>matchesSocket</name>
      <anchor>b7</anchor>
      <arglist>(SockDesc *sd, const IPvXAddress &amp;localAddr, const IPvXAddress &amp;remoteAddr, short remotePort)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchor>b8</anchor>
      <arglist>(cMessage *payload, UDPPacket *udpHeader, IPControlInfo *ctrl, SockDesc *sd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchor>b9</anchor>
      <arglist>(cMessage *payload, UDPPacket *udpHeader, IPv6ControlInfo *ctrl, SockDesc *sd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processUndeliverablePacket</name>
      <anchor>b10</anchor>
      <arglist>(UDPPacket *udpPacket, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUpErrorNotification</name>
      <anchor>b11</anchor>
      <arglist>(SockDesc *sd, int msgkind, const IPvXAddress &amp;localAddr, const IPvXAddress &amp;remoteAddr, short remotePort)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processICMPError</name>
      <anchor>b12</anchor>
      <arglist>(cMessage *icmpErrorMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processUDPPacket</name>
      <anchor>b13</anchor>
      <arglist>(UDPPacket *udpPacket)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMsgFromApp</name>
      <anchor>b14</anchor>
      <arglist>(cMessage *appData)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processCommandFromApp</name>
      <anchor>b15</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b17</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SocketsByIdMap</type>
      <name>socketsByIdMap</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SocketsByPortMap</type>
      <name>socketsByPortMap</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>lastEphemeralPort</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMP *</type>
      <name>icmp</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ICMPv6 *</type>
      <name>icmpv6</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSent</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPassedUp</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDroppedWrongPort</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDroppedBadChecksum</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">UDP::SockDesc</class>
  </compound>
  <compound kind="struct">
    <name>UDP::SockDesc</name>
    <filename>struct_u_d_p_1_1_sock_desc.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>sockId</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>userId</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>appGateIndex</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>onlyLocalPortIsSet</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>localPort</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>remotePort</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>interfaceId</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPAppBase</name>
    <filename>class_u_d_p_app_base.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>bindToPort</name>
      <anchor>b0</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToUDP</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg, int srcPort, const IPvXAddress &amp;destAddr, int destPort)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printPacket</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPBasicApp</name>
    <filename>class_u_d_p_basic_app.html</filename>
    <base>UDPAppBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IPvXAddress</type>
      <name>chooseDestAddr</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>createPacket</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPacket</name>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchor>b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b5</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nodeName</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>destPort</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>msgByteLength</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IPvXAddress &gt;</type>
      <name>destAddresses</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSent</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numReceived</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>counter</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPControlInfo</name>
    <filename>class_u_d_p_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>UDPControlInfo</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UDPControlInfo</name>
      <anchor>a1</anchor>
      <arglist>(const UDPControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UDPControlInfo</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UDPControlInfo &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const UDPControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sockId</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSockId</name>
      <anchor>a7</anchor>
      <arglist>(int sockId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>userId</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUserId</name>
      <anchor>a9</anchor>
      <arglist>(int userId_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>srcAddr</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>srcAddr</name>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddr</name>
      <anchor>a12</anchor>
      <arglist>(const IPvXAddress &amp;srcAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>destAddr</name>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>destAddr</name>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchor>a15</anchor>
      <arglist>(const IPvXAddress &amp;destAddr_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>srcPort</name>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcPort</name>
      <anchor>a17</anchor>
      <arglist>(int srcPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>destPort</name>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestPort</name>
      <anchor>a19</anchor>
      <arglist>(int destPort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>interfaceId</name>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceId</name>
      <anchor>a21</anchor>
      <arglist>(int interfaceId_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const UDPControlInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sockId_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>userId_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>srcAddr_var</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>destAddr_var</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>srcPort_var</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>destPort_var</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>interfaceId_var</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPEchoApp</name>
    <filename>class_u_d_p_echo_app.html</filename>
    <base>UDPBasicApp</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>createPacket</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b2</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPEchoAppMsg</name>
    <filename>class_u_d_p_echo_app_msg.html</filename>
    <member kind="function">
      <type></type>
      <name>UDPEchoAppMsg</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UDPEchoAppMsg</name>
      <anchor>a1</anchor>
      <arglist>(const UDPEchoAppMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UDPEchoAppMsg</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UDPEchoAppMsg &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const UDPEchoAppMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRequest</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsRequest</name>
      <anchor>a8</anchor>
      <arglist>(bool isRequest_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const UDPEchoAppMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isRequest_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>udphdr</name>
    <filename>structudphdr.html</filename>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_sport</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_dport</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_ulen</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_sum</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPPacket</name>
    <filename>class_u_d_p_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>UDPPacket</name>
      <anchor>a0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UDPPacket</name>
      <anchor>a1</anchor>
      <arglist>(const UDPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UDPPacket</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UDPPacket &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const UDPPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchor>a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchor>a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sourcePort</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourcePort</name>
      <anchor>a8</anchor>
      <arglist>(int sourcePort_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>destinationPort</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestinationPort</name>
      <anchor>a10</anchor>
      <arglist>(int destinationPort_var)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchor>b0</anchor>
      <arglist>(const UDPPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sourcePort_var</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>destinationPort_var</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPSerializer</name>
    <filename>class_u_d_p_serializer.html</filename>
    <member kind="function">
      <type></type>
      <name>UDPSerializer</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialize</name>
      <anchor>a1</anchor>
      <arglist>(UDPPacket *pkt, unsigned char *buf, unsigned int bufsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchor>a2</anchor>
      <arglist>(unsigned char *buf, unsigned int bufsize, UDPPacket *pkt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned short</type>
      <name>checksum</name>
      <anchor>e0</anchor>
      <arglist>(unsigned char *addr, unsigned int count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPSink</name>
    <filename>class_u_d_p_sink.html</filename>
    <base>UDPAppBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPacket</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numReceived</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPSocket</name>
    <filename>class_u_d_p_socket.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>belongsToSocket</name>
      <anchor>z137_0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCallbackObject</name>
      <anchor>z137_1</anchor>
      <arglist>(CallbackInterface *cb, void *yourPtr=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processMessage</name>
      <anchor>z137_2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>belongsToAnyUDPSocket</name>
      <anchor>z137_3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_BOUND</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUND</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UDPSocket</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UDPSocket</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socketId</name>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserId</name>
      <anchor>a3</anchor>
      <arglist>(int userId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>userId</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>state</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>localAddress</name>
      <anchor>z133_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>localPort</name>
      <anchor>z133_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputGate</name>
      <anchor>z135_0</anchor>
      <arglist>(cGate *toUdp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchor>z135_1</anchor>
      <arglist>(int localPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchor>z135_2</anchor>
      <arglist>(IPvXAddress localAddr, int localPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchor>z135_3</anchor>
      <arglist>(IPvXAddress remoteAddr, int remotePort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMulticastInterface</name>
      <anchor>z135_4</anchor>
      <arglist>(int interfaceId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>multicastInterface</name>
      <anchor>z135_5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendTo</name>
      <anchor>z135_6</anchor>
      <arglist>(cMessage *msg, IPvXAddress destAddr, int destPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchor>z135_7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchor>z135_8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>stateName</name>
      <anchor>e0</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>generateSocketId</name>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToUDP</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sockId</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>usrId</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sockstate</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>localAddr</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPrt</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>remoteAddr</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remotePrt</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mcastIfaceId</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CallbackInterface *</type>
      <name>cb</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>yourPtr</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>gateToUdp</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">UDPSocket::CallbackInterface</class>
  </compound>
  <compound kind="class">
    <name>UDPSocket::CallbackInterface</name>
    <filename>class_u_d_p_socket_1_1_callback_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CallbackInterface</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>socketDatagramArrived</name>
      <anchor>a1</anchor>
      <arglist>(int sockId, void *yourPtr, cMessage *msg, UDPControlInfo *ctrl)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchor>a2</anchor>
      <arglist>(int sockId, void *yourPtr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPVideoStreamCli</name>
    <filename>class_u_d_p_video_stream_cli.html</filename>
    <base>UDPAppBase</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>requestStream</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>receiveStream</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>z11_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>z11_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>z11_2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>eed</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UDPVideoStreamSvr</name>
    <filename>class_u_d_p_video_stream_svr.html</filename>
    <base>UDPAppBase</base>
    <member kind="function">
      <type></type>
      <name>UDPVideoStreamSvr</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UDPVideoStreamSvr</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; VideoStreamData * &gt;</type>
      <name>VideoStreamVector</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processStreamRequest</name>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendStreamData</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *timer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>z13_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchor>z13_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchor>z13_2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VideoStreamVector</type>
      <name>streamVector</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>serverPort</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>waitInterval</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>packetLen</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>videoSize</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numStreams</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>numPkSent</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">UDPVideoStreamSvr::VideoStreamData</class>
  </compound>
  <compound kind="struct">
    <name>UDPVideoStreamSvr::VideoStreamData</name>
    <filename>struct_u_d_p_video_stream_svr_1_1_video_stream_data.html</filename>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>clientAddr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>clientPort</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>videoSize</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>bytesLeft</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>numPkSent</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WirelessMacBase</name>
    <filename>class_wireless_mac_base.html</filename>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>b0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchor>z121_0</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchor>z121_1</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchor>z121_2</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isUpperMsg</name>
      <anchor>z121_3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isLowerMsg</name>
      <anchor>z121_4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchor>z123_0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchor>z123_1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateIn</name>
      <anchor>z119_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchor>z119_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowergateIn</name>
      <anchor>z119_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowergateOut</name>
      <anchor>z119_3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>Applications/</name>
    <path>D:/home/INET-svn/Applications/</path>
    <filename>dir_000027.html</filename>
    <dir>Applications/Ethernet/</dir>
    <dir>Applications/Generic/</dir>
    <dir>Applications/PingApp/</dir>
    <dir>Applications/TCPApp/</dir>
    <dir>Applications/UDPApp/</dir>
  </compound>
  <compound kind="dir">
    <name>Network/ARP/</name>
    <path>D:/home/INET-svn/Network/ARP/</path>
    <filename>dir_000006.html</filename>
    <file>ARP.cc</file>
    <file>ARP.h</file>
    <file>ARPPacket_m.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/AutoRouting/</name>
    <path>D:/home/INET-svn/Network/AutoRouting/</path>
    <filename>dir_000030.html</filename>
    <file>FlatNetworkConfigurator.cc</file>
    <file>FlatNetworkConfigurator.h</file>
    <file>FlatNetworkConfigurator6.cc</file>
    <file>FlatNetworkConfigurator6.h</file>
    <file>NetworkConfigurator.cc</file>
    <file>NetworkConfigurator.h</file>
  </compound>
  <compound kind="dir">
    <name>Transport/RTP/Profiles/AVProfile/</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/AVProfile/</path>
    <filename>dir_000050.html</filename>
    <file>RTPAVProfile.cc</file>
    <file>RTPAVProfile.h</file>
    <file>RTPAVProfilePayload10Receiver.cc</file>
    <file>RTPAVProfilePayload10Receiver.h</file>
    <file>RTPAVProfilePayload10Sender.cc</file>
    <file>RTPAVProfilePayload10Sender.h</file>
    <file>RTPAVProfilePayload32Receiver.cc</file>
    <file>RTPAVProfilePayload32Receiver.h</file>
    <file>RTPAVProfilePayload32Sender.cc</file>
    <file>RTPAVProfilePayload32Sender.h</file>
    <file>RTPAVProfileSampleBasedAudioReceiver.cc</file>
    <file>RTPAVProfileSampleBasedAudioReceiver.h</file>
    <file>RTPAVProfileSampleBasedAudioSender.cc</file>
    <file>RTPAVProfileSampleBasedAudioSender.h</file>
    <file>RTPMpegPacket.cc</file>
    <file>RTPMpegPacket.h</file>
  </compound>
  <compound kind="dir">
    <name>Base/</name>
    <path>D:/home/INET-svn/Base/</path>
    <filename>dir_000000.html</filename>
    <file>AbstractQueue.cc</file>
    <file>AbstractQueue.h</file>
    <file>BasicModule.cc</file>
    <file>BasicModule.h</file>
    <file>Blackboard.cc</file>
    <file>Blackboard.h</file>
    <file>ByteArrayMessage.cc</file>
    <file>ByteArrayMessage.h</file>
    <file>ByteArrayMessage_m.h</file>
    <file>Coord.h</file>
    <file>EnqueueHook.h</file>
    <file>FSMA.h</file>
    <file>INETDefs.h</file>
    <file>INotifiable.h</file>
    <file>IPassiveQueue.h</file>
    <file>IScriptable.h</file>
    <file>Join.cc</file>
    <file>ModuleAccess.cc</file>
    <file>ModuleAccess.h</file>
    <file>NotificationBoard.cc</file>
    <file>NotificationBoard.h</file>
    <file>NotifierConsts.cc</file>
    <file>NotifierConsts.h</file>
    <file>PassiveQueueBase.cc</file>
    <file>PassiveQueueBase.h</file>
    <file>ProtocolMap.cc</file>
    <file>ProtocolMap.h</file>
    <file>QueueBase.cc</file>
    <file>QueueBase.h</file>
    <file>QueueWithQoS.cc</file>
    <file>QueueWithQoS.h</file>
    <file>ReassemblyBuffer.cc</file>
    <file>ReassemblyBuffer.h</file>
    <file>Sink.cc</file>
  </compound>
  <compound kind="dir">
    <name>Transport/Contract/</name>
    <path>D:/home/INET-svn/Transport/Contract/</path>
    <filename>dir_000051.html</filename>
    <file>TCPCommand_m.h</file>
    <file>TCPSocket.cc</file>
    <file>TCPSocket.h</file>
    <file>TCPSocketMap.cc</file>
    <file>TCPSocketMap.h</file>
    <file>UDPControlInfo_m.h</file>
    <file>UDPSocket.cc</file>
    <file>UDPSocket.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/Contract/</name>
    <path>D:/home/INET-svn/Network/Contract/</path>
    <filename>dir_000038.html</filename>
    <file>InterfaceEntry.cc</file>
    <file>InterfaceEntry.h</file>
    <file>InterfaceIdentifier.h</file>
    <file>InterfaceTable.cc</file>
    <file>InterfaceTable.h</file>
    <file>InterfaceTableAccess.h</file>
    <file>IPAddress.cc</file>
    <file>IPAddress.h</file>
    <file>IPAddressResolver.cc</file>
    <file>IPAddressResolver.h</file>
    <file>IPControlInfo.cc</file>
    <file>IPControlInfo.h</file>
    <file>IPControlInfo_m.h</file>
    <file>IPProtocolId_m.h</file>
    <file>IPv6Address.cc</file>
    <file>IPv6Address.h</file>
    <file>IPv6ControlInfo.cc</file>
    <file>IPv6ControlInfo.h</file>
    <file>IPv6ControlInfo_m.h</file>
    <file>IPvXAddress.cc</file>
    <file>IPvXAddress.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/Contract/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Contract/</path>
    <filename>dir_000037.html</filename>
    <file>Ieee802Ctrl_m.h</file>
    <file>MACAddress.cc</file>
    <file>MACAddress.h</file>
    <file>PhyControlInfo_m.h</file>
    <file>RadioState.h</file>
    <file>TxNotifDetails.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/MF80211/phyLayer/decider/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/decider/</path>
    <filename>dir_000020.html</filename>
    <file>Decider80211.cc</file>
    <file>Decider80211.h</file>
    <file>ErrAndCollDecider.cc</file>
    <file>ErrAndCollDecider.h</file>
    <file>SnrDecider.cc</file>
    <file>SnrDecider.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/Ethernet/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ethernet/</path>
    <filename>dir_000029.html</filename>
    <file>EtherBus.cc</file>
    <file>EtherEncap.cc</file>
    <file>EtherFrame_m.h</file>
    <file>EtherHub.cc</file>
    <file>EtherLLC.cc</file>
    <file>EtherMAC.cc</file>
    <file>EtherMAC.h</file>
    <file>EtherMAC2.cc</file>
    <file>EtherMAC2.h</file>
    <file>EtherMACBase.cc</file>
    <file>EtherMACBase.h</file>
    <file>Ethernet.h</file>
    <file>nterfaces/Ethernet/Utils.cc</file>
    <file>nterfaces/Ethernet/Utils.h</file>
  </compound>
  <compound kind="dir">
    <name>Applications/Ethernet/</name>
    <path>D:/home/INET-svn/Applications/Ethernet/</path>
    <filename>dir_000028.html</filename>
    <file>EtherApp_m.h</file>
    <file>EtherAppCli.cc</file>
    <file>EtherAppSrv.cc</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/EtherSwitch/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/EtherSwitch/</path>
    <filename>dir_000044.html</filename>
    <file>MACRelayUnitBase.cc</file>
    <file>MACRelayUnitBase.h</file>
    <file>MACRelayUnitNP.cc</file>
    <file>MACRelayUnitNP.h</file>
    <file>MACRelayUnitPP.cc</file>
    <file>MACRelayUnitPP.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/Extras/</name>
    <path>D:/home/INET-svn/Network/Extras/</path>
    <filename>dir_000026.html</filename>
    <file>Dummy.cc</file>
    <file>FailureManager.cc</file>
    <file>FailureManager.h</file>
  </compound>
  <compound kind="dir">
    <name>Transport/TCP/flavours/</name>
    <path>D:/home/INET-svn/Transport/TCP/flavours/</path>
    <filename>dir_000025.html</filename>
    <file>DumbTCP.cc</file>
    <file>DumbTCP.h</file>
    <file>TCPBaseAlg.cc</file>
    <file>TCPBaseAlg.h</file>
    <file>TCPNoCongestionControl.cc</file>
    <file>TCPNoCongestionControl.h</file>
    <file>TCPReno.cc</file>
    <file>TCPReno.h</file>
    <file>TCPTahoe.cc</file>
    <file>TCPTahoe.h</file>
    <file>TCPTahoeRenoFamily.cc</file>
    <file>TCPTahoeRenoFamily.h</file>
  </compound>
  <compound kind="dir">
    <name>Applications/Generic/</name>
    <path>D:/home/INET-svn/Applications/Generic/</path>
    <filename>dir_000040.html</filename>
    <file>IPTrafGen.cc</file>
    <file>IPTrafGen.h</file>
  </compound>
  <compound kind="dir">
    <name>Util/HeaderSerializers/headers/</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/headers/</path>
    <filename>dir_000012.html</filename>
    <file>bsdint.h</file>
    <file>Util/HeaderSerializers/headers/defs.h</file>
    <file>in.h</file>
    <file>in_systm.h</file>
    <file>Util/HeaderSerializers/headers/IP.h</file>
    <file>ip_icmp.h</file>
    <file>Util/HeaderSerializers/headers/UDP.h</file>
  </compound>
  <compound kind="dir">
    <name>Util/HeaderSerializers/</name>
    <path>D:/home/INET-svn/Util/HeaderSerializers/</path>
    <filename>dir_000011.html</filename>
    <dir>Util/HeaderSerializers/headers/</dir>
    <file>ICMPSerializer.cc</file>
    <file>ICMPSerializer.h</file>
    <file>IPSerializer.cc</file>
    <file>IPSerializer.h</file>
    <file>UDPSerializer.cc</file>
    <file>UDPSerializer.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/ICMPv6/</name>
    <path>D:/home/INET-svn/Network/ICMPv6/</path>
    <filename>dir_000033.html</filename>
    <file>ICMPv6.cc</file>
    <file>ICMPv6.h</file>
    <file>ICMPv6Access.h</file>
    <file>ICMPv6Message_m.h</file>
    <file>IPv6NDMessage_m.h</file>
    <file>IPv6NeighbourCache.cc</file>
    <file>IPv6NeighbourCache.h</file>
    <file>IPv6NeighbourDiscovery.cc</file>
    <file>IPv6NeighbourDiscovery.h</file>
    <file>IPv6NeighbourDiscoveryAccess.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/Ieee80211/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/</path>
    <filename>dir_000034.html</filename>
    <dir>NetworkInterfaces/Ieee80211/Mac/</dir>
    <dir>NetworkInterfaces/Ieee80211/Mgmt/</dir>
  </compound>
  <compound kind="dir">
    <name>Network/OSPFv2/Interface/</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Interface/</path>
    <filename>dir_000045.html</filename>
    <file>OSPFInterface.cc</file>
    <file>OSPFInterface.h</file>
    <file>OSPFInterfaceState.cc</file>
    <file>OSPFInterfaceState.h</file>
    <file>OSPFInterfaceStateBackup.cc</file>
    <file>OSPFInterfaceStateBackup.h</file>
    <file>OSPFInterfaceStateDesignatedRouter.cc</file>
    <file>OSPFInterfaceStateDesignatedRouter.h</file>
    <file>OSPFInterfaceStateDown.cc</file>
    <file>OSPFInterfaceStateDown.h</file>
    <file>OSPFInterfaceStateLoopback.cc</file>
    <file>OSPFInterfaceStateLoopback.h</file>
    <file>OSPFInterfaceStateNotDesignatedRouter.cc</file>
    <file>OSPFInterfaceStateNotDesignatedRouter.h</file>
    <file>OSPFInterfaceStatePointToPoint.cc</file>
    <file>OSPFInterfaceStatePointToPoint.h</file>
    <file>OSPFInterfaceStateWaiting.cc</file>
    <file>OSPFInterfaceStateWaiting.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/IPv4/</name>
    <path>D:/home/INET-svn/Network/IPv4/</path>
    <filename>dir_000017.html</filename>
    <file>ControlManetRouting_m.h</file>
    <file>ErrorHandling.cc</file>
    <file>ErrorHandling.h</file>
    <file>ICMP.cc</file>
    <file>ICMP.h</file>
    <file>ICMPAccess.h</file>
    <file>ICMPMessage.h</file>
    <file>ICMPMessage_m.h</file>
    <file>IP.cc</file>
    <file>Network/IPv4/IP.h</file>
    <file>IPDatagram.h</file>
    <file>IPDatagram_m.h</file>
    <file>IPFragBuf.cc</file>
    <file>IPFragBuf.h</file>
    <file>IPv4InterfaceData.cc</file>
    <file>IPv4InterfaceData.h</file>
    <file>RoutingTable.cc</file>
    <file>RoutingTable.h</file>
    <file>RoutingTableAccess.h</file>
    <file>RoutingTableParser.cc</file>
    <file>RoutingTableParser.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/IPv6/</name>
    <path>D:/home/INET-svn/Network/IPv6/</path>
    <filename>dir_000041.html</filename>
    <file>IPv6.cc</file>
    <file>IPv6.h</file>
    <file>IPv6Datagram.cc</file>
    <file>IPv6Datagram.h</file>
    <file>IPv6Datagram_m.h</file>
    <file>IPv6ErrorHandling.cc</file>
    <file>IPv6ErrorHandling.h</file>
    <file>IPv6ExtensionHeaders_m.h</file>
    <file>IPv6FragBuf.cc</file>
    <file>IPv6FragBuf.h</file>
    <file>IPv6InterfaceData.cc</file>
    <file>IPv6InterfaceData.h</file>
    <file>RoutingTable6.cc</file>
    <file>RoutingTable6.h</file>
    <file>RoutingTable6Access.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/LDP/</name>
    <path>D:/home/INET-svn/Network/LDP/</path>
    <filename>dir_000042.html</filename>
    <file>LDP.cc</file>
    <file>LDP.h</file>
    <file>LDPPacket_m.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/Ieee80211/Mac/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mac/</path>
    <filename>dir_000036.html</filename>
    <file>Ieee80211Consts.h</file>
    <file>Ieee80211Frame_m.h</file>
    <file>Ieee80211Mac.cc</file>
    <file>Ieee80211Mac.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/MF80211/macLayer/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/macLayer/</path>
    <filename>dir_000015.html</filename>
    <file>Consts80211.h</file>
    <file>CSMAMacLayer.cc</file>
    <file>CSMAMacLayer.h</file>
    <file>Mac80211.cc</file>
    <file>Mac80211.h</file>
    <file>Mac80211Pkt_m.h</file>
    <file>MacPkt_m.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/OSPFv2/MessageHandler/</name>
    <path>D:/home/INET-svn/Network/OSPFv2/MessageHandler/</path>
    <filename>dir_000018.html</filename>
    <file>DatabaseDescriptionHandler.cc</file>
    <file>DatabaseDescriptionHandler.h</file>
    <file>HelloHandler.cc</file>
    <file>HelloHandler.h</file>
    <file>IMessageHandler.h</file>
    <file>LinkStateAcknowledgementHandler.cc</file>
    <file>LinkStateAcknowledgementHandler.h</file>
    <file>LinkStateRequestHandler.cc</file>
    <file>LinkStateRequestHandler.h</file>
    <file>LinkStateUpdateHandler.cc</file>
    <file>LinkStateUpdateHandler.h</file>
    <file>MessageHandler.cc</file>
    <file>MessageHandler.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/MF80211/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/</path>
    <filename>dir_000014.html</filename>
    <dir>NetworkInterfaces/MF80211/macLayer/</dir>
    <dir>NetworkInterfaces/MF80211/phyLayer/</dir>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/MFCore/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MFCore/</path>
    <filename>dir_000003.html</filename>
    <file>AirFrame_m.h</file>
    <file>BasicDecider.cc</file>
    <file>BasicDecider.h</file>
    <file>BasicSnrEval.cc</file>
    <file>BasicSnrEval.h</file>
    <file>SnrControlInfo_m.h</file>
    <file>SnrList.h</file>
    <file>TransmComplete_m.h</file>
    <file>WirelessMacBase.cc</file>
    <file>WirelessMacBase.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/Ieee80211/Mgmt/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Ieee80211/Mgmt/</path>
    <filename>dir_000035.html</filename>
    <file>Ieee80211AgentSTA.cc</file>
    <file>Ieee80211AgentSTA.h</file>
    <file>Ieee80211MgmtAdhoc.cc</file>
    <file>Ieee80211MgmtAdhoc.h</file>
    <file>Ieee80211MgmtAP.cc</file>
    <file>Ieee80211MgmtAP.h</file>
    <file>Ieee80211MgmtAPBase.cc</file>
    <file>Ieee80211MgmtAPBase.h</file>
    <file>Ieee80211MgmtAPSimplified.cc</file>
    <file>Ieee80211MgmtAPSimplified.h</file>
    <file>Ieee80211MgmtBase.cc</file>
    <file>Ieee80211MgmtBase.h</file>
    <file>Ieee80211MgmtFrames_m.h</file>
    <file>Ieee80211MgmtSTA.cc</file>
    <file>Ieee80211MgmtSTA.h</file>
    <file>Ieee80211MgmtSTASimplified.cc</file>
    <file>Ieee80211MgmtSTASimplified.h</file>
    <file>Ieee80211Primitives_m.h</file>
  </compound>
  <compound kind="dir">
    <name>Mobility/</name>
    <path>D:/home/INET-svn/Mobility/</path>
    <filename>dir_000004.html</filename>
    <file>ANSimMobility.cc</file>
    <file>ANSimMobility.h</file>
    <file>BasicMobility.cc</file>
    <file>BasicMobility.h</file>
    <file>BonnMotionFileCache.cc</file>
    <file>BonnMotionFileCache.h</file>
    <file>BonnMotionMobility.cc</file>
    <file>BonnMotionMobility.h</file>
    <file>CircleMobility.cc</file>
    <file>CircleMobility.h</file>
    <file>ConstSpeedMobility.cc</file>
    <file>ConstSpeedMobility.h</file>
    <file>LinearMobility.cc</file>
    <file>LinearMobility.h</file>
    <file>LineSegmentsMobilityBase.cc</file>
    <file>LineSegmentsMobilityBase.h</file>
    <file>MassMobility.cc</file>
    <file>MassMobility.h</file>
    <file>NullMobility.cc</file>
    <file>NullMobility.h</file>
    <file>RandomWPMobility.cc</file>
    <file>RandomWPMobility.h</file>
    <file>RectangleMobility.cc</file>
    <file>RectangleMobility.h</file>
    <file>TurtleMobility.cc</file>
    <file>TurtleMobility.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/MPLS/</name>
    <path>D:/home/INET-svn/Network/MPLS/</path>
    <filename>dir_000016.html</filename>
    <file>ConstType.h</file>
    <file>IClassifier.h</file>
    <file>LIBTable.cc</file>
    <file>LIBTable.h</file>
    <file>LIBTableAccess.h</file>
    <file>MPLS.cc</file>
    <file>MPLS.h</file>
    <file>MPLSPacket.cc</file>
    <file>MPLSPacket.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/OSPFv2/Neighbor/</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Neighbor/</path>
    <filename>dir_000046.html</filename>
    <file>OSPFNeighbor.cc</file>
    <file>OSPFNeighbor.h</file>
    <file>OSPFNeighborState.cc</file>
    <file>OSPFNeighborState.h</file>
    <file>OSPFNeighborStateAttempt.cc</file>
    <file>OSPFNeighborStateAttempt.h</file>
    <file>OSPFNeighborStateDown.cc</file>
    <file>OSPFNeighborStateDown.h</file>
    <file>OSPFNeighborStateExchange.cc</file>
    <file>OSPFNeighborStateExchange.h</file>
    <file>OSPFNeighborStateExchangeStart.cc</file>
    <file>OSPFNeighborStateExchangeStart.h</file>
    <file>OSPFNeighborStateFull.cc</file>
    <file>OSPFNeighborStateFull.h</file>
    <file>OSPFNeighborStateInit.cc</file>
    <file>OSPFNeighborStateInit.h</file>
    <file>OSPFNeighborStateLoading.cc</file>
    <file>OSPFNeighborStateLoading.h</file>
    <file>OSPFNeighborStateTwoWay.cc</file>
    <file>OSPFNeighborStateTwoWay.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/</name>
    <path>D:/home/INET-svn/Network/</path>
    <filename>dir_000005.html</filename>
    <dir>Network/ARP/</dir>
    <dir>Network/AutoRouting/</dir>
    <dir>Network/Contract/</dir>
    <dir>Network/Extras/</dir>
    <dir>Network/ICMPv6/</dir>
    <dir>Network/IPv4/</dir>
    <dir>Network/IPv6/</dir>
    <dir>Network/LDP/</dir>
    <dir>Network/MPLS/</dir>
    <dir>Network/OSPFv2/</dir>
    <dir>Network/Queue/</dir>
    <dir>Network/RSVP_TE/</dir>
    <dir>Network/TED/</dir>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/</path>
    <filename>dir_000001.html</filename>
    <dir>NetworkInterfaces/Contract/</dir>
    <dir>NetworkInterfaces/Ethernet/</dir>
    <dir>NetworkInterfaces/EtherSwitch/</dir>
    <dir>NetworkInterfaces/Ieee80211/</dir>
    <dir>NetworkInterfaces/MF80211/</dir>
    <dir>NetworkInterfaces/MFCore/</dir>
    <dir>NetworkInterfaces/PPP/</dir>
    <dir>NetworkInterfaces/Radio/</dir>
  </compound>
  <compound kind="dir">
    <name>Network/OSPFv2/</name>
    <path>D:/home/INET-svn/Network/OSPFv2/</path>
    <filename>dir_000007.html</filename>
    <dir>Network/OSPFv2/Interface/</dir>
    <dir>Network/OSPFv2/MessageHandler/</dir>
    <dir>Network/OSPFv2/Neighbor/</dir>
    <dir>Network/OSPFv2/Router/</dir>
    <file>OSPFPacket_m.h</file>
    <file>OSPFRouting.cc</file>
    <file>OSPFRouting.h</file>
    <file>OSPFTimer_m.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/MF80211/phyLayer/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/</path>
    <filename>dir_000019.html</filename>
    <dir>NetworkInterfaces/MF80211/phyLayer/decider/</dir>
    <dir>NetworkInterfaces/MF80211/phyLayer/snrEval/</dir>
  </compound>
  <compound kind="dir">
    <name>Applications/PingApp/</name>
    <path>D:/home/INET-svn/Applications/PingApp/</path>
    <filename>dir_000047.html</filename>
    <file>PingApp.cc</file>
    <file>PingApp.h</file>
    <file>PingPayload_m.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/PPP/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/PPP/</path>
    <filename>dir_000048.html</filename>
    <file>PPP.cc</file>
    <file>PPP.h</file>
    <file>PPPFrame_m.h</file>
    <file>ThruputMeter.cc</file>
    <file>ThruputMeter.h</file>
  </compound>
  <compound kind="dir">
    <name>Transport/RTP/Profiles/</name>
    <path>D:/home/INET-svn/Transport/RTP/Profiles/</path>
    <filename>dir_000049.html</filename>
    <dir>Transport/RTP/Profiles/AVProfile/</dir>
  </compound>
  <compound kind="dir">
    <name>Network/Queue/</name>
    <path>D:/home/INET-svn/Network/Queue/</path>
    <filename>dir_000009.html</filename>
    <file>BasicDSCPClassifier.cc</file>
    <file>BasicDSCPClassifier.h</file>
    <file>DropTailQoSQueue.cc</file>
    <file>DropTailQoSQueue.h</file>
    <file>DropTailQueue.cc</file>
    <file>DropTailQueue.h</file>
    <file>IQoSClassifier.h</file>
    <file>REDQueue.cc</file>
    <file>REDQueue.h</file>
  </compound>
  <compound kind="dir">
    <name>Transport/TCP/queues/</name>
    <path>D:/home/INET-svn/Transport/TCP/queues/</path>
    <filename>dir_000052.html</filename>
    <file>TCPMsgBasedRcvQueue.cc</file>
    <file>TCPMsgBasedRcvQueue.h</file>
    <file>TCPMsgBasedSendQueue.cc</file>
    <file>TCPMsgBasedSendQueue.h</file>
    <file>TCPVirtualDataRcvQueue.cc</file>
    <file>TCPVirtualDataRcvQueue.h</file>
    <file>TCPVirtualDataSendQueue.cc</file>
    <file>TCPVirtualDataSendQueue.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/Radio/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/Radio/</path>
    <filename>dir_000002.html</filename>
    <file>AbstractRadio.cc</file>
    <file>AbstractRadio.h</file>
    <file>GenericRadio.cc</file>
    <file>GenericRadio.h</file>
    <file>GenericRadioModel.cc</file>
    <file>GenericRadioModel.h</file>
    <file>Ieee80211Radio.cc</file>
    <file>Ieee80211Radio.h</file>
    <file>Ieee80211RadioModel.cc</file>
    <file>Ieee80211RadioModel.h</file>
    <file>IModulation.h</file>
    <file>IRadioModel.h</file>
    <file>IReceptionModel.h</file>
    <file>Modulation.cc</file>
    <file>Modulation.h</file>
    <file>PathLossReceptionModel.cc</file>
    <file>PathLossReceptionModel.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/OSPFv2/Router/</name>
    <path>D:/home/INET-svn/Network/OSPFv2/Router/</path>
    <filename>dir_000008.html</filename>
    <file>ASExternalLSA.cc</file>
    <file>LSA.h</file>
    <file>NetworkLSA.cc</file>
    <file>OSPFArea.cc</file>
    <file>OSPFArea.h</file>
    <file>OSPFcommon.h</file>
    <file>OSPFRouter.cc</file>
    <file>OSPFRouter.h</file>
    <file>OSPFRoutingTableEntry.h</file>
    <file>RouterLSA.cc</file>
    <file>SummaryLSA.cc</file>
  </compound>
  <compound kind="dir">
    <name>Network/RSVP_TE/</name>
    <path>D:/home/INET-svn/Network/RSVP_TE/</path>
    <filename>dir_000039.html</filename>
    <file>IntServ.h</file>
    <file>IntServ_m.h</file>
    <file>IRSVPClassifier.h</file>
    <file>RSVP.cc</file>
    <file>RSVP.h</file>
    <file>RSVPAccess.h</file>
    <file>RSVPHello_m.h</file>
    <file>RSVPHelloMsg.h</file>
    <file>RSVPPacket.h</file>
    <file>RSVPPacket_m.h</file>
    <file>RSVPPathMsg.h</file>
    <file>RSVPPathMsg_m.h</file>
    <file>RSVPResvMsg.h</file>
    <file>RSVPResvMsg_m.h</file>
    <file>SignallingMsg_m.h</file>
    <file>SimpleClassifier.cc</file>
    <file>SimpleClassifier.h</file>
    <file>RSVP_TE/Utils.cc</file>
    <file>RSVP_TE/Utils.h</file>
  </compound>
  <compound kind="dir">
    <name>Transport/RTP/</name>
    <path>D:/home/INET-svn/Transport/RTP/</path>
    <filename>dir_000022.html</filename>
    <dir>Transport/RTP/Profiles/</dir>
    <dir>Transport/RTP/tmp/</dir>
    <file>reports.cc</file>
    <file>reports.h</file>
    <file>RTCPEndsystemModule.cc</file>
    <file>RTCPEndsystemModule.h</file>
    <file>RTCPPacket.cc</file>
    <file>RTCPPacket.h</file>
    <file>RTPApplication.cc</file>
    <file>RTPApplication.h</file>
    <file>RTPEndsystemModule.cc</file>
    <file>RTPEndsystemModule.h</file>
    <file>RTPInnerPacket.cc</file>
    <file>RTPInnerPacket.h</file>
    <file>RTPInterfacePacket.cc</file>
    <file>RTPInterfacePacket.h</file>
    <file>RTPPacket.cc</file>
    <file>RTPPacket.h</file>
    <file>RTPParticipantInfo.cc</file>
    <file>RTPParticipantInfo.h</file>
    <file>RTPPayloadReceiver.cc</file>
    <file>RTPPayloadReceiver.h</file>
    <file>RTPPayloadSender.cc</file>
    <file>RTPPayloadSender.h</file>
    <file>RTPProfile.cc</file>
    <file>RTPProfile.h</file>
    <file>RTPReceiverInfo.cc</file>
    <file>RTPReceiverInfo.h</file>
    <file>RTPSenderControlMessage.cc</file>
    <file>RTPSenderControlMessage.h</file>
    <file>RTPSenderInfo.cc</file>
    <file>RTPSenderInfo.h</file>
    <file>RTPSenderStatusMessage.cc</file>
    <file>RTPSenderStatusMessage.h</file>
    <file>RTPSSRCGate.cc</file>
    <file>RTPSSRCGate.h</file>
    <file>sdes.cc</file>
    <file>sdes.h</file>
    <file>types.h</file>
  </compound>
  <compound kind="dir">
    <name>NetworkInterfaces/MF80211/phyLayer/snrEval/</name>
    <path>D:/home/INET-svn/NetworkInterfaces/MF80211/phyLayer/snrEval/</path>
    <filename>dir_000032.html</filename>
    <file>GilbertElliotSnr.cc</file>
    <file>GilbertElliotSnr.h</file>
    <file>SnrEval.cc</file>
    <file>SnrEval.h</file>
    <file>SnrEval80211.cc</file>
    <file>SnrEval80211.h</file>
  </compound>
  <compound kind="dir">
    <name>Transport/TCP/</name>
    <path>D:/home/INET-svn/Transport/TCP/</path>
    <filename>dir_000024.html</filename>
    <dir>Transport/TCP/flavours/</dir>
    <dir>Transport/TCP/queues/</dir>
    <file>TCP.cc</file>
    <file>TCP.h</file>
    <file>TCPAlgorithm.h</file>
    <file>TCPConnection.h</file>
    <file>TCPConnectionBase.cc</file>
    <file>TCPConnectionEventProc.cc</file>
    <file>TCPConnectionRcvSegment.cc</file>
    <file>TCPConnectionUtil.cc</file>
    <file>TCPDoc.h</file>
    <file>TCPReceiveQueue.h</file>
    <file>TCPSegment.cc</file>
    <file>TCPSegment.h</file>
    <file>TCPSegment_m.h</file>
    <file>TCPSendQueue.h</file>
  </compound>
  <compound kind="dir">
    <name>Applications/TCPApp/</name>
    <path>D:/home/INET-svn/Applications/TCPApp/</path>
    <filename>dir_000031.html</filename>
    <file>GenericAppMsg_m.h</file>
    <file>TCPBasicClientApp.cc</file>
    <file>TCPBasicClientApp.h</file>
    <file>TCPEchoApp.cc</file>
    <file>TCPEchoApp.h</file>
    <file>TCPGenericCliAppBase.cc</file>
    <file>TCPGenericCliAppBase.h</file>
    <file>TCPGenericSrvApp.cc</file>
    <file>TCPGenericSrvApp.h</file>
    <file>TCPGenericSrvThread.cc</file>
    <file>TCPGenericSrvThread.h</file>
    <file>TCPSessionApp.cc</file>
    <file>TCPSessionApp.h</file>
    <file>TCPSinkApp.cc</file>
    <file>TCPSinkApp.h</file>
    <file>TCPSpoof.cc</file>
    <file>TCPSpoof.h</file>
    <file>TCPSrvHostApp.cc</file>
    <file>TCPSrvHostApp.h</file>
    <file>TelnetApp.cc</file>
    <file>TelnetApp.h</file>
  </compound>
  <compound kind="dir">
    <name>Network/TED/</name>
    <path>D:/home/INET-svn/Network/TED/</path>
    <filename>dir_000043.html</filename>
    <file>LinkStatePacket_m.h</file>
    <file>LinkStateRouting.cc</file>
    <file>LinkStateRouting.h</file>
    <file>TED.cc</file>
    <file>TED.h</file>
    <file>TED_m.h</file>
    <file>TEDAccess.h</file>
  </compound>
  <compound kind="dir">
    <name>Transport/RTP/tmp/</name>
    <path>D:/home/INET-svn/Transport/RTP/tmp/</path>
    <filename>dir_000023.html</filename>
    <file>Transport/RTP/tmp/defs.h</file>
    <file>pcb.h</file>
    <file>SocketInterfacePacket.h</file>
    <file>sockets.h</file>
  </compound>
  <compound kind="dir">
    <name>Transport/</name>
    <path>D:/home/INET-svn/Transport/</path>
    <filename>dir_000021.html</filename>
    <dir>Transport/Contract/</dir>
    <dir>Transport/RTP/</dir>
    <dir>Transport/TCP/</dir>
    <dir>Transport/UDP/</dir>
  </compound>
  <compound kind="dir">
    <name>Transport/UDP/</name>
    <path>D:/home/INET-svn/Transport/UDP/</path>
    <filename>dir_000053.html</filename>
    <file>UDP.cc</file>
    <file>Transport/UDP/UDP.h</file>
    <file>UDPPacket.h</file>
    <file>UDPPacket_m.h</file>
  </compound>
  <compound kind="dir">
    <name>Applications/UDPApp/</name>
    <path>D:/home/INET-svn/Applications/UDPApp/</path>
    <filename>dir_000054.html</filename>
    <file>UDPAppBase.cc</file>
    <file>UDPAppBase.h</file>
    <file>UDPBasicApp.cc</file>
    <file>UDPBasicApp.h</file>
    <file>UDPEchoApp.cc</file>
    <file>UDPEchoApp.h</file>
    <file>UDPEchoAppMsg_m.h</file>
    <file>UDPSink.cc</file>
    <file>UDPSink.h</file>
    <file>UDPVideoStreamCli.cc</file>
    <file>UDPVideoStreamCli.h</file>
    <file>UDPVideoStreamSvr.cc</file>
    <file>UDPVideoStreamSvr.h</file>
  </compound>
  <compound kind="dir">
    <name>Util/</name>
    <path>D:/home/INET-svn/Util/</path>
    <filename>dir_000010.html</filename>
    <dir>Util/HeaderSerializers/</dir>
    <file>common.cc</file>
    <file>common.h</file>
    <file>FWMath.h</file>
    <file>NAMTraceWriter.cc</file>
    <file>NAMTraceWriter.h</file>
    <file>opp_utils.cc</file>
    <file>opp_utils.h</file>
    <file>TCPDump.cc</file>
    <file>TCPDump.h</file>
    <file>ThruputMeteringChannel.cc</file>
    <file>ThruputMeteringChannel.h</file>
    <file>XMLUtils.cc</file>
    <file>XMLUtils.h</file>
  </compound>
  <compound kind="dir">
    <name>World/</name>
    <path>D:/home/INET-svn/World/</path>
    <filename>dir_000013.html</filename>
    <file>ChannelAccess.cc</file>
    <file>ChannelAccess.h</file>
    <file>ChannelControl.cc</file>
    <file>ChannelControl.h</file>
    <file>ChannelInstaller.cc</file>
    <file>ChannelInstaller.h</file>
    <file>NAMTrace.cc</file>
    <file>NAMTrace.h</file>
    <file>ScenarioManager.cc</file>
    <file>ScenarioManager.h</file>
  </compound>
  <compound kind="namespace">
    <name>ConstType</name>
    <filename>namespace_const_type.html</filename>
    <member kind="variable">
      <type>const char</type>
      <name>libDataMarker</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>prtDataMarker</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>UnknownData</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>NoLabel</name>
      <anchor>a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>wildcast</name>
      <anchor>a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>empty</name>
      <anchor>a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ldp_port</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>LDP_KIND</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>HOW_KIND</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>INETFw</name>
    <filename>namespace_i_n_e_t_fw.html</filename>
    <class kind="struct">INETFw::in_addr</class>
    <class kind="struct">INETFw::ip</class>
    <class kind="struct">INETFw::ip_timestamp</class>
    <class kind="struct">INETFw::icmp_ra_addr</class>
    <class kind="struct">INETFw::icmp</class>
    <class kind="struct">INETFw::udphdr</class>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>u_int8_t</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>u_int16_t</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>u_int32_t</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>u_int64_t</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uchar</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ushort</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ulong</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>u_char</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>u_short</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>u_int</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>u_long</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>in_addr_t</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int16_t</type>
      <name>n_short</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_long</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>u_int32_t</type>
      <name>n_time</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::in_addr</name>
    <filename>struct_i_n_e_t_fw_1_1in__addr.html</filename>
    <member kind="variable">
      <type>in_addr_t</type>
      <name>s_addr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::ip</name>
    <filename>struct_i_n_e_t_fw_1_1ip.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_hl</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_v</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_tos</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_len</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_id</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_off</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_ttl</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ip_p</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>ip_sum</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>in_addr ip_src</type>
      <name>ip_dst</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>in_addr ip_src</type>
      <name>ip_dst</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::ip_timestamp</name>
    <filename>struct_i_n_e_t_fw_1_1ip__timestamp.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_code</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_len</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_ptr</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_flg</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ipt_oflw</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INETFw::ip_timestamp::ipt_timestamp</type>
      <name>ipt_timestamp</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INETFw::ip_timestamp::ipt_timestamp</type>
      <name>ipt_timestamp</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <class kind="union">INETFw::ip_timestamp::ipt_timestamp</class>
  </compound>
  <compound kind="union">
    <name>INETFw::ip_timestamp::ipt_timestamp</name>
    <filename>union_i_n_e_t_fw_1_1ip__timestamp_1_1ipt__timestamp.html</filename>
    <member kind="variable">
      <type>n_long</type>
      <name>ipt_time</name>
      <anchor>o0</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="variable">
      <type>INETFw::ip_timestamp::ipt_timestamp::ipt_ta</type>
      <name>ipt_ta</name>
      <anchor>o1</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="variable">
      <type>INETFw::ip_timestamp::ipt_timestamp::ipt_ta</type>
      <name>ipt_ta</name>
      <anchor>o2</anchor>
      <arglist>[1]</arglist>
    </member>
    <class kind="struct">INETFw::ip_timestamp::ipt_timestamp::ipt_ta</class>
  </compound>
  <compound kind="struct">
    <name>INETFw::ip_timestamp::ipt_timestamp::ipt_ta</name>
    <filename>struct_i_n_e_t_fw_1_1ip__timestamp_1_1ipt__timestamp_1_1ipt__ta.html</filename>
    <member kind="variable">
      <type>in_addr</type>
      <name>ipt_addr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_long</type>
      <name>ipt_time</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>in_addr</type>
      <name>ipt_addr</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::icmp_ra_addr</name>
    <filename>struct_i_n_e_t_fw_1_1icmp__ra__addr.html</filename>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>ira_addr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>ira_preference</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::icmp</name>
    <filename>struct_i_n_e_t_fw_1_1icmp.html</filename>
    <member kind="variable">
      <type>u_char</type>
      <name>icmp_type</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>icmp_code</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>icmp_cksum</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INETFw::icmp::@5</type>
      <name>icmp_hun</name>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>ih_pptr</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>in_addr</type>
      <name>ih_gwaddr</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INETFw::icmp::@5::ih_idseq</type>
      <name>ih_idseq</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>icd_id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>icd_seq</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ih_void</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INETFw::icmp::@5::ih_pmtu</type>
      <name>ih_pmtu</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>ipm_void</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_short</type>
      <name>ipm_nextmtu</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INETFw::icmp::@5::ih_rtradv</type>
      <name>ih_rtradv</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>irt_num_addrs</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_char</type>
      <name>irt_wpa</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int16_t</type>
      <name>irt_lifetime</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INETFw::icmp::@6</type>
      <name>icmp_dun</name>
      <anchor>o26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INETFw::icmp::@6::id_ts</type>
      <name>id_ts</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_otime</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_rtime</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>n_time</type>
      <name>its_ttime</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INETFw::icmp::@6::id_ip</type>
      <name>id_ip</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ip</type>
      <name>idi_ip</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>icmp_ra_addr</type>
      <name>id_radv</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_int32_t</type>
      <name>id_mask</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>id_data</name>
      <anchor>o4</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>INETFw::udphdr</name>
    <filename>struct_i_n_e_t_fw_1_1udphdr.html</filename>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_sport</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_dport</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_ulen</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u_short</type>
      <name>uh_sum</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OPP_Global</name>
    <filename>namespace_o_p_p___global.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>ltostr</name>
      <anchor>a0</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dtostr</name>
      <anchor>a1</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>atod</name>
      <anchor>a2</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>atoul</name>
      <anchor>a3</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OSPF</name>
    <filename>namespace_o_s_p_f.html</filename>
    <class kind="class">OSPF::Interface</class>
    <class kind="class">OSPF::InterfaceState</class>
    <class kind="class">OSPF::InterfaceStateBackup</class>
    <class kind="class">OSPF::InterfaceStateDesignatedRouter</class>
    <class kind="class">OSPF::InterfaceStateDown</class>
    <class kind="class">OSPF::InterfaceStateLoopback</class>
    <class kind="class">OSPF::InterfaceStateNotDesignatedRouter</class>
    <class kind="class">OSPF::InterfaceStatePointToPoint</class>
    <class kind="class">OSPF::InterfaceStateWaiting</class>
    <class kind="class">OSPF::DatabaseDescriptionHandler</class>
    <class kind="class">OSPF::HelloHandler</class>
    <class kind="class">OSPF::IMessageHandler</class>
    <class kind="class">OSPF::LinkStateAcknowledgementHandler</class>
    <class kind="class">OSPF::LinkStateRequestHandler</class>
    <class kind="class">OSPF::LinkStateUpdateHandler</class>
    <class kind="class">OSPF::MessageHandler</class>
    <class kind="class">OSPF::Neighbor</class>
    <class kind="class">OSPF::NeighborState</class>
    <class kind="class">OSPF::NeighborStateAttempt</class>
    <class kind="class">OSPF::NeighborStateDown</class>
    <class kind="class">OSPF::NeighborStateExchange</class>
    <class kind="class">OSPF::NeighborStateExchangeStart</class>
    <class kind="class">OSPF::NeighborStateFull</class>
    <class kind="class">OSPF::NeighborStateInit</class>
    <class kind="class">OSPF::NeighborStateLoading</class>
    <class kind="class">OSPF::NeighborStateTwoWay</class>
    <class kind="struct">OSPF::NextHop</class>
    <class kind="class">OSPF::RoutingInfo</class>
    <class kind="class">OSPF::LSATrackingInfo</class>
    <class kind="class">OSPF::RouterLSA</class>
    <class kind="class">OSPF::NetworkLSA</class>
    <class kind="class">OSPF::SummaryLSA</class>
    <class kind="class">OSPF::ASExternalLSA</class>
    <class kind="class">OSPF::Area</class>
    <class kind="struct">OSPF::AuthenticationKeyType</class>
    <class kind="struct">OSPF::IPv4Address</class>
    <class kind="class">OSPF::IPv4Address_Less</class>
    <class kind="struct">OSPF::IPv4AddressRange</class>
    <class kind="class">OSPF::IPv4AddressRange_Less</class>
    <class kind="struct">OSPF::HostRouteParameters</class>
    <class kind="struct">OSPF::LSAKeyType</class>
    <class kind="class">OSPF::LSAKeyType_Less</class>
    <class kind="struct">OSPF::DesignatedRouterID</class>
    <class kind="class">OSPF::Router</class>
    <class kind="class">OSPF::RoutingTableEntry</class>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>Metric</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>RouterID</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>AreaID</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>LinkStateID</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AuthenticationType</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NullType</name>
      <anchor>a15a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SimplePasswordType</name>
      <anchor>a15a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CrytographicType</name>
      <anchor>a15a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RouterID</type>
      <name>NullRouterID</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AreaID</type>
      <name>BackboneAreaID</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LinkStateID</type>
      <name>NullLinkStateID</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>NullIPv4Address</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>AllSPFRouters</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4Address</type>
      <name>AllDRouters</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPv4AddressRange</type>
      <name>NullIPv4AddressRange</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DesignatedRouterID</type>
      <name>NullDesignatedRouterID</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::Interface</name>
    <filename>class_o_s_p_f_1_1_interface.html</filename>
    <member kind="enumeration">
      <name>InterfaceEventType</name>
      <anchor>w22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterfaceUp</name>
      <anchor>w22w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HelloTimer</name>
      <anchor>w22w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WaitTimer</name>
      <anchor>w22w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AcknowledgementTimer</name>
      <anchor>w22w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BackupSeen</name>
      <anchor>w22w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeighborChange</name>
      <anchor>w22w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LoopIndication</name>
      <anchor>w22w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnloopIndication</name>
      <anchor>w22w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterfaceDown</name>
      <anchor>w22w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OSPFInterfaceType</name>
      <anchor>w23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnknownType</name>
      <anchor>w23w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PointToPoint</name>
      <anchor>w23w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Broadcast</name>
      <anchor>w23w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NBMA</name>
      <anchor>w23w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PointToMultiPoint</name>
      <anchor>w23w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Virtual</name>
      <anchor>w23w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>InterfaceStateType</name>
      <anchor>w24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DownState</name>
      <anchor>w24w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LoopbackState</name>
      <anchor>w24w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WaitingState</name>
      <anchor>w24w17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PointToPointState</name>
      <anchor>w24w18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NotDesignatedRouterState</name>
      <anchor>w24w19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BackupState</name>
      <anchor>w24w20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DesignatedRouterState</name>
      <anchor>w24w21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchor>a0</anchor>
      <arglist>(OSPFInterfaceType ifType=UnknownType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interface</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessEvent</name>
      <anchor>a2</anchor>
      <arglist>(InterfaceEventType event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendHelloPacket</name>
      <anchor>a4</anchor>
      <arglist>(IPv4Address destination, short ttl=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendLSAcknowledgement</name>
      <anchor>a5</anchor>
      <arglist>(OSPFLSAHeader *lsaHeader, IPv4Address destination)</arglist>
    </member>
    <member kind="function">
      <type>Neighbor *</type>
      <name>GetNeighborByID</name>
      <anchor>a6</anchor>
      <arglist>(RouterID neighborID)</arglist>
    </member>
    <member kind="function">
      <type>Neighbor *</type>
      <name>GetNeighborByAddress</name>
      <anchor>a7</anchor>
      <arglist>(IPv4Address address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNeighbor</name>
      <anchor>a8</anchor>
      <arglist>(Neighbor *neighbor)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceStateType</type>
      <name>GetState</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AnyNeighborInStates</name>
      <anchor>a10</anchor>
      <arglist>(int states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFromAllRetransmissionLists</name>
      <anchor>a11</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOnAnyRetransmissionList</name>
      <anchor>a12</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FloodLSA</name>
      <anchor>a13</anchor>
      <arglist>(OSPFLSA *lsa, Interface *intf=NULL, Neighbor *neighbor=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDelayedAcknowledgement</name>
      <anchor>a14</anchor>
      <arglist>(OSPFLSAHeader &amp;lsaHeader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendDelayedAcknowledgements</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AgeTransmittedLSALists</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFLinkStateUpdatePacket *</type>
      <name>CreateUpdatePacket</name>
      <anchor>a17</anchor>
      <arglist>(OSPFLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchor>a18</anchor>
      <arglist>(OSPFInterfaceType ifType)</arglist>
    </member>
    <member kind="function">
      <type>OSPFInterfaceType</type>
      <name>GetType</name>
      <anchor>a19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIfIndex</name>
      <anchor>a20</anchor>
      <arglist>(unsigned char index)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>GetIfIndex</name>
      <anchor>a21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMTU</name>
      <anchor>a22</anchor>
      <arglist>(unsigned short ifMTU)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>GetMTU</name>
      <anchor>a23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAreaID</name>
      <anchor>a24</anchor>
      <arglist>(AreaID areaId)</arglist>
    </member>
    <member kind="function">
      <type>AreaID</type>
      <name>GetAreaID</name>
      <anchor>a25</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransitAreaID</name>
      <anchor>a26</anchor>
      <arglist>(AreaID areaId)</arglist>
    </member>
    <member kind="function">
      <type>AreaID</type>
      <name>GetTransitAreaID</name>
      <anchor>a27</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOutputCost</name>
      <anchor>a28</anchor>
      <arglist>(Metric cost)</arglist>
    </member>
    <member kind="function">
      <type>Metric</type>
      <name>GetOutputCost</name>
      <anchor>a29</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRetransmissionInterval</name>
      <anchor>a30</anchor>
      <arglist>(short interval)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetRetransmissionInterval</name>
      <anchor>a31</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransmissionDelay</name>
      <anchor>a32</anchor>
      <arglist>(short delay)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetTransmissionDelay</name>
      <anchor>a33</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcknowledgementDelay</name>
      <anchor>a34</anchor>
      <arglist>(short delay)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetAcknowledgementDelay</name>
      <anchor>a35</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRouterPriority</name>
      <anchor>a36</anchor>
      <arglist>(unsigned char priority)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>GetRouterPriority</name>
      <anchor>a37</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHelloInterval</name>
      <anchor>a38</anchor>
      <arglist>(short interval)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetHelloInterval</name>
      <anchor>a39</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPollInterval</name>
      <anchor>a40</anchor>
      <arglist>(short interval)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetPollInterval</name>
      <anchor>a41</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRouterDeadInterval</name>
      <anchor>a42</anchor>
      <arglist>(short interval)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetRouterDeadInterval</name>
      <anchor>a43</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAuthenticationType</name>
      <anchor>a44</anchor>
      <arglist>(AuthenticationType type)</arglist>
    </member>
    <member kind="function">
      <type>AuthenticationType</type>
      <name>GetAuthenticationType</name>
      <anchor>a45</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAuthenticationKey</name>
      <anchor>a46</anchor>
      <arglist>(AuthenticationKeyType key)</arglist>
    </member>
    <member kind="function">
      <type>AuthenticationKeyType</type>
      <name>GetAuthenticationKey</name>
      <anchor>a47</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAddressRange</name>
      <anchor>a48</anchor>
      <arglist>(IPv4AddressRange range)</arglist>
    </member>
    <member kind="function">
      <type>IPv4AddressRange</type>
      <name>GetAddressRange</name>
      <anchor>a49</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetHelloTimer</name>
      <anchor>a50</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetWaitTimer</name>
      <anchor>a51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetAcknowledgementTimer</name>
      <anchor>a52</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DesignatedRouterID</type>
      <name>GetDesignatedRouter</name>
      <anchor>a53</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>DesignatedRouterID</type>
      <name>GetBackupDesignatedRouter</name>
      <anchor>a54</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetNeighborCount</name>
      <anchor>a55</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Neighbor *</type>
      <name>GetNeighbor</name>
      <anchor>a56</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const Neighbor *</type>
      <name>GetNeighbor</name>
      <anchor>a57</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArea</name>
      <anchor>a58</anchor>
      <arglist>(Area *area)</arglist>
    </member>
    <member kind="function">
      <type>Area *</type>
      <name>GetArea</name>
      <anchor>a59</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const Area *</type>
      <name>GetArea</name>
      <anchor>a60</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>GetStateString</name>
      <anchor>e0</anchor>
      <arglist>(InterfaceStateType stateType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ChangeState</name>
      <anchor>d0</anchor>
      <arglist>(InterfaceState *newState, InterfaceState *currentState)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFInterfaceType</type>
      <name>interfaceType</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceState *</type>
      <name>state</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceState *</type>
      <name>previousState</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char</type>
      <name>ifIndex</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned short</type>
      <name>mtu</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPv4AddressRange</type>
      <name>interfaceAddressRange</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AreaID</type>
      <name>areaID</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AreaID</type>
      <name>transitAreaID</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>helloInterval</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>pollInterval</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>routerDeadInterval</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>interfaceTransmissionDelay</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char</type>
      <name>routerPriority</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>helloTimer</name>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>waitTimer</name>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>acknowledgementTimer</name>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; RouterID, Neighbor * &gt;</type>
      <name>neighboringRoutersByID</name>
      <anchor>r16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; IPv4Address, Neighbor *, IPv4Address_Less &gt;</type>
      <name>neighboringRoutersByAddress</name>
      <anchor>r17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Neighbor * &gt;</type>
      <name>neighboringRouters</name>
      <anchor>r18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; IPv4Address, std::list&lt; OSPFLSAHeader &gt;, IPv4Address_Less &gt;</type>
      <name>delayedAcknowledgements</name>
      <anchor>r19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DesignatedRouterID</type>
      <name>designatedRouter</name>
      <anchor>r20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DesignatedRouterID</type>
      <name>backupDesignatedRouter</name>
      <anchor>r21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Metric</type>
      <name>interfaceOutputCost</name>
      <anchor>r22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>retransmissionInterval</name>
      <anchor>r23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>acknowledgementDelay</name>
      <anchor>r24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AuthenticationType</type>
      <name>authenticationType</name>
      <anchor>r25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AuthenticationKeyType</type>
      <name>authenticationKey</name>
      <anchor>r26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Area *</type>
      <name>parentArea</name>
      <anchor>r27</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InterfaceState</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceState</name>
    <filename>class_o_s_p_f_1_1_interface_state.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterfaceState</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a1</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchor>a2</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ChangeState</name>
      <anchor>b0</anchor>
      <arglist>(Interface *intf, InterfaceState *newState, InterfaceState *currentState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CalculateDesignatedRouter</name>
      <anchor>b1</anchor>
      <arglist>(Interface *intf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateBackup</name>
    <filename>class_o_s_p_f_1_1_interface_state_backup.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateDesignatedRouter</name>
    <filename>class_o_s_p_f_1_1_interface_state_designated_router.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateDown</name>
    <filename>class_o_s_p_f_1_1_interface_state_down.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateLoopback</name>
    <filename>class_o_s_p_f_1_1_interface_state_loopback.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateNotDesignatedRouter</name>
    <filename>class_o_s_p_f_1_1_interface_state_not_designated_router.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStatePointToPoint</name>
    <filename>class_o_s_p_f_1_1_interface_state_point_to_point.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::InterfaceStateWaiting</name>
    <filename>class_o_s_p_f_1_1_interface_state_waiting.html</filename>
    <base>OSPF::InterfaceState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Interface *intf, Interface::InterfaceEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interface::InterfaceStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::DatabaseDescriptionHandler</name>
    <filename>class_o_s_p_f_1_1_database_description_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>DatabaseDescriptionHandler</name>
      <anchor>a0</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchor>a1</anchor>
      <arglist>(OSPFPacket *packet, Interface *intf, Neighbor *neighbor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ProcessDDPacket</name>
      <anchor>d0</anchor>
      <arglist>(OSPFDatabaseDescriptionPacket *ddPacket, Interface *intf, Neighbor *neighbor, bool inExchangeStart)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::HelloHandler</name>
    <filename>class_o_s_p_f_1_1_hello_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>HelloHandler</name>
      <anchor>a0</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchor>a1</anchor>
      <arglist>(OSPFPacket *packet, Interface *intf, Neighbor *unused=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::IMessageHandler</name>
    <filename>class_o_s_p_f_1_1_i_message_handler.html</filename>
    <member kind="function">
      <type></type>
      <name>IMessageHandler</name>
      <anchor>a0</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IMessageHandler</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ProcessPacket</name>
      <anchor>a2</anchor>
      <arglist>(OSPFPacket *, Interface *intf, Neighbor *neighbor)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Router *</type>
      <name>router</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::LinkStateAcknowledgementHandler</name>
    <filename>class_o_s_p_f_1_1_link_state_acknowledgement_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>LinkStateAcknowledgementHandler</name>
      <anchor>a0</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchor>a1</anchor>
      <arglist>(OSPFPacket *packet, Interface *intf, Neighbor *neighbor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::LinkStateRequestHandler</name>
    <filename>class_o_s_p_f_1_1_link_state_request_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>LinkStateRequestHandler</name>
      <anchor>a0</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchor>a1</anchor>
      <arglist>(OSPFPacket *packet, Interface *intf, Neighbor *neighbor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::LinkStateUpdateHandler</name>
    <filename>class_o_s_p_f_1_1_link_state_update_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>LinkStateUpdateHandler</name>
      <anchor>a0</anchor>
      <arglist>(Router *containingRouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchor>a1</anchor>
      <arglist>(OSPFPacket *packet, Interface *intf, Neighbor *neighbor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>ValidateLSChecksum</name>
      <anchor>d0</anchor>
      <arglist>(OSPFLSA *lsa)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>AcknowledgeLSA</name>
      <anchor>d1</anchor>
      <arglist>(OSPFLSAHeader &amp;lsaHeader, Interface *intf, AcknowledgementFlags acknowledgementFlags, RouterID lsaSource)</arglist>
    </member>
    <class kind="struct">OSPF::LinkStateUpdateHandler::AcknowledgementFlags</class>
  </compound>
  <compound kind="struct">
    <name>OSPF::LinkStateUpdateHandler::AcknowledgementFlags</name>
    <filename>struct_o_s_p_f_1_1_link_state_update_handler_1_1_acknowledgement_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>floodedBackOut</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lsaIsNewer</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lsaIsDuplicate</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>impliedAcknowledgement</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lsaReachedMaxAge</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>noLSAInstanceInDatabase</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>anyNeighborInExchangeOrLoadingState</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::MessageHandler</name>
    <filename>class_o_s_p_f_1_1_message_handler.html</filename>
    <base>OSPF::IMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>MessageHandler</name>
      <anchor>a0</anchor>
      <arglist>(Router *containingRouter, cSimpleModule *containingModule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MessageReceived</name>
      <anchor>a1</anchor>
      <arglist>(cMessage *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleTimer</name>
      <anchor>a2</anchor>
      <arglist>(OSPFTimer *timer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessPacket</name>
      <anchor>a3</anchor>
      <arglist>(OSPFPacket *packet, Interface *unused1=NULL, Neighbor *unused2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendPacket</name>
      <anchor>a4</anchor>
      <arglist>(OSPFPacket *packet, IPv4Address destination, int outputIfIndex, short ttl=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearTimer</name>
      <anchor>a5</anchor>
      <arglist>(OSPFTimer *timer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartTimer</name>
      <anchor>a6</anchor>
      <arglist>(OSPFTimer *timer, simtime_t delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintEvent</name>
      <anchor>a7</anchor>
      <arglist>(const char *eventString, const Interface *onInterface=NULL, const Neighbor *forNeighbor=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintHelloPacket</name>
      <anchor>a8</anchor>
      <arglist>(const OSPFHelloPacket *helloPacket, IPv4Address destination, int outputIfIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintDatabaseDescriptionPacket</name>
      <anchor>a9</anchor>
      <arglist>(const OSPFDatabaseDescriptionPacket *ddPacket, IPv4Address destination, int outputIfIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintLinkStateRequestPacket</name>
      <anchor>a10</anchor>
      <arglist>(const OSPFLinkStateRequestPacket *requestPacket, IPv4Address destination, int outputIfIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintLinkStateUpdatePacket</name>
      <anchor>a11</anchor>
      <arglist>(const OSPFLinkStateUpdatePacket *updatePacket, IPv4Address destination, int outputIfIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintLinkStateAcknowledgementPacket</name>
      <anchor>a12</anchor>
      <arglist>(const OSPFLinkStateAcknowledgementPacket *ackPacket, IPv4Address destination, int outputIfIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AuthenticatePacket</name>
      <anchor>a13</anchor>
      <arglist>(OSPFPacket *packet)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cSimpleModule *</type>
      <name>ospfModule</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HelloHandler</type>
      <name>helloHandler</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DatabaseDescriptionHandler</type>
      <name>ddHandler</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinkStateRequestHandler</type>
      <name>lsRequestHandler</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinkStateUpdateHandler</type>
      <name>lsUpdateHandler</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinkStateAcknowledgementHandler</type>
      <name>lsAckHandler</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::Neighbor</name>
    <filename>class_o_s_p_f_1_1_neighbor.html</filename>
    <member kind="enumeration">
      <name>NeighborEventType</name>
      <anchor>w27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HelloReceived</name>
      <anchor>w27w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Start</name>
      <anchor>w27w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TwoWayReceived</name>
      <anchor>w27w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NegotiationDone</name>
      <anchor>w27w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExchangeDone</name>
      <anchor>w27w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BadLinkStateRequest</name>
      <anchor>w27w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LoadingDone</name>
      <anchor>w27w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsAdjacencyOK</name>
      <anchor>w27w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SequenceNumberMismatch</name>
      <anchor>w27w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OneWayReceived</name>
      <anchor>w27w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KillNeighbor</name>
      <anchor>w27w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InactivityTimer</name>
      <anchor>w27w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PollTimer</name>
      <anchor>w27w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinkDown</name>
      <anchor>w27w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DDRetransmissionTimer</name>
      <anchor>w27w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpdateRetransmissionTimer</name>
      <anchor>w27w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RequestRetransmissionTimer</name>
      <anchor>w27w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NeighborStateType</name>
      <anchor>w28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DownState</name>
      <anchor>w28w17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AttemptState</name>
      <anchor>w28w18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InitState</name>
      <anchor>w28w19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TwoWayState</name>
      <anchor>w28w20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExchangeStartState</name>
      <anchor>w28w21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExchangeState</name>
      <anchor>w28w22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LoadingState</name>
      <anchor>w28w23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FullState</name>
      <anchor>w28w24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DatabaseExchangeRelationshipType</name>
      <anchor>w29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Master</name>
      <anchor>w29w25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Slave</name>
      <anchor>w29w26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Neighbor</name>
      <anchor>a0</anchor>
      <arglist>(RouterID neighbor=NullRouterID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Neighbor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ProcessEvent</name>
      <anchor>a2</anchor>
      <arglist>(NeighborEventType event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitFirstAdjacency</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>NeighborStateType</type>
      <name>GetState</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendDatabaseDescriptionPacket</name>
      <anchor>a6</anchor>
      <arglist>(bool init=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RetransmitDatabaseDescriptionPacket</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CreateDatabaseSummary</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SendLinkStateRequestPacket</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RetransmitUpdatePacket</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedAdjacency</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToRetransmissionList</name>
      <anchor>a12</anchor>
      <arglist>(OSPFLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFromRetransmissionList</name>
      <anchor>a13</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLSAOnRetransmissionList</name>
      <anchor>a14</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>OSPFLSA *</type>
      <name>FindOnRetransmissionList</name>
      <anchor>a15</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartUpdateRetransmissionTimer</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearUpdateRetransmissionTimer</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToRequestList</name>
      <anchor>a18</anchor>
      <arglist>(OSPFLSAHeader *lsaHeader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFromRequestList</name>
      <anchor>a19</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLSAOnRequestList</name>
      <anchor>a20</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>OSPFLSAHeader *</type>
      <name>FindOnRequestList</name>
      <anchor>a21</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartRequestRetransmissionTimer</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearRequestRetransmissionTimer</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToTransmittedLSAList</name>
      <anchor>a24</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOnTransmittedLSAList</name>
      <anchor>a25</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AgeTransmittedLSAList</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetUniqueULong</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteLastSentDDPacket</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborID</name>
      <anchor>a29</anchor>
      <arglist>(RouterID id)</arglist>
    </member>
    <member kind="function">
      <type>RouterID</type>
      <name>GetNeighborID</name>
      <anchor>a30</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPriority</name>
      <anchor>a31</anchor>
      <arglist>(unsigned char priority)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>GetPriority</name>
      <anchor>a32</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAddress</name>
      <anchor>a33</anchor>
      <arglist>(IPv4Address address)</arglist>
    </member>
    <member kind="function">
      <type>IPv4Address</type>
      <name>GetAddress</name>
      <anchor>a34</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDesignatedRouter</name>
      <anchor>a35</anchor>
      <arglist>(DesignatedRouterID routerID)</arglist>
    </member>
    <member kind="function">
      <type>DesignatedRouterID</type>
      <name>GetDesignatedRouter</name>
      <anchor>a36</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBackupDesignatedRouter</name>
      <anchor>a37</anchor>
      <arglist>(DesignatedRouterID routerID)</arglist>
    </member>
    <member kind="function">
      <type>DesignatedRouterID</type>
      <name>GetBackupDesignatedRouter</name>
      <anchor>a38</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRouterDeadInterval</name>
      <anchor>a39</anchor>
      <arglist>(short interval)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>GetRouterDeadInterval</name>
      <anchor>a40</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDDSequenceNumber</name>
      <anchor>a41</anchor>
      <arglist>(unsigned long sequenceNumber)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetDDSequenceNumber</name>
      <anchor>a42</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOptions</name>
      <anchor>a43</anchor>
      <arglist>(OSPFOptions options)</arglist>
    </member>
    <member kind="function">
      <type>OSPFOptions</type>
      <name>GetOptions</name>
      <anchor>a44</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLastReceivedDDPacket</name>
      <anchor>a45</anchor>
      <arglist>(DDPacketID packetID)</arglist>
    </member>
    <member kind="function">
      <type>DDPacketID</type>
      <name>GetLastReceivedDDPacket</name>
      <anchor>a46</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDatabaseExchangeRelationship</name>
      <anchor>a47</anchor>
      <arglist>(DatabaseExchangeRelationshipType relation)</arglist>
    </member>
    <member kind="function">
      <type>DatabaseExchangeRelationshipType</type>
      <name>GetDatabaseExchangeRelationship</name>
      <anchor>a48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInterface</name>
      <anchor>a49</anchor>
      <arglist>(Interface *intf)</arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>GetInterface</name>
      <anchor>a50</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const Interface *</type>
      <name>GetInterface</name>
      <anchor>a51</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetInactivityTimer</name>
      <anchor>a52</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetPollTimer</name>
      <anchor>a53</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetDDRetransmissionTimer</name>
      <anchor>a54</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OSPFTimer *</type>
      <name>GetUpdateRetransmissionTimer</name>
      <anchor>a55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUpdateRetransmissionTimerActive</name>
      <anchor>a56</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsRequestRetransmissionTimerActive</name>
      <anchor>a57</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFirstAdjacencyInited</name>
      <anchor>a58</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DesignatedRoutersAreSetUp</name>
      <anchor>a59</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUpDesignatedRouters</name>
      <anchor>a60</anchor>
      <arglist>(bool setUp)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetDatabaseSummaryListCount</name>
      <anchor>a61</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IncrementDDSequenceNumber</name>
      <anchor>a62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinkStateRequestListEmpty</name>
      <anchor>a63</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinkStateRetransmissionListEmpty</name>
      <anchor>a64</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PopFirstLinkStateRequest</name>
      <anchor>a65</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>GetStateString</name>
      <anchor>e0</anchor>
      <arglist>(NeighborStateType stateType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ChangeState</name>
      <anchor>d0</anchor>
      <arglist>(NeighborState *newState, NeighborState *currentState)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NeighborState *</type>
      <name>state</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NeighborState *</type>
      <name>previousState</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>inactivityTimer</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>pollTimer</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>ddRetransmissionTimer</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>updateRetransmissionTimer</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>updateRetransmissionTimerActive</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>requestRetransmissionTimer</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>requestRetransmissionTimerActive</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DatabaseExchangeRelationshipType</type>
      <name>databaseExchangeRelationship</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstAdjacencyInited</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>ddSequenceNumber</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DDPacketID</type>
      <name>lastReceivedDDPacket</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouterID</type>
      <name>neighborID</name>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char</type>
      <name>neighborPriority</name>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPv4Address</type>
      <name>neighborIPAddress</name>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFOptions</type>
      <name>neighborOptions</name>
      <anchor>r16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DesignatedRouterID</type>
      <name>neighborsDesignatedRouter</name>
      <anchor>r17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DesignatedRouterID</type>
      <name>neighborsBackupDesignatedRouter</name>
      <anchor>r18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>designatedRoutersSetUp</name>
      <anchor>r19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>neighborsRouterDeadInterval</name>
      <anchor>r20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; OSPFLSA * &gt;</type>
      <name>linkStateRetransmissionList</name>
      <anchor>r21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; OSPFLSAHeader * &gt;</type>
      <name>databaseSummaryList</name>
      <anchor>r22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; OSPFLSAHeader * &gt;</type>
      <name>linkStateRequestList</name>
      <anchor>r23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; TransmittedLSA &gt;</type>
      <name>transmittedLSAs</name>
      <anchor>r24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFDatabaseDescriptionPacket *</type>
      <name>lastTransmittedDDPacket</name>
      <anchor>r25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Interface *</type>
      <name>parentInterface</name>
      <anchor>r26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static unsigned long</type>
      <name>ddSequenceNumberInitSeed</name>
      <anchor>v0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>NeighborState</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">OSPF::Neighbor::DDPacketID</class>
    <class kind="struct">OSPF::Neighbor::TransmittedLSA</class>
  </compound>
  <compound kind="struct">
    <name>OSPF::Neighbor::DDPacketID</name>
    <filename>struct_o_s_p_f_1_1_neighbor_1_1_d_d_packet_i_d.html</filename>
    <member kind="variable">
      <type>OSPFDDOptions</type>
      <name>ddOptions</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OSPFOptions</type>
      <name>options</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>sequenceNumber</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::Neighbor::TransmittedLSA</name>
    <filename>struct_o_s_p_f_1_1_neighbor_1_1_transmitted_l_s_a.html</filename>
    <member kind="variable">
      <type>LSAKeyType</type>
      <name>lsaKey</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>age</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborState</name>
    <filename>class_o_s_p_f_1_1_neighbor_state.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NeighborState</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a1</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchor>a2</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ChangeState</name>
      <anchor>b0</anchor>
      <arglist>(Neighbor *neighbor, NeighborState *newState, NeighborState *currentState)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateAttempt</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_attempt.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateDown</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_down.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateExchange</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_exchange.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateExchangeStart</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_exchange_start.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateFull</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_full.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateInit</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_init.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateLoading</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_loading.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NeighborStateTwoWay</name>
    <filename>class_o_s_p_f_1_1_neighbor_state_two_way.html</filename>
    <base>OSPF::NeighborState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ProcessEvent</name>
      <anchor>a0</anchor>
      <arglist>(Neighbor *neighbor, Neighbor::NeighborEventType event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Neighbor::NeighborStateType</type>
      <name>GetState</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::NextHop</name>
    <filename>struct_o_s_p_f_1_1_next_hop.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>ifIndex</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>hopAddress</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RouterID</type>
      <name>advertisingRouter</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::RoutingInfo</name>
    <filename>class_o_s_p_f_1_1_routing_info.html</filename>
    <member kind="function">
      <type></type>
      <name>RoutingInfo</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingInfo</name>
      <anchor>a1</anchor>
      <arglist>(const RoutingInfo &amp;routingInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingInfo</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNextHop</name>
      <anchor>a3</anchor>
      <arglist>(NextHop nextHop)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearNextHops</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetNextHopCount</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>NextHop</type>
      <name>GetNextHop</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDistance</name>
      <anchor>a7</anchor>
      <arglist>(unsigned long d)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetDistance</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParent</name>
      <anchor>a9</anchor>
      <arglist>(OSPFLSA *p)</arglist>
    </member>
    <member kind="function">
      <type>OSPFLSA *</type>
      <name>GetParent</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NextHop &gt;</type>
      <name>nextHops</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>distance</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFLSA *</type>
      <name>parent</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::LSATrackingInfo</name>
    <filename>class_o_s_p_f_1_1_l_s_a_tracking_info.html</filename>
    <member kind="enumeration">
      <name>InstallSource</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Originated</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flooded</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LSATrackingInfo</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LSATrackingInfo</name>
      <anchor>a1</anchor>
      <arglist>(const LSATrackingInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSource</name>
      <anchor>a2</anchor>
      <arglist>(InstallSource installSource)</arglist>
    </member>
    <member kind="function">
      <type>InstallSource</type>
      <name>GetSource</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IncrementInstallTime</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetInstallTime</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetInstallTime</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InstallSource</type>
      <name>source</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>installTime</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::RouterLSA</name>
    <filename>class_o_s_p_f_1_1_router_l_s_a.html</filename>
    <base>OSPFRouterLSA</base>
    <base>OSPF::RoutingInfo</base>
    <base>OSPF::LSATrackingInfo</base>
    <member kind="function">
      <type></type>
      <name>RouterLSA</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RouterLSA</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFRouterLSA &amp;lsa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RouterLSA</name>
      <anchor>a2</anchor>
      <arglist>(const RouterLSA &amp;lsa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RouterLSA</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateLSChecksum</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Update</name>
      <anchor>a5</anchor>
      <arglist>(const OSPFRouterLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DiffersFrom</name>
      <anchor>a6</anchor>
      <arglist>(const OSPFRouterLSA *routerLSA) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::NetworkLSA</name>
    <filename>class_o_s_p_f_1_1_network_l_s_a.html</filename>
    <base>OSPFNetworkLSA</base>
    <base>OSPF::RoutingInfo</base>
    <base>OSPF::LSATrackingInfo</base>
    <member kind="function">
      <type></type>
      <name>NetworkLSA</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NetworkLSA</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFNetworkLSA &amp;lsa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NetworkLSA</name>
      <anchor>a2</anchor>
      <arglist>(const NetworkLSA &amp;lsa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetworkLSA</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateLSChecksum</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Update</name>
      <anchor>a5</anchor>
      <arglist>(const OSPFNetworkLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DiffersFrom</name>
      <anchor>a6</anchor>
      <arglist>(const OSPFNetworkLSA *networkLSA) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::SummaryLSA</name>
    <filename>class_o_s_p_f_1_1_summary_l_s_a.html</filename>
    <base>OSPFSummaryLSA</base>
    <base>OSPF::RoutingInfo</base>
    <base>OSPF::LSATrackingInfo</base>
    <member kind="function">
      <type></type>
      <name>SummaryLSA</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SummaryLSA</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFSummaryLSA &amp;lsa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SummaryLSA</name>
      <anchor>a2</anchor>
      <arglist>(const SummaryLSA &amp;lsa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SummaryLSA</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetPurgeable</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPurgeable</name>
      <anchor>a5</anchor>
      <arglist>(bool purge=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateLSChecksum</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Update</name>
      <anchor>a7</anchor>
      <arglist>(const OSPFSummaryLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DiffersFrom</name>
      <anchor>a8</anchor>
      <arglist>(const OSPFSummaryLSA *summaryLSA) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>purgeable</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::ASExternalLSA</name>
    <filename>class_o_s_p_f_1_1_a_s_external_l_s_a.html</filename>
    <base>OSPFASExternalLSA</base>
    <base>OSPF::RoutingInfo</base>
    <base>OSPF::LSATrackingInfo</base>
    <member kind="function">
      <type></type>
      <name>ASExternalLSA</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ASExternalLSA</name>
      <anchor>a1</anchor>
      <arglist>(const OSPFASExternalLSA &amp;lsa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ASExternalLSA</name>
      <anchor>a2</anchor>
      <arglist>(const ASExternalLSA &amp;lsa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ASExternalLSA</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetPurgeable</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPurgeable</name>
      <anchor>a5</anchor>
      <arglist>(bool purge=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateLSChecksum</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Update</name>
      <anchor>a7</anchor>
      <arglist>(const OSPFASExternalLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DiffersFrom</name>
      <anchor>a8</anchor>
      <arglist>(const OSPFASExternalLSA *asExternalLSA) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>purgeable</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::Area</name>
    <filename>class_o_s_p_f_1_1_area.html</filename>
    <member kind="function">
      <type></type>
      <name>Area</name>
      <anchor>a0</anchor>
      <arglist>(AreaID id=BackboneAreaID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Area</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAreaID</name>
      <anchor>a2</anchor>
      <arglist>(AreaID areaId)</arglist>
    </member>
    <member kind="function">
      <type>AreaID</type>
      <name>GetAreaID</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAddressRange</name>
      <anchor>a4</anchor>
      <arglist>(IPv4AddressRange addressRange, bool advertise)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetAddressRangeCount</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>IPv4AddressRange</type>
      <name>GetAddressRange</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddHostRoute</name>
      <anchor>a7</anchor>
      <arglist>(HostRouteParameters &amp;hostRouteParameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransitCapability</name>
      <anchor>a8</anchor>
      <arglist>(bool transit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetTransitCapability</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetExternalRoutingCapability</name>
      <anchor>a10</anchor>
      <arglist>(bool flooded)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetExternalRoutingCapability</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStubDefaultCost</name>
      <anchor>a12</anchor>
      <arglist>(Metric cost)</arglist>
    </member>
    <member kind="function">
      <type>Metric</type>
      <name>GetStubDefaultCost</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSPFTreeRoot</name>
      <anchor>a14</anchor>
      <arglist>(RouterLSA *root)</arglist>
    </member>
    <member kind="function">
      <type>RouterLSA *</type>
      <name>GetSPFTreeRoot</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const RouterLSA *</type>
      <name>GetSPFTreeRoot</name>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRouter</name>
      <anchor>a17</anchor>
      <arglist>(Router *router)</arglist>
    </member>
    <member kind="function">
      <type>Router *</type>
      <name>GetRouter</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const Router *</type>
      <name>GetRouter</name>
      <anchor>a19</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetRouterLSACount</name>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>RouterLSA *</type>
      <name>GetRouterLSA</name>
      <anchor>a21</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const RouterLSA *</type>
      <name>GetRouterLSA</name>
      <anchor>a22</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetNetworkLSACount</name>
      <anchor>a23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>NetworkLSA *</type>
      <name>GetNetworkLSA</name>
      <anchor>a24</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const NetworkLSA *</type>
      <name>GetNetworkLSA</name>
      <anchor>a25</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetSummaryLSACount</name>
      <anchor>a26</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SummaryLSA *</type>
      <name>GetSummaryLSA</name>
      <anchor>a27</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const SummaryLSA *</type>
      <name>GetSummaryLSA</name>
      <anchor>a28</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ContainsAddress</name>
      <anchor>a29</anchor>
      <arglist>(IPv4Address address) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAddressRange</name>
      <anchor>a30</anchor>
      <arglist>(IPv4AddressRange addressRange) const </arglist>
    </member>
    <member kind="function">
      <type>IPv4AddressRange</type>
      <name>GetContainingAddressRange</name>
      <anchor>a31</anchor>
      <arglist>(IPv4AddressRange addressRange, bool *advertise=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddInterface</name>
      <anchor>a32</anchor>
      <arglist>(Interface *intf)</arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>GetInterface</name>
      <anchor>a33</anchor>
      <arglist>(unsigned char ifIndex)</arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>GetInterface</name>
      <anchor>a34</anchor>
      <arglist>(IPv4Address address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasVirtualLink</name>
      <anchor>a35</anchor>
      <arglist>(AreaID withTransitArea) const </arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>FindVirtualLink</name>
      <anchor>a36</anchor>
      <arglist>(RouterID routerID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstallRouterLSA</name>
      <anchor>a37</anchor>
      <arglist>(OSPFRouterLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstallNetworkLSA</name>
      <anchor>a38</anchor>
      <arglist>(OSPFNetworkLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstallSummaryLSA</name>
      <anchor>a39</anchor>
      <arglist>(OSPFSummaryLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>RouterLSA *</type>
      <name>FindRouterLSA</name>
      <anchor>a40</anchor>
      <arglist>(LinkStateID linkStateID)</arglist>
    </member>
    <member kind="function">
      <type>const RouterLSA *</type>
      <name>FindRouterLSA</name>
      <anchor>a41</anchor>
      <arglist>(LinkStateID linkStateID) const </arglist>
    </member>
    <member kind="function">
      <type>NetworkLSA *</type>
      <name>FindNetworkLSA</name>
      <anchor>a42</anchor>
      <arglist>(LinkStateID linkStateID)</arglist>
    </member>
    <member kind="function">
      <type>const NetworkLSA *</type>
      <name>FindNetworkLSA</name>
      <anchor>a43</anchor>
      <arglist>(LinkStateID linkStateID) const </arglist>
    </member>
    <member kind="function">
      <type>SummaryLSA *</type>
      <name>FindSummaryLSA</name>
      <anchor>a44</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>const SummaryLSA *</type>
      <name>FindSummaryLSA</name>
      <anchor>a45</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AgeDatabase</name>
      <anchor>a46</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AnyNeighborInStates</name>
      <anchor>a47</anchor>
      <arglist>(int states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFromAllRetransmissionLists</name>
      <anchor>a48</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOnAnyRetransmissionList</name>
      <anchor>a49</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FloodLSA</name>
      <anchor>a50</anchor>
      <arglist>(OSPFLSA *lsa, Interface *intf=NULL, Neighbor *neighbor=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocalAddress</name>
      <anchor>a51</anchor>
      <arglist>(IPv4Address address) const </arglist>
    </member>
    <member kind="function">
      <type>RouterLSA *</type>
      <name>OriginateRouterLSA</name>
      <anchor>a52</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>NetworkLSA *</type>
      <name>OriginateNetworkLSA</name>
      <anchor>a53</anchor>
      <arglist>(const Interface *intf)</arglist>
    </member>
    <member kind="function">
      <type>SummaryLSA *</type>
      <name>OriginateSummaryLSA</name>
      <anchor>a54</anchor>
      <arglist>(const RoutingTableEntry *entry, const std::map&lt; LSAKeyType, bool, LSAKeyType_Less &gt; &amp;originatedLSAs, SummaryLSA *&amp;lsaToReoriginate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalculateShortestPathTree</name>
      <anchor>a55</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;newRoutingTable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalculateInterAreaRoutes</name>
      <anchor>a56</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;newRoutingTable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReCheckSummaryLSAs</name>
      <anchor>a57</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;newRoutingTable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>info</name>
      <anchor>a58</anchor>
      <arglist>(char *buffer)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>detailedInfo</name>
      <anchor>a59</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>SummaryLSA *</type>
      <name>OriginateSummaryLSA</name>
      <anchor>d0</anchor>
      <arglist>(const OSPF::SummaryLSA *summaryLSA)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>HasLink</name>
      <anchor>d1</anchor>
      <arglist>(OSPFLSA *fromLSA, OSPFLSA *toLSA) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; NextHop &gt; *</type>
      <name>CalculateNextHops</name>
      <anchor>d2</anchor>
      <arglist>(OSPFLSA *destination, OSPFLSA *parent) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; NextHop &gt; *</type>
      <name>CalculateNextHops</name>
      <anchor>d3</anchor>
      <arglist>(Link &amp;destination, OSPFLSA *parent) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>LinkStateID</type>
      <name>GetUniqueLinkStateID</name>
      <anchor>d4</anchor>
      <arglist>(IPv4AddressRange destination, Metric destinationCost, SummaryLSA *&amp;lsaToReoriginate) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>FindSameOrWorseCostRoute</name>
      <anchor>d5</anchor>
      <arglist>(const std::vector&lt; OSPF::RoutingTableEntry * &gt; &amp;newRoutingTable, const OSPF::SummaryLSA &amp;currentLSA, unsigned short currentCost, bool &amp;destinationInRoutingTable, std::list&lt; OSPF::RoutingTableEntry * &gt; &amp;sameOrWorseCost) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>RoutingTableEntry *</type>
      <name>CreateRoutingTableEntryFromSummaryLSA</name>
      <anchor>d6</anchor>
      <arglist>(const OSPF::SummaryLSA &amp;summaryLSA, unsigned short entryCost, const OSPF::RoutingTableEntry &amp;borderRouterEntry) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AreaID</type>
      <name>areaID</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; IPv4AddressRange, bool, IPv4AddressRange_Less &gt;</type>
      <name>advertiseAddressRanges</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; IPv4AddressRange &gt;</type>
      <name>areaAddressRanges</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Interface * &gt;</type>
      <name>associatedInterfaces</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; HostRouteParameters &gt;</type>
      <name>hostRoutes</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; LinkStateID, RouterLSA * &gt;</type>
      <name>routerLSAsByID</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RouterLSA * &gt;</type>
      <name>routerLSAs</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; LinkStateID, NetworkLSA * &gt;</type>
      <name>networkLSAsByID</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NetworkLSA * &gt;</type>
      <name>networkLSAs</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; LSAKeyType, SummaryLSA *, LSAKeyType_Less &gt;</type>
      <name>summaryLSAsByID</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; SummaryLSA * &gt;</type>
      <name>summaryLSAs</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>transitCapability</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>externalRoutingCapability</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Metric</type>
      <name>stubDefaultCost</name>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouterLSA *</type>
      <name>spfTreeRoot</name>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Router *</type>
      <name>parentRouter</name>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::AuthenticationKeyType</name>
    <filename>struct_o_s_p_f_1_1_authentication_key_type.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>bytes</name>
      <anchor>o0</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::IPv4Address</name>
    <filename>struct_o_s_p_f_1_1_i_pv4_address.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>bytes</name>
      <anchor>o0</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::IPv4Address_Less</name>
    <filename>class_o_s_p_f_1_1_i_pv4_address___less.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(IPv4Address leftAddress, IPv4Address rightAddress) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::IPv4AddressRange</name>
    <filename>struct_o_s_p_f_1_1_i_pv4_address_range.html</filename>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>address</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>mask</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::IPv4AddressRange_Less</name>
    <filename>class_o_s_p_f_1_1_i_pv4_address_range___less.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(IPv4AddressRange leftAddressRange, IPv4AddressRange rightAddressRange) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::HostRouteParameters</name>
    <filename>struct_o_s_p_f_1_1_host_route_parameters.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>ifIndex</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>address</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Metric</type>
      <name>linkCost</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::LSAKeyType</name>
    <filename>struct_o_s_p_f_1_1_l_s_a_key_type.html</filename>
    <member kind="variable">
      <type>LinkStateID</type>
      <name>linkStateID</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RouterID</type>
      <name>advertisingRouter</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::LSAKeyType_Less</name>
    <filename>class_o_s_p_f_1_1_l_s_a_key_type___less.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(LSAKeyType leftKey, LSAKeyType rightKey) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OSPF::DesignatedRouterID</name>
    <filename>struct_o_s_p_f_1_1_designated_router_i_d.html</filename>
    <member kind="variable">
      <type>RouterID</type>
      <name>routerID</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>ipInterfaceAddress</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::Router</name>
    <filename>class_o_s_p_f_1_1_router.html</filename>
    <member kind="function">
      <type></type>
      <name>Router</name>
      <anchor>a0</anchor>
      <arglist>(RouterID id, cSimpleModule *containingModule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Router</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRouterID</name>
      <anchor>a2</anchor>
      <arglist>(RouterID id)</arglist>
    </member>
    <member kind="function">
      <type>RouterID</type>
      <name>GetRouterID</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRFC1583Compatibility</name>
      <anchor>a4</anchor>
      <arglist>(bool compatibility)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetRFC1583Compatibility</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetAreaCount</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>MessageHandler *</type>
      <name>GetMessageHandler</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetASExternalLSACount</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ASExternalLSA *</type>
      <name>GetASExternalLSA</name>
      <anchor>a9</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const ASExternalLSA *</type>
      <name>GetASExternalLSA</name>
      <anchor>a10</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetASBoundaryRouter</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetRoutingTableEntryCount</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>RoutingTableEntry *</type>
      <name>GetRoutingTableEntry</name>
      <anchor>a13</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>const RoutingTableEntry *</type>
      <name>GetRoutingTableEntry</name>
      <anchor>a14</anchor>
      <arglist>(unsigned long i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRoutingTableEntry</name>
      <anchor>a15</anchor>
      <arglist>(RoutingTableEntry *entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddWatches</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddArea</name>
      <anchor>a17</anchor>
      <arglist>(Area *area)</arglist>
    </member>
    <member kind="function">
      <type>Area *</type>
      <name>GetArea</name>
      <anchor>a18</anchor>
      <arglist>(AreaID areaID)</arglist>
    </member>
    <member kind="function">
      <type>Area *</type>
      <name>GetArea</name>
      <anchor>a19</anchor>
      <arglist>(IPv4Address address)</arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>GetNonVirtualInterface</name>
      <anchor>a20</anchor>
      <arglist>(unsigned char ifIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InstallLSA</name>
      <anchor>a21</anchor>
      <arglist>(OSPFLSA *lsa, AreaID areaID=BackboneAreaID)</arglist>
    </member>
    <member kind="function">
      <type>OSPFLSA *</type>
      <name>FindLSA</name>
      <anchor>a22</anchor>
      <arglist>(LSAType lsaType, LSAKeyType lsaKey, AreaID areaID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AgeDatabase</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AnyNeighborInStates</name>
      <anchor>a24</anchor>
      <arglist>(int states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFromAllRetransmissionLists</name>
      <anchor>a25</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOnAnyRetransmissionList</name>
      <anchor>a26</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FloodLSA</name>
      <anchor>a27</anchor>
      <arglist>(OSPFLSA *lsa, AreaID areaID=BackboneAreaID, Interface *intf=NULL, Neighbor *neighbor=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocalAddress</name>
      <anchor>a28</anchor>
      <arglist>(IPv4Address address) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAddressRange</name>
      <anchor>a29</anchor>
      <arglist>(IPv4AddressRange addressRange) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DestinationIsUnreachable</name>
      <anchor>a30</anchor>
      <arglist>(OSPFLSA *lsa) const </arglist>
    </member>
    <member kind="function">
      <type>RoutingTableEntry *</type>
      <name>Lookup</name>
      <anchor>a31</anchor>
      <arglist>(IPAddress destination, std::vector&lt; RoutingTableEntry * &gt; *table=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RebuildRoutingTable</name>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IPv4AddressRange</type>
      <name>GetContainingAddressRange</name>
      <anchor>a33</anchor>
      <arglist>(IPv4AddressRange addressRange, bool *advertise=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateExternalRoute</name>
      <anchor>a34</anchor>
      <arglist>(IPv4Address networkAddress, const OSPFASExternalLSAContents &amp;externalRouteContents, int ifIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveExternalRoute</name>
      <anchor>a35</anchor>
      <arglist>(IPv4Address networkAddress)</arglist>
    </member>
    <member kind="function">
      <type>RoutingTableEntry *</type>
      <name>GetPreferredEntry</name>
      <anchor>a36</anchor>
      <arglist>(const OSPFLSA &amp;lsa, bool skipSelfOriginated, std::vector&lt; RoutingTableEntry * &gt; *fromRoutingTable=NULL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>InstallASExternalLSA</name>
      <anchor>d0</anchor>
      <arglist>(OSPFASExternalLSA *lsa)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ASExternalLSA *</type>
      <name>FindASExternalLSA</name>
      <anchor>d1</anchor>
      <arglist>(LSAKeyType lsaKey)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const ASExternalLSA *</type>
      <name>FindASExternalLSA</name>
      <anchor>d2</anchor>
      <arglist>(LSAKeyType lsaKey) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>ASExternalLSA *</type>
      <name>OriginateASExternalLSA</name>
      <anchor>d3</anchor>
      <arglist>(ASExternalLSA *lsa)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>LinkStateID</type>
      <name>GetUniqueLinkStateID</name>
      <anchor>d4</anchor>
      <arglist>(IPv4AddressRange destination, Metric destinationCost, OSPF::ASExternalLSA *&amp;lsaToReoriginate, bool externalMetricIsType2=false) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>CalculateASExternalRoutes</name>
      <anchor>d5</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;newRoutingTable)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>NotifyAboutRoutingTableChanges</name>
      <anchor>d6</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;oldRoutingTable)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>HasRouteToASBoundaryRouter</name>
      <anchor>d7</anchor>
      <arglist>(const std::vector&lt; RoutingTableEntry * &gt; &amp;inRoutingTable, OSPF::RouterID routerID) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; RoutingTableEntry * &gt;</type>
      <name>GetRoutesToASBoundaryRouter</name>
      <anchor>d8</anchor>
      <arglist>(const std::vector&lt; RoutingTableEntry * &gt; &amp;fromRoutingTable, OSPF::RouterID routerID) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>PruneASBoundaryRouterEntries</name>
      <anchor>d9</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;asbrEntries) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>RoutingTableEntry *</type>
      <name>SelectLeastCostRoutingEntry</name>
      <anchor>d10</anchor>
      <arglist>(std::vector&lt; RoutingTableEntry * &gt; &amp;entries) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouterID</type>
      <name>routerID</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; AreaID, Area * &gt;</type>
      <name>areasByID</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Area * &gt;</type>
      <name>areas</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; LSAKeyType, ASExternalLSA *, LSAKeyType_Less &gt;</type>
      <name>asExternalLSAsByID</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ASExternalLSA * &gt;</type>
      <name>asExternalLSAs</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; IPv4Address, OSPFASExternalLSAContents, IPv4Address_Less &gt;</type>
      <name>externalRoutes</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFTimer *</type>
      <name>ageTimer</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RoutingTableEntry * &gt;</type>
      <name>routingTable</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MessageHandler *</type>
      <name>messageHandler</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>rfc1583Compatibility</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSPF::RoutingTableEntry</name>
    <filename>class_o_s_p_f_1_1_routing_table_entry.html</filename>
    <base>RoutingEntry</base>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>RoutingDestinationType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>RoutingPathType</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IntraArea</name>
      <anchor>w5w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InterArea</name>
      <anchor>w5w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Type1External</name>
      <anchor>w5w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Type2External</name>
      <anchor>w5w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingTableEntry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoutingTableEntry</name>
      <anchor>a1</anchor>
      <arglist>(const RoutingTableEntry &amp;entry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoutingTableEntry</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a3</anchor>
      <arglist>(const RoutingTableEntry &amp;entry) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a4</anchor>
      <arglist>(const RoutingTableEntry &amp;entry) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDestinationType</name>
      <anchor>a5</anchor>
      <arglist>(RoutingDestinationType type)</arglist>
    </member>
    <member kind="function">
      <type>RoutingDestinationType</type>
      <name>GetDestinationType</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDestinationID</name>
      <anchor>a7</anchor>
      <arglist>(IPAddress destID)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>GetDestinationID</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAddressMask</name>
      <anchor>a9</anchor>
      <arglist>(IPAddress destMask)</arglist>
    </member>
    <member kind="function">
      <type>IPAddress</type>
      <name>GetAddressMask</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOptionalCapabilities</name>
      <anchor>a11</anchor>
      <arglist>(OSPFOptions options)</arglist>
    </member>
    <member kind="function">
      <type>OSPFOptions</type>
      <name>GetOptionalCapabilities</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetArea</name>
      <anchor>a13</anchor>
      <arglist>(AreaID source)</arglist>
    </member>
    <member kind="function">
      <type>AreaID</type>
      <name>GetArea</name>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPathType</name>
      <anchor>a15</anchor>
      <arglist>(RoutingPathType type)</arglist>
    </member>
    <member kind="function">
      <type>RoutingPathType</type>
      <name>GetPathType</name>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCost</name>
      <anchor>a17</anchor>
      <arglist>(Metric pathCost)</arglist>
    </member>
    <member kind="function">
      <type>Metric</type>
      <name>GetCost</name>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType2Cost</name>
      <anchor>a19</anchor>
      <arglist>(Metric pathCost)</arglist>
    </member>
    <member kind="function">
      <type>Metric</type>
      <name>GetType2Cost</name>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinkStateOrigin</name>
      <anchor>a21</anchor>
      <arglist>(const OSPFLSA *lsa)</arglist>
    </member>
    <member kind="function">
      <type>const OSPFLSA *</type>
      <name>GetLinkStateOrigin</name>
      <anchor>a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddNextHop</name>
      <anchor>a23</anchor>
      <arglist>(NextHop hop)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearNextHops</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetNextHopCount</name>
      <anchor>a25</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>NextHop</type>
      <name>GetNextHop</name>
      <anchor>a26</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>NetworkDestination</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>AreaBorderRouterDestination</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ASBoundaryRouterDestination</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingDestinationType</type>
      <name>destinationType</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OSPFOptions</type>
      <name>optionalCapabilities</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AreaID</type>
      <name>area</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingPathType</type>
      <name>pathType</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Metric</type>
      <name>cost</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Metric</type>
      <name>type2Cost</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const OSPFLSA *</type>
      <name>linkStateOrigin</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NextHop &gt;</type>
      <name>nextHops</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
